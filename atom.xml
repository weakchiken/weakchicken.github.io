<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dou Qing</title>
  
  <subtitle>~人间有万紫千红~&lt;br&gt;~唯你是我情之所钟~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-03T06:26:09.681Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Atcode1</title>
    <link href="http://yoursite.com/2020/03/03/atcode/"/>
    <id>http://yoursite.com/2020/03/03/atcode/</id>
    <published>2020-03-03T06:12:47.308Z</published>
    <updated>2020-03-03T06:26:09.681Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --><h1 id="C-一点内容："><a href="#C-一点内容：" class="headerlink" title="C++一点内容："></a><center>C++一点内容：</center></h1><p><center>久违了，ACM<br>这次就再来刷一次吧<br><a id="more"></a></center></p><p><a href="https://atcoder.jp/contests/abc157/tasks/abc157_b" target="_blank" rel="noopener">链接</a></p><h1 id="Bingo"><a href="#Bingo" class="headerlink" title="Bingo"></a>Bingo</h1><p>Time Limit: 2 sec / Memory Limit: 1024 MB</p><p>Score :<br>200<br>points</p><p>Problem Statement<br>We have a bingo card with a 3×3grid. The square at the i-th row from the top and the j-th column from the left contains the number Ai,j.<br>The MC will choose N numbers, b1,b2,⋯,bN<br>. If our bingo sheet contains some of those numbers, we will mark them on our sheet.</p><p>Determine whether we will have a bingo when the N numbers are chosen, that is, the sheet will contain three marked numbers in a row, column, or diagonal.</p><p>Constraints<br>All values in input are integers.<br>1≤Ai,j≤100,<br>Ai1,j1≠Ai2,j2<br>((i1,j1)≠(i2,j2))<br>1≤N≤101≤bi≤100bi≠bj(i≠j)<br><code>Input</code><br>Input is given from Standard Input in the following format:<br></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">A11</span>,A12,A13,A21,A22,A23,A31,A32,A33</span><br><span class="line">N</span><br><span class="line"><span class="keyword">b1</span></span><br><span class="line"><span class="keyword">⋮</span></span><br><span class="line"><span class="keyword">bN</span></span><br></pre></td></tr></table></figure><p></p><p><code>Output</code><br></p><figure class="highlight plain"><figcaption><span>we will have a bingo, print Yes; otherwise, print No.```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`Sample Input 1 `</span><br></pre></td></tr></table></figure><p></p><p>84 97 66<br>79 89 11<br>61 59 7<br>7<br>89<br>7<br>87<br>79<br>24<br>84<br>30<br></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`Sample Output <span class="number">1</span> `</span><br><span class="line"></span><br><span class="line">```Yes</span><br></pre></td></tr></table></figure><p></p><p>We will mark A11,A21,A22,A33, and complete the diagonal from the top-left to the bottom-right.</p><p><code>Sample Input 2</code></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">41 </span><span class="number">7</span> <span class="number">46</span></span><br><span class="line"><span class="symbol">26 </span><span class="number">89</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">78 </span><span class="number">92</span> <span class="number">8</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">57</span></span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure><p><code>Sample Output 2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">We will mark nothing.</span><br><span class="line"></span><br><span class="line">`Sample Input 3 `</span><br></pre></td></tr></table></figure><p>60 88 34<br>92 41 43<br>65 73 48<br>10<br>60<br>43<br>88<br>11<br>48<br>73<br>65<br>41<br>92<br>34<br></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`Sample Output <span class="number">3</span> `</span><br><span class="line">```Yes</span><br></pre></td></tr></table></figure><p></p><p>We will mark all the squares.</p><p><code>题意</code>：<br>3*3的矩阵，先输入数字填满矩阵，然后输入N个数字，如果方阵里面有这些数字，就标记一下<br>如果标记的数字在一行或一列或对角线上面有3个的话，就输出Yes，否则输出No<br>注意看题！！！仔细看题！！！</p><p>题解：</p><blockquote><p>写的有点麻烦了，，，<br></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std<span class="comment">;</span></span><br><span class="line">const int maxx = <span class="number">4</span><span class="comment">;</span></span><br><span class="line">int a[maxx][maxx]<span class="comment">;</span></span><br><span class="line">int <span class="keyword">b[101];</span></span><br><span class="line"><span class="keyword">int </span>c, d, e, f, g, h, k, m<span class="comment">;</span></span><br><span class="line">map&lt;int, int&gt; mp<span class="comment">;</span></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int N, x<span class="comment">;</span></span><br><span class="line">for(int i = <span class="number">0</span><span class="comment">; i &lt; 3; i ++)</span></span><br><span class="line">&#123;</span><br><span class="line">for(int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j &lt; 3; j ++)</span></span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i][<span class="keyword">j];</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">b[a[i][j]] </span>= false<span class="comment">;</span></span><br><span class="line">mp[a[i][<span class="keyword">j]] </span>++<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; N<span class="comment">;</span></span><br><span class="line">for(int i = <span class="number">0</span><span class="comment">; i &lt; N; i ++)</span></span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x<span class="comment">;</span></span><br><span class="line">mp[x] ++<span class="comment">;</span></span><br><span class="line">if(mp[x] == <span class="number">2</span>) <span class="keyword">b[x] </span>= true<span class="comment">;</span></span><br><span class="line">else <span class="keyword">b[x] </span>= false<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">for(int i = <span class="number">0</span><span class="comment">; i &lt; 3; i ++)</span></span><br><span class="line">&#123;</span><br><span class="line">for(int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j &lt; 3; j ++)</span></span><br><span class="line">&#123;</span><br><span class="line">if(i == <span class="number">0</span> &amp;&amp; <span class="keyword">b[a[i][j]])</span></span><br><span class="line"><span class="keyword"></span>c ++<span class="comment">;</span></span><br><span class="line">if(i == <span class="number">1</span> &amp;&amp; <span class="keyword">b[a[i][j]])</span></span><br><span class="line"><span class="keyword"></span>d ++<span class="comment">;</span></span><br><span class="line">if(i == <span class="number">2</span> &amp;&amp; <span class="keyword">b[a[i][j]])</span></span><br><span class="line"><span class="keyword"></span>e ++<span class="comment">;</span></span><br><span class="line">if(<span class="keyword">j </span>== <span class="number">0</span> &amp;&amp; <span class="keyword">b[a[i][j]])</span></span><br><span class="line"><span class="keyword"></span>f ++<span class="comment">;</span></span><br><span class="line">if(<span class="keyword">j </span>== <span class="number">1</span> &amp;&amp; <span class="keyword">b[a[i][j]])</span></span><br><span class="line"><span class="keyword"></span>g ++<span class="comment">;</span></span><br><span class="line">if(<span class="keyword">j </span>== <span class="number">2</span> &amp;&amp; <span class="keyword">b[a[i][j]])</span></span><br><span class="line"><span class="keyword"></span>h ++<span class="comment">;</span></span><br><span class="line">if(<span class="keyword">j </span>== i &amp;&amp; <span class="keyword">b[a[i][j]])</span></span><br><span class="line"><span class="keyword"></span>k ++<span class="comment">;</span></span><br><span class="line">if(((i == <span class="number">0</span> &amp;&amp; <span class="keyword">j </span>== <span class="number">2</span>) <span class="title">||</span> (i == <span class="number">1</span> &amp;&amp; <span class="keyword">j </span>== <span class="number">1</span>) <span class="title">||</span> (i == <span class="number">2</span> &amp;&amp; <span class="keyword">j </span>== <span class="number">0</span>)) &amp;&amp; <span class="keyword">b[a[i][j]])</span></span><br><span class="line"><span class="keyword"></span>m ++<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(c == <span class="number">3</span> <span class="title">||</span> d == <span class="number">3</span> <span class="title">||</span> e == <span class="number">3</span> <span class="title">||</span> f == <span class="number">3</span> <span class="title">||</span> g == <span class="number">3</span> <span class="title">||</span> h == <span class="number">3</span> <span class="title">||</span> k == <span class="number">3</span> <span class="title">||</span> m == <span class="number">3</span>) cout &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="string">'\n'</span><span class="comment">;</span></span><br><span class="line">else cout &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="string">'\n'</span><span class="comment">;</span></span><br><span class="line">return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;C-一点内容：&quot;&gt;&lt;a href=&quot;#C-一点内容：&quot; class=&quot;headerlink&quot; title=&quot;C++一点内容：&quot;&gt;&lt;/a&gt;&lt;center&gt;C++一点内容：&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;久违了，ACM&lt;br&gt;这次就再来刷一次吧&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/11/29/CTF/"/>
    <id>http://yoursite.com/2019/11/29/CTF/</id>
    <published>2019-11-29T14:04:47.995Z</published>
    <updated>2019-11-29T14:04:47.995Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;!-- rebuild by neat --&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rday22</title>
    <link href="http://yoursite.com/2019/11/05/Rday22/"/>
    <id>http://yoursite.com/2019/11/05/Rday22/</id>
    <published>2019-11-04T16:00:00.000Z</published>
    <updated>2020-03-08T13:50:51.410Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday22"><a href="#Rday22" class="headerlink" title="Rday22"></a><center>Rday22</center></h1><p><center>最小生成树 + CTF入门<br><a id="more"></a></center></p><h2 id="P1111-修复公路"><a href="#P1111-修复公路" class="headerlink" title="P1111 修复公路"></a>P1111 修复公路</h2><p><code>题目背景</code><br>AA地区在地震过后，连接所有村庄的公路都造成了损坏而无法通车。政府派人修复这些公路。</p><p><code>题目描述</code><br>给出A地区的村庄数NN，和公路数MM，公路是双向的。并告诉你每条公路的连着哪两个村庄，并告诉你什么时候能修完这条公路。问最早什么时候任意两个村庄能够通车，即最早什么时候任意两条村庄都存在至少一条修复完成的道路（可以由多条公路连成一条道路）</p><p><code>输入格式</code><br>第11行两个正整数N,MN,M</p><p>下面MM行，每行33个正整数x, y, tx,y,t，告诉你这条公路连着x,yx,y两个村庄，在时间t时能修复完成这条公路。</p><p><code>输出格式</code><br>如果全部公路修复完毕仍然存在两个村庄无法通车，则输出-1−1，否则输出最早什么时候任意两个村庄能够通车。</p><p><code>input</code><br></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">6</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p><code>output</code><br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p></p><p>Note<br></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">N<span class="tag">&lt;<span class="name">=1000,M</span>&lt;=<span class="string">100000</span></span></span></span><br><span class="line"><span class="xml">x<span class="tag">&lt;<span class="name">=N,y</span>&lt;=<span class="string">N,t</span>&lt;=<span class="string">100000</span></span></span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pr pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">5005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">ll x, y;</span><br><span class="line">&#125;No[maxx];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[maxx];</span><br><span class="line"><span class="keyword">double</span> d[maxx];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((No[i].x - No[j].x) * (No[i].x - No[j].x) + (No[i].y - No[j].y) * (No[i].y - No[j].y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        d[i] = <span class="number">1e9</span>;</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">double</span> minn;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        id = <span class="number">-1</span>, minn = <span class="number">1e9</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; d[i] &lt; minn)</span><br><span class="line">                id = i, minn = d[i];</span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        vis[id] = <span class="number">1</span>;</span><br><span class="line">        ans += minn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> tmp = dis(id, i);</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; d[i] &gt; tmp)</span><br><span class="line">                d[i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;No[i].x, &amp;No[i].y);</span><br><span class="line">    prim();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday22&quot;&gt;&lt;a href=&quot;#Rday22&quot; class=&quot;headerlink&quot; title=&quot;Rday22&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday22&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;最小生成树 + CTF入门&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="CTF" scheme="http://yoursite.com/categories/ACM/CTF/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="最小生成树" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Rday21</title>
    <link href="http://yoursite.com/2019/10/23/Rday21/"/>
    <id>http://yoursite.com/2019/10/23/Rday21/</id>
    <published>2019-10-22T16:00:00.000Z</published>
    <updated>2020-03-08T13:51:02.651Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday2"><a href="#Rday2" class="headerlink" title="Rday2"></a><center>Rday2</center></h1><p><center>并查集 + 贪心 + CTF入门<br><a id="more"></a></center></p><h2 id="Cyclic-Components"><a href="#Cyclic-Components" class="headerlink" title="Cyclic Components"></a>Cyclic Components</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">You are <span class="keyword">given</span> an undirected graph consisting <span class="keyword">of</span> nn vertices <span class="keyword">and</span> mm edges. Your task <span class="keyword">is</span> <span class="keyword">to</span> find <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> connected components which are cycles.</span><br><span class="line"></span><br><span class="line">Here are <span class="keyword">some</span> definitions <span class="keyword">of</span> graph theory.</span><br><span class="line"></span><br><span class="line">An undirected graph consists <span class="keyword">of</span> two sets: <span class="keyword">set</span> <span class="keyword">of</span> nodes (called vertices) <span class="keyword">and</span> <span class="keyword">set</span> <span class="keyword">of</span> edges. Each edge connects a pair <span class="keyword">of</span> vertices. All edges are bidirectional (i.e. <span class="keyword">if</span> a vertex aa <span class="keyword">is</span> connected <span class="keyword">with</span> a vertex bb, a vertex bb <span class="keyword">is</span> also connected <span class="keyword">with</span> a vertex aa). An edge can't connect vertex <span class="keyword">with</span> itself, there <span class="keyword">is</span> <span class="keyword">at</span> most one edge <span class="keyword">between</span> a pair <span class="keyword">of</span> vertices.</span><br><span class="line"></span><br><span class="line">Two vertices uu <span class="keyword">and</span> vv belong <span class="keyword">to</span> <span class="keyword">the</span> same connected component <span class="keyword">if</span> <span class="keyword">and</span> only <span class="keyword">if</span> there <span class="keyword">is</span> <span class="keyword">at</span> least one path along edges connecting uu <span class="keyword">and</span> vv.</span><br><span class="line"></span><br><span class="line">A connected component <span class="keyword">is</span> a cycle <span class="keyword">if</span> <span class="keyword">and</span> only <span class="keyword">if</span> <span class="keyword">its</span> vertices can be reordered <span class="keyword">in</span> such a way <span class="keyword">that</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">the</span> <span class="keyword">first</span> vertex <span class="keyword">is</span> connected <span class="keyword">with</span> <span class="keyword">the</span> <span class="keyword">second</span> vertex <span class="keyword">by</span> an edge,</span><br><span class="line"><span class="keyword">the</span> <span class="keyword">second</span> vertex <span class="keyword">is</span> connected <span class="keyword">with</span> <span class="keyword">the</span> <span class="keyword">third</span> vertex <span class="keyword">by</span> an edge,</span><br><span class="line">...</span><br><span class="line"><span class="keyword">the</span> <span class="keyword">last</span> vertex <span class="keyword">is</span> connected <span class="keyword">with</span> <span class="keyword">the</span> <span class="keyword">first</span> vertex <span class="keyword">by</span> an edge,</span><br><span class="line">all <span class="keyword">the</span> described edges <span class="keyword">of</span> a cycle are distinct.</span><br><span class="line">A cycle <span class="keyword">doesn't contain</span> any other edges except described <span class="keyword">above</span>. By definition any cycle <span class="keyword">contains</span> three <span class="keyword">or</span> more vertices.</span><br><span class="line"></span><br><span class="line">There are <span class="number">66</span> connected components, <span class="number">22</span> <span class="keyword">of</span> them are cycles: [<span class="number">7</span>,<span class="number">10</span>,<span class="number">16</span>][<span class="number">7</span>,<span class="number">10</span>,<span class="number">16</span>] <span class="keyword">and</span> [<span class="number">5</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">15</span>][<span class="number">5</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">15</span>].</span><br><span class="line">`Input：`</span><br><span class="line"></span><br><span class="line">The <span class="keyword">first</span> line <span class="keyword">contains</span> two <span class="built_in">integer</span> numbers nn <span class="keyword">and</span> mm (<span class="number">1</span>≤n≤<span class="number">2</span>⋅<span class="number">1051</span>≤n≤<span class="number">2</span>⋅<span class="number">105</span>, <span class="number">0</span>≤m≤<span class="number">2</span>⋅<span class="number">1050</span>≤m≤<span class="number">2</span>⋅<span class="number">105</span>) — <span class="built_in">number</span> <span class="keyword">of</span> vertices <span class="keyword">and</span> edges.</span><br><span class="line"></span><br><span class="line">The following mm lines <span class="keyword">contains</span> edges: edge ii <span class="keyword">is</span> <span class="keyword">given</span> <span class="keyword">as</span> a pair <span class="keyword">of</span> vertices vivi, uiui (<span class="number">1</span>≤vi,ui≤n1≤vi,ui≤n, ui≠viui≠vi). There <span class="keyword">is</span> no multiple edges <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">given</span> graph, i.e. <span class="keyword">for</span> each pair (vi,uivi,ui) there no other pairs (vi,uivi,ui) <span class="keyword">and</span> (ui,viui,vi) <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">list</span> <span class="keyword">of</span> edges.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">`Output：`</span><br><span class="line"></span><br><span class="line">Print one <span class="built_in">integer</span> — <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> connected components which are also cycles.</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line">Output</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Input</span><br><span class="line"></span><br><span class="line"><span class="number">17</span> <span class="number">15</span></span><br><span class="line"><span class="number">1</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">12</span></span><br><span class="line"><span class="number">5</span> <span class="number">11</span></span><br><span class="line"><span class="number">11</span> <span class="number">9</span></span><br><span class="line"><span class="number">9</span> <span class="number">15</span></span><br><span class="line"><span class="number">15</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">13</span></span><br><span class="line"><span class="number">3</span> <span class="number">13</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">16</span></span><br><span class="line"><span class="number">7</span> <span class="number">10</span></span><br><span class="line"><span class="number">16</span> <span class="number">7</span></span><br><span class="line"><span class="number">14</span> <span class="number">3</span></span><br><span class="line"><span class="number">14</span> <span class="number">4</span></span><br><span class="line"><span class="number">17</span> <span class="number">6</span></span><br><span class="line">Output</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Note：</span><br><span class="line"></span><br><span class="line">In the first example only component [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>][<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="keyword">is</span> also a cycle.</span><br><span class="line"></span><br><span class="line">The illustration above corresponds to the second example.</span><br></pre></td></tr></table></figure><p><code>题意:</code><br>1.<br>通过观察发现单圈环里的顶点的度都为2，所以并查集找连通图，sum存顶点度数，遍历查找单圈环。<br>2.<br>并查集判环大致就是在两个点进行unite操作时先判断一下父节点是否相同，<br>不相同的话就正常把两个点放进一个集合，如果相同，说明这两个点已经处于一个集合中了，再把这两个点联通，也就出现了环。</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">2e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"><span class="keyword">int</span> par[maxx] , sum[maxx];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">par[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> par[x] == x ? x : par[x] = find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = find(x);</span><br><span class="line">y = find(y);</span><br><span class="line"><span class="keyword">if</span>(x != y) par[x] = y;</span><br><span class="line"><span class="keyword">else</span> ans ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</span><br><span class="line">init(n);</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">edge e[m];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; e[i].u &gt;&gt; e[i].v;</span><br><span class="line">sum[e[i].u] ++;</span><br><span class="line">sum[e[i].v] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[e[i].u] == <span class="number">2</span> &amp;&amp; sum[e[i].v] == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">join(e[i].u, e[i].v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="P1094-纪念品分组"><a href="#P1094-纪念品分组" class="headerlink" title="P1094 纪念品分组"></a>P1094 纪念品分组</h2><p>题目描述<br>元旦快到了，校学生会让乐乐负责新年晚会的纪念品发放工作。为使得参加晚会的同学所获得 的纪念品价值相对均衡，他要把购来的纪念品根据价格进行分组，但每组最多只能包括两件纪念品， 并且每组纪念品的价格之和不能超过一个给定的整数。为了保证在尽量短的时间内发完所有纪念品，乐乐希望分组的数目最少。</p><p>你的任务是写一个程序，找出所有分组方案中分组数最少的一种，输出最少的分组数目。</p><p><code>输入格式</code><br>共n+2行:</p><p>第1行包括一个整数w，为每组纪念品价格之和的上上限。<br>第2行为一个整数n，表示购来的纪念品的总件数G。<br>第3至n+2行每行包含一个正整数P_i(5 &lt;= P_i &lt;= w)表示所对应纪念品的价格。</p><p><code>输出格式</code><br>一个整数，即最少的分组数目。<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入输出样例</span><br><span class="line">输入</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">90</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">70</span></span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="number">90</span></span><br><span class="line">输出</span><br><span class="line"><span class="number">6</span></span><br><span class="line">说明/提示</span><br><span class="line"><span class="number">50</span>％的数据满足：<span class="number">1</span> \le n \le <span class="number">151</span>≤n≤<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="number">100</span>％的数据满足：<span class="number">1</span> \le n \le <span class="number">30000</span>,<span class="number">80</span> \le w \le <span class="number">2001</span>≤n≤<span class="number">30000</span>,<span class="number">80</span>≤w≤<span class="number">200</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意:</code><br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">很简单的一道贪心题，设一个<span class="string">"指针"</span>l和r分别指向首和尾，首先排序，然后开始让<span class="selector-tag">a</span>[l] + <span class="selector-tag">a</span>[r] &lt;= w的时候作为一组，l和r分别向后向前移一位，组数++，否则数组++，r--</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">sort(a, a + n);</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((a[l] + a[r]) &lt;= w)</span><br><span class="line">&#123;</span><br><span class="line">ans ++;</span><br><span class="line">l ++;</span><br><span class="line">r --;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans ++;</span><br><span class="line">r --;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="CTF"><a href="#CTF" class="headerlink" title="CTF:"></a>CTF:</h2><p>一道来自Wargame.kr v2.1的SB题WTF_CODE<br>进去之后题目是</p><p>이게 진짜 소스코드라고? 아무것도 안보인다고!!</p><p>is this source code really???? i can`t see anything really!</p><p><a href="source_code.ws"></a></p><p>然后你点击链接之后会让你下载一个文件，然后打开(用记事本就可以)之后你会发现里面什么都没有((艹皿艹 ))，但是当你全选之后你会发现一个神奇的事情，全tm是空格是tab<br>然后你可能就和我一样，人直接就傻了<br>google一波后发现还有一个神奇的网站<br><a href="ideone.com"></a><br>(艹皿艹 )严重怀疑这两个网站是一伙的，然后在最下面的选择语言里面有一个Whitespace,选择它然后复制并粘贴之前的一堆“答案”，Run。拉倒最下面，就能得到答案了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday2&quot;&gt;&lt;a href=&quot;#Rday2&quot; class=&quot;headerlink&quot; title=&quot;Rday2&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday2&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;并查集 + 贪心 + CTF入门&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="CTF" scheme="http://yoursite.com/categories/ACM/CTF/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Rday20</title>
    <link href="http://yoursite.com/2019/10/17/Rday20/"/>
    <id>http://yoursite.com/2019/10/17/Rday20/</id>
    <published>2019-10-16T16:00:00.000Z</published>
    <updated>2020-03-08T13:51:09.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday20"><a href="#Rday20" class="headerlink" title="Rday20"></a><center>Rday20</center></h1><p><center>二分 + CTF入门<br><a id="more"></a></center></p><p>Computer Game<br></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vova <span class="keyword">is</span> playing a computer game. There are <span class="keyword">in</span> total n turns <span class="keyword">in</span> <span class="keyword">the</span> game <span class="keyword">and</span> Vova really wants <span class="keyword">to</span> play all <span class="keyword">of</span> them. The initial charge <span class="keyword">of</span> his laptop battery (i.e. <span class="keyword">the</span> charge <span class="keyword">before</span> <span class="keyword">the</span> start <span class="keyword">of</span> <span class="keyword">the</span> game) <span class="keyword">is</span> k.</span><br><span class="line"></span><br><span class="line">During each turn Vova can choose what <span class="keyword">to</span> do:</span><br><span class="line"></span><br><span class="line">If <span class="keyword">the</span> current charge <span class="keyword">of</span> his laptop battery <span class="keyword">is</span> strictly <span class="keyword">greater than</span> a, Vova can just play, <span class="keyword">and</span> <span class="keyword">then</span> <span class="keyword">the</span> charge <span class="keyword">of</span> his laptop battery will decrease <span class="keyword">by</span> a;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">the</span> current charge <span class="keyword">of</span> his laptop battery <span class="keyword">is</span> strictly <span class="keyword">greater than</span> b (b&lt;a), Vova can play <span class="keyword">and</span> charge his laptop, <span class="keyword">and</span> <span class="keyword">then</span> <span class="keyword">the</span> charge <span class="keyword">of</span> his laptop battery will decrease <span class="keyword">by</span> b;<span class="keyword">if</span> <span class="keyword">the</span> current charge <span class="keyword">of</span> his laptop battery <span class="keyword">is</span> <span class="keyword">less than or equal</span> <span class="keyword">to</span> a <span class="keyword">and</span> b <span class="keyword">at</span> <span class="keyword">the</span> same <span class="built_in">time</span> <span class="keyword">then</span> Vova cannot do anything <span class="keyword">and</span> loses <span class="keyword">the</span> game.</span><br><span class="line">Regardless <span class="keyword">of</span> Vova's turns <span class="keyword">the</span> charge <span class="keyword">of</span> <span class="keyword">the</span> laptop battery <span class="keyword">is</span> always decreases.</span><br><span class="line"></span><br><span class="line">Vova wants <span class="keyword">to</span> complete <span class="keyword">the</span> game (Vova can complete <span class="keyword">the</span> game <span class="keyword">if</span> <span class="keyword">after</span> each <span class="keyword">of</span> n turns <span class="keyword">the</span> charge <span class="keyword">of</span> <span class="keyword">the</span> laptop battery <span class="keyword">is</span> strictly <span class="keyword">greater than</span> <span class="number">0</span>). Vova has <span class="keyword">to</span> play exactly n turns. Among all possible ways <span class="keyword">to</span> complete <span class="keyword">the</span> game, Vova wants <span class="keyword">to</span> choose <span class="keyword">the</span> one <span class="keyword">where</span> <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> turns when he just plays (<span class="keyword">first</span> type turn) <span class="keyword">is</span> <span class="keyword">the</span> maximum possible. It <span class="keyword">is</span> possible <span class="keyword">that</span> Vova cannot complete <span class="keyword">the</span> game <span class="keyword">at</span> all.</span><br><span class="line"></span><br><span class="line">Your task <span class="keyword">is</span> <span class="keyword">to</span> find out <span class="keyword">the</span> maximum possible <span class="built_in">number</span> <span class="keyword">of</span> turns Vova can just play (make <span class="keyword">the</span> <span class="keyword">first</span> type turn) <span class="keyword">or</span> report <span class="keyword">that</span> Vova cannot complete <span class="keyword">the</span> game.</span><br><span class="line"></span><br><span class="line">You have <span class="keyword">to</span> answer q independent queries.</span><br></pre></td></tr></table></figure><p></p><p><code>Input</code><br></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The <span class="keyword">first</span> <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">the</span> input <span class="keyword">contains</span> <span class="literal">one</span> <span class="keyword">integer</span> q (<span class="number">1</span>≤q≤<span class="number">105</span>) — <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> queries. Each query is presented <span class="keyword">by</span> <span class="keyword">a</span> single <span class="built_in">line</span>.</span><br><span class="line"></span><br><span class="line">The only <span class="built_in">line</span> <span class="keyword">of</span> <span class="keyword">the</span> query <span class="keyword">contains</span> <span class="literal">four</span> integers k,n,<span class="keyword">a</span> <span class="keyword">and</span> b (<span class="number">1</span>≤k,n≤<span class="number">109</span>,<span class="number">1</span>≤b&lt;<span class="keyword">a</span>≤<span class="number">109</span>) — <span class="keyword">the</span> initial charge <span class="keyword">of</span> Vova<span class="string">'s laptop battery, the number of turns in the game and values a and b, correspondingly.</span></span><br></pre></td></tr></table></figure><p></p><p><code>Output</code><br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">For</span> each query <span class="builtin-name">print</span> one integer: -1 <span class="keyword">if</span> Vova cannot complete the game <span class="keyword">or</span> the maximum number of turns Vova can just play (make the first<span class="built_in"> type </span>turn) otherwise.</span><br></pre></td></tr></table></figure><p></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">15</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">15</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">15</span> <span class="number">5</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">15</span> <span class="number">5</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">16</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">20</span> <span class="number">5</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">Note</span><br><span class="line">In the first example query Vova can just play <span class="number">4</span> turns <span class="keyword">and</span> spend <span class="number">12</span> units of charge <span class="keyword">and</span> then one turn play <span class="keyword">and</span> charge <span class="keyword">and</span> spend <span class="number">2</span> more units. So the remaining charge of the battery will be <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">In the second example query Vova cannot complete the game because even <span class="keyword">if</span> he will play <span class="keyword">and</span> charge the battery during each turn then the charge of the laptop battery will be <span class="number">0</span> after the last turn.</span><br></pre></td></tr></table></figure><p><code>思路</code>:<br>给定四个数字 k, n, a, b, 其中 a &gt; b，要求最大数 i 使得 i <em>a + (n - i) </em>b &lt; n 成立</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分解法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll k, n, a, b;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">slove</span><span class="params">(ll mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> mid*a + (n - mid) * b &lt; k;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">ll t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">ll l = <span class="number">0</span>, r = n;</span><br><span class="line">ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">ll mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(slove(mid))</span><br><span class="line">&#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">ans = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//大佬的解法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll t;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line">k --;</span><br><span class="line"><span class="keyword">if</span>(k / b &lt; n) ans = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">k -= n * b;</span><br><span class="line">a -= b;</span><br><span class="line">ans = min(n, k / a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Training: Regex (Training, Regex)</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Level <span class="number">1</span></span><br><span class="line">匹配一个空字符串，学习匹配匹配字符串开头结尾的两个符号：/^<span class="variable">$/</span></span><br><span class="line"></span><br><span class="line">^ 匹配字符串的开始</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>匹配字符串的结束</span><br><span class="line">Level <span class="number">2</span></span><br><span class="line">匹配”wechall”，/^wechall<span class="variable">$/</span></span><br><span class="line"></span><br><span class="line">Level <span class="number">3</span></span><br><span class="line">匹配以wechall或wechall4为文件名，并以.jpg/.gif/.tiff/.bmp/.png为后缀的图像，</span><br><span class="line"></span><br><span class="line">/^wechall4?\.(?<span class="symbol">:jpg|gif|tiff|bmp|png</span>)<span class="variable">$/</span></span><br><span class="line">? 重复零次或一次</span><br><span class="line">所以<span class="number">4</span>?表示重复<span class="number">0</span>次或<span class="number">1</span>次<span class="number">4</span>，也就是wechall和wechall4都可以匹配。</span><br><span class="line"></span><br><span class="line">\. 转义</span><br><span class="line">使用\来取消.字符的特殊意义，来显示.字符本身</span><br><span class="line"></span><br><span class="line">(?<span class="symbol">:jpg|gif|tiff|bmp|png</span>)\</span><br><span class="line">(?<span class="symbol">:exp</span>)表示非捕获分组，匹配exp,不捕获匹配的文本，也不给此分组分配组号。</span><br><span class="line"></span><br><span class="line">为什么要用(?<span class="symbol">:exp</span>)，而不用(exp)呢？因为直接提交/^wechall4?\.(jpg|gif|tiff|bmp|png)<span class="variable">$/</span>会报错：</span><br><span class="line"></span><br><span class="line">Your pattern would capture a string, but this is <span class="keyword">not</span> wanted. Please <span class="keyword">use</span> a non capturing group.</span><br><span class="line">您的模式将捕获一个字符串，但这是不需要的。请使用非捕获组。</span><br><span class="line"></span><br><span class="line">所以需要使用(?<span class="symbol">:exp</span>)非捕获分组。</span><br><span class="line"></span><br><span class="line">至于(?<span class="symbol">:jpg|gif|tiff|bmp|png</span>)\中的|表示分枝条件</span><br><span class="line"></span><br><span class="line">Level <span class="number">4</span></span><br><span class="line">捕获文件名，需要对文件名添加捕获分组：</span><br><span class="line"></span><br><span class="line">/^(wechall4?)\.(?<span class="symbol">:jpg|gif|tiff|bmp|png</span>)<span class="variable">$/</span></span><br><span class="line">(wechall4?)用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作。</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday20&quot;&gt;&lt;a href=&quot;#Rday20&quot; class=&quot;headerlink&quot; title=&quot;Rday20&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday20&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;二分 + CTF入门&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="CTF" scheme="http://yoursite.com/categories/ACM/CTF/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Rday12</title>
    <link href="http://yoursite.com/2019/09/28/Rday12/"/>
    <id>http://yoursite.com/2019/09/28/Rday12/</id>
    <published>2019-09-27T16:00:00.000Z</published>
    <updated>2020-03-08T13:51:13.158Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday12"><a href="#Rday12" class="headerlink" title="Rday12"></a><center>Rday12</center></h1><p><center>食物链<br><code>待补</code><br><a id="more"></a></center></p><p>动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。<br>现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。<br>有人用两种说法对这N个动物所构成的食物链关系进行描述：<br>第一种说法是”1 X Y”，表示X和Y是同类。<br>第二种说法是”2 X Y”，表示X吃Y。<br>此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。<br>1） 当前的话与前面的某些真的话冲突，就是假话；<br>2） 当前的话中X或Y比N大，就是假话；<br>3） 当前的话表示X吃X，就是假话。<br>你的任务是根据给定的N（1 &lt;= N &lt;= 50,000）和K句话（0 &lt;= K &lt;= 100,000），输出假话的总数。<br><code>Input</code><br>第一行是两个整数N和K，以一个空格分隔。<br>以下K行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。<br>若D=1，则表示X和Y是同类。<br>若D=2，则表示X吃Y。<br><code>Output</code><br>只有一个整数，表示假话的数目。<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">100</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">101</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday12&quot;&gt;&lt;a href=&quot;#Rday12&quot; class=&quot;headerlink&quot; title=&quot;Rday12&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday12&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;食物链&lt;br&gt;&lt;code&gt;待补&lt;/code&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Rday11</title>
    <link href="http://yoursite.com/2019/09/27/Rday11/"/>
    <id>http://yoursite.com/2019/09/27/Rday11/</id>
    <published>2019-09-26T16:00:00.000Z</published>
    <updated>2020-03-08T13:51:18.030Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday11"><a href="#Rday11" class="headerlink" title="Rday11"></a><center>Rday11</center></h1><p><center>背包<br><code>待补</code><br><a id="more"></a></center></p><h2 id="Cash-Machine"><a href="#Cash-Machine" class="headerlink" title="Cash Machine"></a>Cash Machine</h2><p>A Bank plans to install a machine for cash withdrawal. The machine is able to deliver appropriate @ bills for a requested cash amount. The machine uses exactly N distinct bill denominations, say Dk, k=1,N, and for each denomination Dk the machine has a supply of nk bills. For example,<br>N=3, n1=10, D1=100, n2=4, D2=50, n3=5, D3=10<br>means the machine has a supply of 10 bills of @100 each, 4 bills of @50 each, and 5 bills of @10 each.<br>Call cash the requested amount of cash the machine should deliver and write a program that computes the maximum amount of cash less than or equal to cash that can be effectively delivered according to the available bill supply of the machine.</p><p>Notes:<br>@ is the symbol of the currency delivered by the machine. For instance, @ may stand for dollar, euro, pound etc.<br><code>Input</code><br>The program input is from standard input. Each data set in the input stands for a particular transaction and has the format:<br>cash N n1 D1 n2 D2 … nN DN<br>where 0 &lt;= cash &lt;= 100000 is the amount of cash requested, 0 &lt;=N &lt;= 10 is the number of bill denominations and 0 &lt;= nk &lt;= 1000 is the number of available bills for the Dk denomination, 1 &lt;= Dk &lt;= 1000, k=1,N. White spaces can occur freely between the numbers in the input. The input data are correct.<br><code>Output</code><br>For each set of data the program prints the result to the standard output on a separate line as shown in the examples below.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">735</span> <span class="number">3</span>  <span class="number">4</span> <span class="number">125</span>  <span class="number">6</span> <span class="number">5</span>  <span class="number">3</span> <span class="number">350</span></span><br><span class="line"><span class="number">633</span> <span class="number">4</span>  <span class="number">500</span> <span class="number">30</span>  <span class="number">6</span> <span class="number">100</span>  <span class="number">1</span> <span class="number">5</span>  <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">735</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">3</span>  <span class="number">10</span> <span class="number">100</span>  <span class="number">10</span> <span class="number">50</span>  <span class="number">10</span> <span class="number">10</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">735</span></span><br><span class="line"><span class="number">630</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">Hint</span><br><span class="line">The first data <span class="keyword">set</span> designates a transaction where the amount of cash requested <span class="keyword">is</span> @<span class="number">735.</span> The machine contains <span class="number">3</span> bill denominations: <span class="number">4</span> bills of @<span class="number">125</span>, <span class="number">6</span> bills of @<span class="number">5</span>, <span class="keyword">and</span> <span class="number">3</span> bills of @<span class="number">350.</span> The machine can deliver the exact amount of requested cash.</span><br><span class="line"></span><br><span class="line">In the second <span class="keyword">case</span> the bill supply of the machine does <span class="keyword">not</span> fit the exact amount of cash requested. The maximum cash that can be delivered <span class="keyword">is</span> @<span class="number">630.</span> Notice that there can be several possibilities to combine the bills <span class="keyword">in</span> the machine <span class="keyword">for</span> matching the delivered cash.</span><br><span class="line"></span><br><span class="line">In the third <span class="keyword">case</span> the machine <span class="keyword">is</span> empty <span class="keyword">and</span> no cash <span class="keyword">is</span> delivered. In the fourth <span class="keyword">case</span> the amount of cash requested <span class="keyword">is</span> @<span class="number">0</span> <span class="keyword">and</span>, therefore, the machine delivers no cash.</span><br></pre></td></tr></table></figure><p></p><p><code>题意：</code><br>多重背包</p><p>code:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p><h2 id="Investment"><a href="#Investment" class="headerlink" title="Investment"></a>Investment</h2><p>John never knew he had a grand-uncle, until he received the notary’s letter. He learned that his late grand-uncle had gathered a lot of money, somewhere in South-America, and that John was the only inheritor.<br>John did not need that much money for the moment. But he realized that it would be a good idea to store this capital in a safe place, and have it grow until he decided to retire. The bank convinced him that a certain kind of bond was interesting for him.<br>This kind of bond has a fixed value, and gives a fixed amount of yearly interest, payed to the owner at the end of each year. The bond has no fixed term. Bonds are available in different sizes. The larger ones usually give a better interest. Soon John realized that the optimal set of bonds to buy was not trivial to figure out. Moreover, after a few years his capital would have grown, and the schedule had to be re-evaluated.<br>Assume the following bonds are available:<br>Value|Annual interest<br>4000|400<br>3000|250</p><p>With a capital of e10 000 one could buy two bonds of $4 000, giving a yearly interest of $800. Buying two bonds of $3 000, and one of $4 000 is a better idea, as it gives a yearly interest of $900. After two years the capital has grown to $11 800, and it makes sense to sell a $3 000 one and buy a $4 000 one, so the annual interest grows to $1 050. This is where this story grows unlikely: the bank does not charge for buying and selling bonds. Next year the total sum is $12 850, which allows for three times $4 000, giving a yearly interest of $1 200.<br>Here is your problem: given an amount to begin with, a number of years, and a set of bonds with their values and interests, find out how big the amount may grow in the given period, using the best schedule for buying and selling bonds.<br><code>Input</code><br>The first line contains a single positive integer N which is the number of test cases. The test cases follow.<br>The first line of a test case contains two positive integers: the amount to start with (at most $1 000 000), and the number of years the capital may grow (at most 40).<br>The following line contains a single number: the number d (1 &lt;= d &lt;= 10) of available bonds.<br>The next d lines each contain the description of a bond. The description of a bond consists of two positive integers: the value of the bond, and the yearly interest for that bond. The value of a bond is always a multiple of $1 000. The interest of a bond is never more than 10% of its value.<br><code>Output</code><br>For each test case, output – on a separate line – the capital at the end of the period, after an optimal schedule of buying and selling.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10000</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4000</span> <span class="number">400</span></span><br><span class="line"><span class="number">3000</span> <span class="number">250</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">14050</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>完全背包</p><p>code:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday11&quot;&gt;&lt;a href=&quot;#Rday11&quot; class=&quot;headerlink&quot; title=&quot;Rday11&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday11&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;背包&lt;br&gt;&lt;code&gt;待补&lt;/code&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="背包" scheme="http://yoursite.com/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Rday10</title>
    <link href="http://yoursite.com/2019/09/26/Rday10/"/>
    <id>http://yoursite.com/2019/09/26/Rday10/</id>
    <published>2019-09-25T16:00:00.000Z</published>
    <updated>2020-03-08T13:51:25.453Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday10"><a href="#Rday10" class="headerlink" title="Rday10"></a><center>Rday10</center></h1><p><center>FBI树<br><code>待补</code><br><a id="more"></a></center></p><h2 id="FBI树"><a href="#FBI树" class="headerlink" title="FBI树"></a>FBI树</h2><p><a href="https://ac.nowcoder.com/acm/contest/1086/A" target="_blank" rel="noopener">链接</a></p><p><code>题目描述</code><br>我们可以把由“0”和“1”组成的字符串分为三类：全“0”串称为B串，全“1”串称为I串，既含“0”又含“1”的串则称为F串。</p><p>FBI树是一种二叉树1，它的结点类型也包括F结点，B结点和I结点三种。由一个长度为2N的“01”串S可以构造出一棵FBI树T，递归的构造方法如下：</p><p>1) T的根结点为R，其类型与串S的类型相同；</p><p>2) 若串S的长度大于1，将串S从中间分开，分为等长的左右子串S1和S2；由左子串S1构造R的左子树T1，由右子串S2构造R的右子树T2。</p><p>现在给定一个长度为2N的“01”串，请用上述构造方法构造出一棵FBI树，并输出它的后序遍历2序列。<br>1) 二叉树：二叉树是结点的有限集合，这个集合或为空集，或由一个根结点和两棵不相交的二叉树组成。这两棵不相交的二叉树分别称为这个根结点的左子树和右子树。</p><p>2) 后序遍历：后序遍历是深度优先遍历二叉树的一种方法，它的递归定义是：先后序遍历左子树，再后序遍历右子树，最后访问根。</p><p><code>输入描述:</code><br>第一行是一个整数N（0 &lt;= N &lt;= 10）<br>第二行是一个长度为2N的“01”串。<br><code>输出描述:</code><br>一个字符串，即FBI树的后序遍历序列。<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">示例<span class="number">1</span></span><br><span class="line">输入</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">10001011</span></span><br><span class="line">输出</span><br><span class="line">IBFBBBFIBFIIIFF</span><br></pre></td></tr></table></figure><p></p><p>备注:<br>对于40%的数据，N &lt;= 2；<br>对于全部的数据，N&lt;= 10。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday10&quot;&gt;&lt;a href=&quot;#Rday10&quot; class=&quot;headerlink&quot; title=&quot;Rday10&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday10&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;FBI树&lt;br&gt;&lt;code&gt;待补&lt;/code&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Rday9</title>
    <link href="http://yoursite.com/2019/09/25/Rday9/"/>
    <id>http://yoursite.com/2019/09/25/Rday9/</id>
    <published>2019-09-24T16:00:00.000Z</published>
    <updated>2020-03-08T13:50:08.532Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --><h1 id="Rday9"><a href="#Rday9" class="headerlink" title="Rday9"></a><center>Rday9</center></h1><p><center>贪心<br><a id="more"></a></center></p><h2 id="Gathering-Children"><a href="#Gathering-Children" class="headerlink" title="Gathering Children"></a>Gathering Children</h2><p>Given is a string S consisting of L and R.</p><p>Let N be the length of S. There are N squares arranged from left to right, and the i-th character of S from the left is written on the i-th square from the left.</p><p>The character written on the leftmost square is always R, and the character written on the rightmost square is always L.</p><p>Initially, one child is standing on each square.</p><p>Each child will perform the move below 10^{100} times:</p><p>Move one square in the direction specified by the character written in the square on which the child is standing. L denotes left, and R denotes right.<br>Find the number of children standing on each square after the children performed the moves.</p><p>Constraints<br>S is a string of length between 2 and 10^5 (inclusive).<br>Each character of S is L or R.<br>The first and last characters of S are R and L, respectively.<br><code>Input</code><br>Input is given from Standard Input in the following format:</p><p>S<br><code>Output</code><br>Print the number of children standing on each square after the children performed the moves, in order from left to right.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">1</span></span><br><span class="line">RRLRL</span><br><span class="line">Sample Output <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">After each child performed one move, the number of children standing on each square <span class="keyword">is</span> <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span> <span class="keyword">from</span> left to right.</span><br><span class="line">After each child performed two moves, the number of children standing on each square <span class="keyword">is</span> <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span> <span class="keyword">from</span> left to right.</span><br><span class="line">After each child performed <span class="number">10</span>^&#123;<span class="number">100</span>&#125; moves, the number of children standing on each square <span class="keyword">is</span> <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span> <span class="keyword">from</span> left to right.</span><br><span class="line">Sample Input <span class="number">2</span></span><br><span class="line">RRLLLLRLRRLL</span><br><span class="line">Sample Output <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">3</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span></span><br><span class="line">Sample Input <span class="number">3</span></span><br><span class="line">RRRLLRLLRRRLLLLL</span><br><span class="line">Sample Output <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">3</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code>:<br>题意就是给一个R开头L结尾只包括R和L的字符串，然后有字符串长的广场，每个广场一个小孩，每个小孩需要按照地标走（地标就是当前位置的字符，R向右，L向左），问你走10^100次后每个广场的孩子人数。<br>我觉得是一道思维题，模拟几遍后发现只有在RL的交界处才会有孩子，而当一个子集（例如RRRRLL）中如果R+L是偶数，那么就把和平分到最后一个R和第一个L。如果是奇数就需要找到是R最后大还是L最后大了。<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">R  R  L                R  R  R L  L                        R  R  R R  R  L L</span><br><span class="line">    <span class="number">0</span>:           <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>                <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span> <span class="number">1</span>  <span class="number">1</span>                        <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span> <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span> <span class="number">1</span></span><br><span class="line">    <span class="number">1</span>:           <span class="number">0</span>  <span class="number">2</span>  <span class="number">1</span>                <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span> <span class="number">2</span>  <span class="number">0</span>                        <span class="number">0</span>  <span class="number">1</span>  <span class="number">1</span> <span class="number">1</span>  <span class="number">2</span>  <span class="number">2</span> <span class="number">0</span></span><br><span class="line">    <span class="number">2</span>:           <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>                <span class="number">0</span>  <span class="number">0</span>  <span class="number">3</span> <span class="number">2</span>  <span class="number">0</span>                        <span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span> <span class="number">1</span>  <span class="number">3</span>  <span class="number">2</span> <span class="number">0</span></span><br><span class="line">    <span class="number">3</span>:           <span class="number">0</span>  <span class="number">2</span>  <span class="number">1</span>                <span class="number">0</span>  <span class="number">0</span>  <span class="number">2</span> <span class="number">3</span>  <span class="number">0</span>                        <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">1</span>  <span class="number">3</span>  <span class="number">3</span> <span class="number">0</span></span><br><span class="line">    <span class="number">4</span>:           <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>                <span class="number">0</span>  <span class="number">0</span>  <span class="number">3</span> <span class="number">2</span>  <span class="number">0</span>                        <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span> <span class="number">0</span>  <span class="number">4</span>  <span class="number">3</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p>由此我们可以发现，当r &gt; l &amp;&amp; (r - l)%2 == 1 时，如果l%2 == 0，r比l大1；否则l比r大1。同理可推到l &gt; r的情况。</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> ans[maxx];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">int</span> len = s.size();</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i ++)</span><br><span class="line">&#123;</span><br><span class="line">l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'R'</span>)</span><br><span class="line">&#123;</span><br><span class="line">r ++;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j] == <span class="string">'R'</span>)</span><br><span class="line">r ++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">x = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = x; j &lt; len; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[j] == <span class="string">'L'</span>)</span><br><span class="line">l ++;</span><br><span class="line"><span class="keyword">if</span>(s[j] == <span class="string">'R'</span> || j == len - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[x] = ans[x - <span class="number">1</span>] = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(r &gt; l &amp;&amp; (r - l) % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">ans[x] ++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans[x - <span class="number">1</span>] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l &gt; r &amp;&amp; (l - r) % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(r % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">ans[x - <span class="number">1</span>] ++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans[x] ++;</span><br><span class="line">&#125;</span><br><span class="line">y = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i = y - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(y == len - <span class="number">1</span>)</span><br><span class="line">i ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line"><span class="keyword">if</span>(i &lt; len - <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday9&quot;&gt;&lt;a href=&quot;#Rday9&quot; class=&quot;headerlink&quot; title=&quot;Rday9&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday9&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;贪心&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Rday8</title>
    <link href="http://yoursite.com/2019/09/24/Rday8/"/>
    <id>http://yoursite.com/2019/09/24/Rday8/</id>
    <published>2019-09-23T16:00:00.000Z</published>
    <updated>2020-03-08T13:50:14.436Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday8"><a href="#Rday8" class="headerlink" title="Rday8"></a><center>Rday8</center></h1><p><center>BFS<br><a id="more"></a></center></p><h2 id="Catch-him"><a href="#Catch-him" class="headerlink" title="Catch him"></a>Catch him</h2><p>在美式足球中，四分卫负责指挥整只球队的进攻战术和跑位，以及给接球员传球的任务。四分卫是一只球队进攻组最重要的球员，而且一般身体都相对比较弱小，所以通常球队会安排5-7名大汉来保护他，其中站在四分卫前方、排成一线的5名球员称为进攻锋线，他们通常都是135公斤左右的壮汉。<br>对防守方来说，攻击对手的四分卫当然是最直接的限制对手进攻的方法。如果效果好，就可以在对方四分卫传球之前将其按翻在地，称之为擒杀。擒杀是最好的鼓舞防守队士气的方法，因为对方连传球的机会都没有，进攻就结束了，还必须倒退一些距离开球。凶狠的擒杀甚至能够将对方的四分卫弄伤，从而迫使对方更换这个进攻核心。<br>在本题中，输入给出准备擒杀四分卫的防守球员的位置、对方每个进攻锋线球员的位置以及对方四分卫的位置，你的任务是求出这名准备擒杀的防守球员至少要移动多少步，才能够擒杀对方四分卫。<br>假设对方进攻锋线和四分卫在这个过程中都不会移动。只有1名防守球员，防守球员只要碰到对方四分卫就算擒杀。<br>所有的球员都是一块连续的、不中空的2维区域。防守球员不可以从进攻锋线的身体上穿过，也不可以从界外穿过(只能走空地)。<br>防守队员不可以转动身体，只能平移。防守队员的身体所有部分向同一个方向(上、下、左、右)移动1格的过程叫做1步。</p><p><code>Input</code><br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入包含多组数据。每组数据第一行都是两个整数H，W(<span class="number">0</span>&lt;H,W&lt;=<span class="number">100</span>)，表示整个区域的高度和宽度，H=W=<span class="number">0</span>表示输入结束。接下来有H行，每行W个字符。每个字符如果是’.’，表示这里是空地，如果是’O’，表示是进攻锋线队员的身体，如果是’D’，表示是准备擒杀的防守球员的身体，如果是’Q’，表示是四分卫的身体。</span><br><span class="line">输入保证符合上面的条件。防守球员的身体总共不超过<span class="number">20</span>格。</span><br></pre></td></tr></table></figure><p></p><p><code>Output</code><br>对每组数据，输出包含擒杀所需最少步数的一行。如果不能擒杀，输出带’Impossible’的一行。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">6</span> <span class="number">6</span></span><br><span class="line"><span class="selector-class">.Q</span>....</span><br><span class="line">QQ..OO</span><br><span class="line"><span class="selector-class">.OO</span>..O</span><br><span class="line">..<span class="selector-class">.O</span><span class="selector-class">.O</span></span><br><span class="line">OO<span class="selector-class">.O</span>..</span><br><span class="line">....DD</span><br><span class="line"><span class="number">7</span> <span class="number">7</span></span><br><span class="line"><span class="selector-class">.Q</span>.....</span><br><span class="line">QQ<span class="selector-class">.OOO</span>.</span><br><span class="line">..<span class="selector-class">.O</span>...</span><br><span class="line">O......</span><br><span class="line">OO.<span class="selector-class">.OO</span>.</span><br><span class="line"><span class="selector-class">.O</span>.....</span><br><span class="line">.....DD</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">Impossible</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p><code>题意</code>:<br>首先我们移动的是一个由好多格子或者单个格子组成的一个D（防守队员）。如果我们每一个点都进行移动的话未免有点太尴尬，而且<code>vis[][]</code>判断是否走过该点的判断也不是很好写，这个时候我们需要一个抽象的想法：我们把这一坨D的最先出现的D（两层for遍历的情况下）当做一个头，我们移动头即可，那么我们怎样细节上处理这个题目呢？<br>如果我们有了一个标尺：“头” 之后呢，我们vis【】【】数组也就好处理了，对于头走过的点，标记上即可，那么他的身子要怎样移动呢？<br>我们都学过一个名词叫做：“相对”，关系可以相对，力可以相对，那么位子也可以相对。<br>对于这样的一个图：<br>ODO<br>ODO<br>ODD<br>我们规定第一个出现的D也就是坐标为（0,1）的点作为这个一坨D的头，我们可以通过头这样找到其他的身体部分：<br>（0,1）+（1，0）=（1,1）找到第二个出现的D，（0,1）+（2,0）=（2,1）找到第三个出现的D，（0,1）+（2,1）=（2,2）找到最后一个D。<br>那么我们可以通过保存（1,0）（2,0）（2,1）这三个x，y的相对位子值来通过“头”找到他们的身子。<br>这个时候小问题处理完毕了，我们就可以确定答题思路了：<br>用头漫无目的的BFS，每一次找到一个能走的位子都判断一下身子能否也可以达到相对位子，当然我们的“头”找到了Q的时候不要直接输出步数，我们还要判断他的身子能否走到合法的位子。同理，如果“身子”找到了Q的时候也不要直接输出步数，我们要确定所有身子的组成都能走到合法的位子才行</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e3</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, step;</span><br><span class="line">&#125;now, nex;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> fang[<span class="number">25</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> a[maxx][maxx];</span><br><span class="line"><span class="keyword">int</span> vis[maxx][maxx];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">4</span>][<span class="number">2</span>] = &#123;</span><br><span class="line"><span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">-1</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">-1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">vis[x][y] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt; q;</span><br><span class="line">now.x = x;</span><br><span class="line">now.y = y;</span><br><span class="line">now.step = <span class="number">0</span>;</span><br><span class="line">q.push(now);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">now = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line">nex.x = now.x + d[i][<span class="number">0</span>];</span><br><span class="line">nex.y = now.y + d[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(nex.x &gt;= <span class="number">0</span> &amp;&amp; nex.y &gt;= <span class="number">0</span> &amp;&amp; nex.x &lt; n &amp;&amp; nex.y &lt; m &amp;&amp; vis[nex.x][nex.y] == <span class="number">0</span> &amp;&amp; a[nex.x][nex.y] != <span class="string">'O'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到头部</span></span><br><span class="line"><span class="keyword">if</span>(a[nex.x][nex.y] == <span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//找头部附近的其他身体部分 并且判断是否合法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = nex.x + fang[j][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> yy = nex.y + fang[j][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(xx &gt;= <span class="number">0</span> &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; xx &lt; n &amp;&amp; yy &lt; m &amp;&amp; a[xx][yy] != <span class="string">'O'</span>) <span class="keyword">continue</span>;</span><br><span class="line">flag = <span class="number">0</span>;<span class="comment">//不合法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; now.step + <span class="number">1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> flag1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = nex.x + fang[j][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> yy = nex.y + fang[j][<span class="number">1</span>];</span><br><span class="line"><span class="comment">//如果某个身子的部分碰到了Q，这个时候不要break，也要继续判断其他身子是否合法。</span></span><br><span class="line"><span class="keyword">if</span>(xx &gt;= <span class="number">0</span> &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; xx &lt; n &amp;&amp; yy &lt; m &amp;&amp; a[xx][yy] == <span class="string">'Q'</span>) flag1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(xx &gt;= <span class="number">0</span> &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; xx &lt; n &amp;&amp; yy &lt; m &amp;&amp; a[xx][yy] != <span class="string">'O'</span>) <span class="keyword">continue</span>;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span> &amp;&amp; flag1 == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; now.step + <span class="number">1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line">vis[nex.x][nex.y] = <span class="number">1</span>;</span><br><span class="line">nex.step = now.step + <span class="number">1</span>;</span><br><span class="line">q.push(nex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sx, sy;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == <span class="string">'D'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//找到头</span></span><br><span class="line"><span class="keyword">if</span>(cnt == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sx = i;</span><br><span class="line">sy = j;</span><br><span class="line">cnt = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//记录身体的其他部分</span></span><br><span class="line">fang[cnt][<span class="number">0</span>] = i - sx;</span><br><span class="line">fang[cnt][<span class="number">1</span>] = j - sy;</span><br><span class="line">cnt ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">bfs(sx, sy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday8&quot;&gt;&lt;a href=&quot;#Rday8&quot; class=&quot;headerlink&quot; title=&quot;Rday8&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday8&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;BFS&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>Rday7</title>
    <link href="http://yoursite.com/2019/09/23/Rday7/"/>
    <id>http://yoursite.com/2019/09/23/Rday7/</id>
    <published>2019-09-22T16:00:00.000Z</published>
    <updated>2020-03-08T13:50:19.480Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --><h1 id="Rday7"><a href="#Rday7" class="headerlink" title="Rday7"></a><center>Rday7</center></h1><p><center>单调栈<br><a id="more"></a></center></p><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>单调栈，顾名思义，是栈内元素保持一定单调性（单调递增或单调递减）的栈。这里的单调递增或递减是指的从栈顶到栈底单调递增或递减。既然是栈，就满足后进先出的特点。与之相对应的是单调队列。</p><h3 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h3><p>例如实现一个单调递增的栈，比如现在有一组数10，3，7，4，12。从左到右依次入栈，则如果栈为空或入栈元素值小于栈顶元素值，则入栈；否则，如果入栈则会破坏栈的单调性，则需要把比入栈元素小的元素全部出栈。单调递减的栈反之。</p><p>10入栈时，栈为空，直接入栈，栈内元素为10。<br>3入栈时，栈顶元素10比3大，则入栈，栈内元素为10，3。<br>7入栈时，栈顶元素3比7小，则栈顶元素出栈，此时栈顶元素为10，比7大，则7入栈，栈内元素为10，7。<br>4入栈时，栈顶元素7比4大，则入栈，栈内元素为10，7，4。<br>12入栈时，栈顶元素4比12小，4出栈，此时栈顶元素为7，仍比12小，栈顶元素7继续出栈，此时栈顶元素为10，仍比12小，10出栈，此时栈为空，12入栈，栈内元素为12。</p><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 本伪代码对应的是单调递减栈</span></span><br><span class="line"><span class="comment">*共n个元素，编号为0~n-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">while(栈为空) 栈顶元素出栈<span class="comment">; //先清空栈</span></span><br><span class="line">a[n]=-<span class="number">1</span><span class="comment">;</span></span><br><span class="line">for(i=<span class="number">0</span><span class="comment">;i&lt;=n;i++)</span></span><br><span class="line">&#123;</span><br><span class="line">if(栈为空或入栈元素大于等于栈顶元素) 入栈<span class="comment">;</span></span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">while(栈非空并且栈顶元素大于等于入栈元素)</span><br><span class="line">&#123;</span><br><span class="line">栈顶元素出栈<span class="comment">;</span></span><br><span class="line">更新结果<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">将最后一次出栈的栈顶元素（即当前元素可以拓展到的位置）入栈<span class="comment">;</span></span><br><span class="line">更新最后一次出栈的栈顶元素其对应的值<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h4><p>以上就是一个单调栈的定义及其实现，下面就来说一下它可以解决哪些问题。碰到问题时就需要灵活运用了。</p><p>1.最基础的应用就是给定一组数，针对每个数，寻找它和它右边第一个比它大的数之间有多少个数。<br>2.给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列的长度最大。<br>3.给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列所有元素和最大。</p><h2 id="Bad-Hair-Day"><a href="#Bad-Hair-Day" class="headerlink" title="Bad Hair Day"></a>Bad Hair Day</h2><p>Some of Farmer John’s N cows (1 ≤ N ≤ 80,000) are having a bad hair day! Since each cow is self-conscious about her messy hairstyle, FJ wants to count the number of other cows that can see the top of other cows’ heads.</p><p>Each cow i has a specified height hi (1 ≤ hi ≤ 1,000,000,000) and is standing in a line of cows all facing east (to the right in our diagrams). Therefore, cow i can see the tops of the heads of cows in front of her (namely cows i+1, i+2, and so on), for as long as these cows are strictly shorter than cow i.</p><p>Consider this example:</p><pre><code>=</code></pre><p>= =<br>= - = Cows facing right –&gt;<br>= = =<br>= - = = =<br>= = = = = =<br>1 2 3 4 5 6<br>Cow#1 can see the hairstyle of cows #2, 3, 4<br>Cow#2 can see no cow’s hairstyle<br>Cow#3 can see the hairstyle of cow #4<br>Cow#4 can see no cow’s hairstyle<br>Cow#5 can see the hairstyle of cow 6<br>Cow#6 can see no cows at all!</p><p>Let ci denote the number of cows whose hairstyle is visible from cow i; please compute the sum of c1 through cN.For this example, the desired is answer 3 + 0 + 1 + 0 + 1 + 0 = 5.</p><p><code>Input</code><br>Line 1: The number of cows, N.<br>Lines 2..N+1: Line i+1 contains a single integer that is the height of cow i.<br><code>Output</code><br>Line 1: A single integer that is the sum of c 1 through cN.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意：</code><br>也就是说针对每只牛，啊，不，每头牛求它到它右边第一个比它高（或身高相等）的牛之间有多少头牛，然后将求得的结果相加就是最后的答案。朴素的做法是针对每头牛去寻找右边比它高的牛的位置，时间复杂度为O(n^2)，如果用单调栈的话就是O(n).<br>利用根据单调递增栈解决，如果栈为空或入栈元素小于栈顶元素则入栈，否则会破坏栈的单调性，则将栈顶元素出栈并更新结果，直到栈为空或碰到一个小于入栈元素的值。然后将当前元素入栈。</p><p>设数组的最后一个元素为最大值，也就相当于在最右边的牛的右边设了一个高度无限高的牛。这样做的目的是，最后让栈内的元素全部出栈。</p><p>PS：代码中的单调栈保存的是牛的位置。结果应该用long long 型，最多有80000头牛，每头牛右边最多有80000头牛，80000<em>80000=6.4</em>10^9，而int最多表示大约为2*10^9……</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx], n, top;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!s.empty()) s.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">a[n] = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果栈为空或入栈元素小于栈顶元素，则入栈</span></span><br><span class="line"><span class="keyword">if</span>(s.empty() || a[i] &lt; a[s.top()])</span><br><span class="line">s.push(i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果栈不为空并且栈顶元素不大于入栈元素，则将栈顶元素出栈</span></span><br><span class="line"><span class="keyword">while</span>(!s.empty() &amp;&amp; a[i] &gt;= a[s.top()])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取栈顶元素</span></span><br><span class="line">top = s.top();</span><br><span class="line"><span class="comment">//栈顶元素出栈</span></span><br><span class="line">s.pop();</span><br><span class="line"><span class="comment">//两坐标之差减去一</span></span><br><span class="line">ans += (i - top - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; top &lt;&lt; " " &lt;&lt; ans &lt;&lt; '\n';</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当前元素入栈，为了不影响坐标位置</span></span><br><span class="line">s.push(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Largest-Rectangle-in-a-Histogram"><a href="#Largest-Rectangle-in-a-Histogram" class="headerlink" title="Largest Rectangle in a Histogram"></a>Largest Rectangle in a Histogram</h2><p>A histogram is a polygon composed of a sequence of rectangles aligned at a common base line. The rectangles have equal widths but may have different heights. For example, the figure on the left shows the histogram that consists of rectangles with the heights 2, 1, 4, 5, 1, 3, 3, measured in units where 1 is the width of the rectangles:<br><img src="https://i.loli.net/2019/09/24/GzlrdbAyqe6Ws8R.gif" alt><br>Usually, histograms are used to represent discrete distributions, e.g., the frequencies of characters in texts. Note that the order of the rectangles, i.e., their heights, is important. Calculate the area of the largest rectangle in a histogram that is aligned at the common base line, too. The figure on the right shows the largest aligned rectangle for the depicted histogram.<br><code>Input</code><br>The input contains several test cases. Each test case describes a histogram and starts with an integer n, denoting the number of rectangles it is composed of. You may assume that 1&lt;=n&lt;=100000. Then follow n integers h1,…,hn, where 0&lt;=hi&lt;=1000000000. These numbers denote the heights of the rectangles of the histogram in left-to-right order. The width of each rectangle is 1. A zero follows the input for the last test case.<br><code>Output</code><br>For each test case output on a single line the area of the largest rectangle in the specified histogram. Remember that this rectangle must be aligned at the common base line.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">7</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">1000</span> <span class="number">1000</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">4000</span></span><br><span class="line">Hint</span><br><span class="line">Huge input, scanf <span class="keyword">is</span> recommended.</span><br></pre></td></tr></table></figure><p></p><p><code>题意：</code><br>对于每个矩形，我们求出它向左向右分别能延伸的长度，然后乘以它的高度，这就是以当前矩形为最低高度可以得到的最大的面积。只需要求个最大值即可。总结性的来说就是：给定一序列，寻找某一子序列，使得子序列中的最小值乘以子序列的长度最大。这是单调栈的一种应用。<br>构造一个单调递减的单调栈，如果栈为空或入栈元素大于等于栈顶元素则入栈，否则会破坏栈的单调性，将大于入栈元素的栈顶元素出栈，直到栈为空或遇到一个小于等于入栈元素的元素。然后将最后一次出栈的栈顶元素向左向右延伸，也就是确定以栈顶元素的高度为最低高度的矩形的宽度，改变其对应的值，然后入栈。<br>并且将数组最后一个元素设为最小值，以最后清空栈内所有元素。</p><p><code>注意：</code><br>1.单调栈保存的是每个矩形的编号，也就是位置。<br>2.在维护单调栈，也就是每个矩形向左向右延伸的过程中会使原来数组的值改变。<br>3.数据很大，要用long long型。<br>4.最后一次出栈的栈顶元素就是当前入栈元素可以向左拓展到的最大距离。</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line">ll a[maxx], n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans, tem = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span>(!s.empty()) s.pop();</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">a[n] = <span class="number">-1</span>;<span class="comment">//清空栈</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果栈为空或者入栈元素大于等于栈顶元素，入栈</span></span><br><span class="line"><span class="keyword">if</span>(s.empty() || a[i] &gt;= a[s.top()])</span><br><span class="line">s.push(i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//如果栈不为空并且入栈元素比栈顶元素小的时候才能更新面积</span></span><br><span class="line"><span class="keyword">while</span>(!s.empty() &amp;&amp; a[i] &lt; a[s.top()])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//标记栈顶元素</span></span><br><span class="line">flag = s.top();</span><br><span class="line">s.pop();</span><br><span class="line"><span class="comment">//出栈过程中计算面积</span></span><br><span class="line">tem = (i - flag) * a[flag];</span><br><span class="line">ans = max(ans, tem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只将可以延伸到的最左端的位置入栈</span></span><br><span class="line">s.push(flag);</span><br><span class="line"><span class="comment">//并修改该位置的值</span></span><br><span class="line">a[flag] = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="Feel-Good"><a href="#Feel-Good" class="headerlink" title="Feel Good"></a>Feel Good</h3><p>Description<br>Bill is developing a new mathematical theory for human emotions. His recent investigations are dedicated to studying how good or bad days influent people’s memories about some period of life.<br>A new idea Bill has recently developed assigns a non-negative integer value to each day of human life.<br>Bill calls this value the emotional value of the day. The greater the emotional value is, the better the daywas. Bill suggests that the value of some period of human life is proportional to the sum of the emotional values of the days in the given period, multiplied by the smallest emotional value of the day in it. This schema reflects that good on average period can be greatly spoiled by one very bad day.<br>Now Bill is planning to investigate his own life and find the period of his life that had the greatest value. Help him to do so.<br><code>Input</code><br>The first line of the input contains n - the number of days of Bill’s life he is planning to investigate(1 &lt;= n &lt;= 100 000). The rest of the file contains n integer numbers a1, a2, … an ranging from 0 to 106 - the emotional values of the days. Numbers are separated by spaces and/or line breaks.<br><code>Output</code><br>Print the greatest value of some period of Bill’s life in the first line. And on the second line print two numbers l and r such that the period from l-th to r-th day of Bill’s life(inclusive) has the greatest possible value. If there are multiple periods with the greatest possible value,then print any one of them.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意：</code><br>求序列中的最小值乘以这个序列的和的值最大，是典型的单调栈的应用。一般的思路是求每个数字所在的能使其值为区间最小值的最大区间，然后求出区间元素和乘以该值并更新结果的最大值。普通的做法时间复杂度为O(n^2)，用单调栈可以达到O(n)。<br>用一个单调递减栈，如果栈为空或入栈元素大于等于栈顶元素，则入栈，否则将破坏栈的单调性，则将栈顶元素出栈，直到栈为空或碰到第一个小于等于入栈元素的元素。然后将最后一次出栈的栈顶元素入栈，并将其向左右拓展，并更新其对应的值。<br>由于维护单调栈会改变原数组的值，同时为了方便求区间元素值，我们设置一个sum数组，记录前缀和。<br>我们将原数组的最后一个值设为最小值，以方便最后将栈内所有元素出栈。</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//pos1和pos2记录区间的开始和结束位置</span></span><br><span class="line"><span class="keyword">int</span> i,n,pos1,pos2;</span><br><span class="line"><span class="comment">//tmp为临时变量，记录区间内的和；top指向栈顶元素；ans为结果；sum为前缀和</span></span><br><span class="line">LL tmp,top,ans,a[<span class="number">100010</span>],sum[<span class="number">100010</span>];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st; <span class="comment">//单调栈，记录元素位置</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!st.empty()) st.pop(); <span class="comment">//清空栈</span></span><br><span class="line">sum[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">sum[i]=sum[i<span class="number">-1</span>]+a[i]; <span class="comment">//计算前缀和</span></span><br><span class="line">&#125;</span><br><span class="line">a[n+<span class="number">1</span>]=<span class="number">-1</span>; <span class="comment">//将最后一个设为最小值，以最后让栈内元素全部出栈</span></span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(st.empty()||a[i]&gt;=a[st.top()])</span><br><span class="line">&#123; <span class="comment">//如果栈为空或入栈元素大于等于栈顶元素，则入栈</span></span><br><span class="line">st.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!st.empty()&amp;&amp;a[i]&lt;a[st.top()])</span><br><span class="line">&#123; <span class="comment">//如果栈非空并且入栈元素小于栈顶元素，则将栈顶元素出栈</span></span><br><span class="line">top=st.top();</span><br><span class="line">st.pop();</span><br><span class="line">tmp=sum[i<span class="number">-1</span>]-sum[top<span class="number">-1</span>]; <span class="comment">//计算区间内元素和</span></span><br><span class="line">tmp*=a[top]; <span class="comment">//计算结果</span></span><br><span class="line"><span class="keyword">if</span>(tmp&gt;=ans)</span><br><span class="line">&#123; <span class="comment">//更新最大值并记录位置</span></span><br><span class="line">ans=tmp;</span><br><span class="line">pos1=top;</span><br><span class="line">pos2=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">st.push(top); <span class="comment">//将最后一次出栈的栈顶元素入栈</span></span><br><span class="line">a[top]=a[i]; <span class="comment">//将其向左向右延伸并更新对应的值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,pos1,pos2<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday7&quot;&gt;&lt;a href=&quot;#Rday7&quot; class=&quot;headerlink&quot; title=&quot;Rday7&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday7&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;单调栈&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="单调栈" scheme="http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>Rday6</title>
    <link href="http://yoursite.com/2019/09/22/Rday6/"/>
    <id>http://yoursite.com/2019/09/22/Rday6/</id>
    <published>2019-09-21T16:00:00.000Z</published>
    <updated>2020-03-08T13:50:23.408Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --><h1 id="Rday6"><a href="#Rday6" class="headerlink" title="Rday6"></a><center>Rday6</center></h1><p><center>小比赛<br><a id="more"></a></center></p><h2 id="Connecting-Vertices"><a href="#Connecting-Vertices" class="headerlink" title="Connecting Vertices"></a>Connecting Vertices</h2><p>There are n points marked on the plane. The points are situated in such a way that they form a regular polygon (marked points are its vertices, and they are numbered in counter-clockwise order). You can draw n - 1 segments, each connecting any two marked points, in such a way that all points have to be connected with each other (directly or indirectly).</p><p>But there are some restrictions. Firstly, some pairs of points cannot be connected directly and have to be connected undirectly. Secondly, the segments you draw must not intersect in any point apart from the marked points (that is, if any two segments intersect and their intersection is not a marked point, then the picture you have drawn is invalid).</p><p>How many ways are there to connect all vertices with n - 1 segments? Two ways are considered different iff there exist some pair of points such that a segment is drawn between them in the first way of connection, but it is not drawn between these points in the second one. Since the answer might be large, output it modulo 109 + 7.</p><p><code>Input</code><br>The first line contains one number n (3 ≤ n ≤ 500) — the number of marked points.</p><p>Then n lines follow, each containing n elements. ai, j (j-th element of line i) is equal to 1 iff you can connect points i and j directly (otherwise ai, j = 0). It is guaranteed that for any pair of points ai, j = aj, i, and for any point ai, i = 0.</p><p><code>Output</code><br>Print the number of ways to connect points modulo 109 + 7.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">1</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">12</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code>:<br>题解：<br>区间dpdp<br>f[i][j]f[i][j]表示ii到jj有边且构成树的方案数<br>g[i][j]g[i][j]表示ii到jj无边且构成树的方案数<br>转移：枚举i,ji,j左右端点，kk是断点<br>f[i][j]+=∑j−1k=i(f[i][k]+g[i][k])∗(f[k+1][j]+g[k+1][j])f[i][j]+=∑k=ij−1(f[i][k]+g[i][k])∗(f[k+1][j]+g[k+1][j])<br>g[i][j]+=∑j−1k=i+1f[k][j]∗(f[i][k]+g[i][k])g[i][j]+=∑k=i+1j−1f[k][j]∗(f[i][k]+g[i][k])<br>初始化只要f[i][j]=1f[i][j]=1就可以了</p><p>code:<br></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#define ll long long</span><br><span class="line">using namespace std;</span><br><span class="line">const int <span class="symbol">N</span>=<span class="number">1005</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">int n;</span><br><span class="line">ll a[<span class="symbol">N</span>][<span class="symbol">N</span>],f[<span class="symbol">N</span>][<span class="symbol">N</span>],g[<span class="symbol">N</span>][<span class="symbol">N</span>];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    for(int i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        for(int j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            scanf(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">    for(int i=<span class="number">1</span>;i&lt;=n;i++)f[i][i]=<span class="number">1</span>;</span><br><span class="line">    for(int len=<span class="number">2</span>;len&lt;=n;len++)</span><br><span class="line">        for(int i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int j=i+len<span class="number">-1</span>;</span><br><span class="line">            for(int k=i;k&lt;j;k++)</span><br><span class="line">                if(a[i][j])</span><br><span class="line">                    f[i][j]=(f[i][j]+(f[i][k]+g[i][k])*(f[k+<span class="number">1</span>][j]+g[k+<span class="number">1</span>][j])<span class="comment">%mod)%mod;</span></span><br><span class="line">            for(int k=i+<span class="number">1</span>;k&lt;j;k++)</span><br><span class="line">                if(a[k][j])</span><br><span class="line">                    g[i][j]=(g[i][j]+f[k][j]*(f[i][k]+g[i][k])<span class="comment">%mod)%mod;</span></span><br><span class="line">        &#125;</span><br><span class="line">    printf(<span class="string">"%lld\n"</span>,(f[<span class="number">1</span>][n]+g[<span class="number">1</span>][n])<span class="comment">%mod);</span></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Local-Extrema"><a href="#Local-Extrema" class="headerlink" title="Local Extrema"></a>Local Extrema</h2><p>You are given an array a. Some element of this array ai is a local minimum iff it is strictly less than both of its neighbours (that is, ai &lt; ai - 1 and ai &lt; ai + 1). Also the element can be called local maximum iff it is strictly greater than its neighbours (that is, ai &gt; ai - 1 and ai &gt; ai + 1). Since a1 and an have only one neighbour each, they are neither local minima nor local maxima.</p><p>An element is called a local extremum iff it is either local maximum or local minimum. Your task is to calculate the number of local extrema in the given array.</p><p><code>Input</code><br>The first line contains one integer n (1 ≤ n ≤ 1000) — the number of elements in array a.</p><p>The second line contains n integers a1, a2, …, an (1 ≤ ai ≤ 1000) — the elements of array a.</p><p><code>Output</code><br>Print the number of local extrema in the given array.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code>:<br>签到题，按照题意写就行了<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i ++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; t - <span class="number">1</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((a[i] &lt; a[i - <span class="number">1</span>]) &amp;&amp; (a[i] &lt; a[i + <span class="number">1</span>])) || ((a[i] &gt; a[i - <span class="number">1</span>]) &amp;&amp; (a[i] &gt; a[i + <span class="number">1</span>])))</span><br><span class="line">&#123;</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Xor-MST"><a href="#Xor-MST" class="headerlink" title="Xor-MST"></a>Xor-MST</h2><p>You are given a complete undirected graph with n vertices. A number ai is assigned to each vertex, and the weight of an edge between vertices i and j is equal to ai xor aj.</p><p>Calculate the weight of the minimum spanning tree in this graph.</p><p><code>Input</code><br>The first line contains n (1 ≤ n ≤ 200000) — the number of vertices in the graph.</p><p>The second line contains n integers a1, a2, …, an (0 ≤ ai &lt; 230) — the numbers assigned to the vertices.</p><p><code>Output</code><br>Print one number — the weight of the minimum spanning tree in the graph.</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">8</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p><code>题意</code>:<br>不妨从高到低贪心，我们把最高位按01分开两半分治，跨越两半的就在trie上贪心，这样做是O(nlog2n)O(n\log^2n)O(nlog 2n)的<br>dalao’s code:<br></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,st,ed) for (int i=st;i&lt;=ed;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drp(i,st,ed) for (int i=st;i&gt;=ed;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> copy(x,t) memcpy(x,t,sizeof(x))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL INF=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rec[N*<span class="number">35</span>][<span class="number">2</span>],<span class="built_in">size</span>[N*<span class="number">35</span>],tot;</span><br><span class="line"><span class="keyword">int</span> a[N],s[N];</span><br><span class="line"></span><br><span class="line">std:: vector &lt;<span class="keyword">int</span>&gt; v1,v2;</span><br><span class="line"></span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">read</span>() &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,v=<span class="number">1</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="built_in">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;v=(ch==<span class="string">'-'</span>)?(<span class="number">-1</span>):(v),ch=getchar());</span><br><span class="line"><span class="built_in">for</span> (;ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>,ch=getchar());</span><br><span class="line"><span class="built_in">return</span> x*v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ins(<span class="keyword">int</span> v) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line">drp(i,<span class="number">29</span>,<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">size</span>[x]++;</span><br><span class="line"><span class="keyword">int</span> tar=(v&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">if</span> (!rec[x][tar]) &#123;</span><br><span class="line">rec[x][tar]=++tot;</span><br><span class="line">rec[tot][<span class="number">0</span>]=rec[tot][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">size</span>[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">x=rec[x][tar];</span><br><span class="line">&#125; <span class="built_in">size</span>[x]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LL ask(<span class="keyword">int</span> v) &#123;</span><br><span class="line">LL res=<span class="number">0</span>; <span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line">drp(i,<span class="number">29</span>,<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> tar=(v&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">if</span> (<span class="built_in">size</span>[rec[x][tar]]) &#123;</span><br><span class="line">x=rec[x][tar];</span><br><span class="line">&#125; <span class="built_in">else</span> &#123;</span><br><span class="line">x=rec[x][!tar];</span><br><span class="line">res+=(<span class="number">1</span>LL&lt;&lt;i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> solve(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p) &#123;</span><br><span class="line"><span class="built_in">if</span> (l&gt;=r||p&lt;<span class="number">0</span>) <span class="built_in">return</span> ;</span><br><span class="line">rep(i,l,r) <span class="built_in">if</span> ((a[s[i]]&gt;&gt;p)&amp;<span class="number">1</span>) &#123;</span><br><span class="line">v1.push_back(s[i]);</span><br><span class="line">&#125; <span class="built_in">else</span> v2.push_back(s[i]);</span><br><span class="line"><span class="built_in">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v1.<span class="built_in">size</span>();++i) s[l+i]=v1[i];</span><br><span class="line"><span class="keyword">int</span> mid=v1.<span class="built_in">size</span>()+l;</span><br><span class="line"><span class="built_in">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v2.<span class="built_in">size</span>();++i) s[mid+i]=v2[i];</span><br><span class="line">tot=<span class="number">1</span>; rec[<span class="number">1</span>][<span class="number">0</span>]=rec[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">rep(i,l,mid<span class="number">-1</span>) ins(a[s[i]]);</span><br><span class="line">LL mn=INF;</span><br><span class="line">rep(i,mid,r) mn=std:: <span class="built_in">min</span>(mn,ask(a[s[i]]));</span><br><span class="line"><span class="built_in">if</span> (v1.<span class="built_in">size</span>()&amp;&amp;v2.<span class="built_in">size</span>()) ans+=mn;</span><br><span class="line">v1.<span class="built_in">clear</span>(); v2.<span class="built_in">clear</span>();</span><br><span class="line">solve(l,mid<span class="number">-1</span>,p<span class="number">-1</span>); solve(mid,r,p<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line"><span class="keyword">int</span> n=<span class="built_in">read</span>(),mx=<span class="number">0</span>;</span><br><span class="line">rep(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">a[i]=<span class="built_in">read</span>();</span><br><span class="line">mx=std:: <span class="built_in">max</span>(mx,(<span class="keyword">int</span>)log2(a[i]));</span><br><span class="line">s[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">solve(<span class="number">1</span>,n,mx);</span><br><span class="line">printf(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line"><span class="built_in">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Buggy-Robot"><a href="#Buggy-Robot" class="headerlink" title="Buggy Robot"></a>Buggy Robot</h2><p>Ivan has a robot which is situated on an infinite grid. Initially the robot is standing in the starting cell (0, 0). The robot can process commands. There are four types of commands it can perform:</p><p>U — move from the cell (x, y) to (x, y + 1);<br>D — move from (x, y) to (x, y - 1);<br>L — move from (x, y) to (x - 1, y);<br>R — move from (x, y) to (x + 1, y).<br>Ivan entered a sequence of n commands, and the robot processed it. After this sequence the robot ended up in the starting cell (0, 0), but Ivan doubts that the sequence is such that after performing it correctly the robot ends up in the same cell. He thinks that some commands were ignored by robot. To acknowledge whether the robot is severely bugged, he needs to calculate the maximum possible number of commands that were performed correctly. Help Ivan to do the calculations!</p><p><code>Input</code><br>The first line contains one number n — the length of sequence of commands entered by Ivan (1 ≤ n ≤ 100).</p><p>The second line contains the sequence itself — a string consisting of n characters. Each character can be U, D, L or R.</p><p><code>Output</code><br>Print the maximum possible number of commands from the sequence the robot could perform to end up in the starting cell.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line"><span class="number">4</span></span><br><span class="line">LDUR</span><br><span class="line">Output</span><br><span class="line"><span class="number">4</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">5</span></span><br><span class="line">RRRUU</span><br><span class="line">Output</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">6</span></span><br><span class="line">LLRRRR</span><br><span class="line">Output</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>最大能够执行的命令数量</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> t, maxnum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>, ans3 = <span class="number">0</span>, ans4 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">'L'</span>) ans1 ++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'R'</span>) ans2 ++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'U'</span>) ans3 ++;</span><br><span class="line"><span class="keyword">else</span> ans4 ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> min1 = min(ans1, ans2);</span><br><span class="line"><span class="keyword">int</span> min2 = min(ans3, ans4);</span><br><span class="line">ans = (min1 + min2) * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(min1 != <span class="number">0</span> || min2 != <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="K-Dominant-Character"><a href="#K-Dominant-Character" class="headerlink" title="K-Dominant Character"></a>K-Dominant Character</h2><p>You are given a string s consisting of lowercase Latin letters. Character c is called k-dominant iff each substring of s with length at least k contains this character c.</p><p>You have to find minimum k such that there exists at least one k-dominant character.</p><p><code>Input</code><br>The first line contains string s consisting of lowercase Latin letters (1 ≤ |s| ≤ 100000).</p><p><code>Output</code><br>Print one number — the minimum value of k such that there exists at least one k-dominant character.<br></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line"><span class="meta">Input</span></span><br><span class="line">abacaba</span><br><span class="line"><span class="meta">Output</span></span><br><span class="line">2</span><br><span class="line"><span class="meta">Input</span></span><br><span class="line">zzzzz</span><br><span class="line"><span class="meta">Output</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">Input</span></span><br><span class="line">abcde</span><br><span class="line"><span class="meta">Output</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>给你一个长度为n字符串，求最小的长度m，使得字符串中所有长度为m的子字符串中均包含某一种字符。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>],n;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;i++)&#123;</span><br><span class="line">a[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++) <span class="keyword">if</span>(!a[i]) vis[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;n;i++)&#123;</span><br><span class="line">a[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">a[s[i-x]-<span class="string">'a'</span>]--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++) <span class="keyword">if</span>(!a[j]) vis[j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i])&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">n=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">mp[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(m)) r=m<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=m+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,r+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Maximum-Subsequence"><a href="#Maximum-Subsequence" class="headerlink" title="Maximum Subsequence"></a>Maximum Subsequence</h2><p>You are given an array a consisting of n integers, and additionally an integer m. You have to choose some sequence of indices b1, b2, …, bk (1 ≤ b1 &lt; b2 &lt; … &lt; bk ≤ n) in such a way that the value of is maximized. Chosen sequence can be empty.</p><p>Print the maximum possible value of .</p><p><code>Input</code><br>The first line contains two integers n and m (1 ≤ n ≤ 35, 1 ≤ m ≤ 109).</p><p>The second line contains n integers a1, a2, …, an (1 ≤ ai ≤ 109).</p><p><code>Output</code><br>Print the maximum possible value of .<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">3</span> <span class="number">20</span></span><br><span class="line"><span class="number">199</span> <span class="number">41</span> <span class="number">299</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">19</span></span><br><span class="line">Note</span><br><span class="line">In the first example you can choose a sequence b = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, so the sum  is equal to <span class="number">7</span> (and that's <span class="number">3</span> after taking it modulo <span class="number">4</span>).</span><br><span class="line"></span><br><span class="line">In the second example you can choose a sequence b = &#123;<span class="number">3</span>&#125;.</span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>给你一个大小为n的数组和一个数m，求从数组中挑出任意多个数（可以为零，不可以重复），计算出<br><img src="https://i.loli.net/2019/09/24/4HIPl9zdQGTV7ES.png" alt="20190924202510.png"><br>的最大值，其中k为选出的数的个数。</p><p>超大背包，将所有物品平均分成两部分，然后枚举所有状态。再枚举某一堆物品的所有值，二分从另一堆查找最优解即可。<br></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="comment">#define ll long long</span></span><br><span class="line"><span class="comment">#define pii pair&lt;int,int&gt;</span></span><br><span class="line">const <span class="keyword">int</span> maxn=<span class="number">3000000</span>+<span class="number">10</span>;</span><br><span class="line">const <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll a[maxn];</span><br><span class="line">ll <span class="string">q[maxn]</span>,p[maxn];</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">ll n,<span class="keyword">m</span>;</span><br><span class="line">scanf(<span class="string">"%lld %lld"</span>,&amp;n,&amp;<span class="keyword">m</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">scanf(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">a[i]%=<span class="keyword">m</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll <span class="keyword">x</span>=n/<span class="number">2</span>;</span><br><span class="line">ll N=<span class="number">1</span>&lt;&lt;<span class="keyword">x</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="keyword">x</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>) sum=(sum+a[j])%m;</span><br><span class="line">&#125;</span><br><span class="line">p[i]=sum;</span><br><span class="line">&#125;</span><br><span class="line">N=<span class="number">1</span>&lt;&lt;(n-<span class="keyword">x</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n-<span class="keyword">x</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>) sum=(sum+a[j+<span class="keyword">x</span>])%m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">q[i]</span>=sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">sort</span>(<span class="keyword">q</span>,<span class="keyword">q</span>+N);</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;<span class="keyword">x</span>;i++)&#123;</span><br><span class="line">ll <span class="keyword">pos</span>=lower_bound(<span class="keyword">q</span>,<span class="keyword">q</span>+N,<span class="keyword">m</span>-<span class="number">1</span>-p[i])-<span class="keyword">q</span>;</span><br><span class="line">res=max(res,(p[i]+<span class="string">q[pos]</span>)%m);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">pos</span>) res=max(res,(p[i]+<span class="string">q[pos-1]</span>)%m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Alomost-Identity-Permutations"><a href="#Alomost-Identity-Permutations" class="headerlink" title="Alomost Identity Permutations"></a>Alomost Identity Permutations</h2><p>A permutation p of size n is an array such that every integer from 1 to n occurs exactly once in this array.</p><p>Let’s call a permutation an almost identity permutation iff there exist at least n - k indices i (1 ≤ i ≤ n) such that pi = i.</p><p>Your task is to count the number of almost identity permutations for given numbers n and k.</p><p><code>Input</code><br>The first line contains two integers n and k (4 ≤ n ≤ 1000, 1 ≤ k ≤ 4).</p><p><code>Output</code><br>Print the number of almost identity permutations for given n and k.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">input</span><br><span class="line"><span class="number">4</span> <span class="number">1</span></span><br><span class="line">output</span><br><span class="line"><span class="number">1</span></span><br><span class="line">input</span><br><span class="line"><span class="number">4</span> <span class="number">2</span></span><br><span class="line">output</span><br><span class="line"><span class="number">7</span></span><br><span class="line">input</span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line">output</span><br><span class="line"><span class="number">31</span></span><br><span class="line">input</span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line">output</span><br><span class="line"><span class="number">76</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>问n个数的全排列中，有多少排列满足∑pi=i的值大于等于n−k。<br>k≤4，枚举即可。</p><p>对于k=1 , res=1;<br>对于k=2 , res=C2n<br>对于k=3 , res=C3n∗2<br>对于k=4 , res=C4n∗9<br>上面每一行的意义在于：从n个数中挑出k个数，每种选法又分别多少种方案使得∑ki=1pi=1 的值为0。<br>code:<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="comment">#define ll long long</span></span><br><span class="line"><span class="comment">#define pii pair&lt;int,int&gt;</span></span><br><span class="line">const int <span class="attribute">maxn</span>=3000000+10;</span><br><span class="line">const int <span class="attribute">INF</span>=0x3f3f3f3f;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">ll n,k;</span><br><span class="line">scanf(<span class="string">"%lld %lld"</span>,&amp;n,&amp;k);</span><br><span class="line">ll <span class="attribute">cur</span>=n;</span><br><span class="line">ll <span class="attribute">res</span>=1;</span><br><span class="line">ll <span class="attribute">fac</span>=1;</span><br><span class="line"><span class="keyword">for</span>(ll <span class="attribute">i</span>=2;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="attribute">fac</span>=fac*i;</span><br><span class="line"><span class="attribute">cur</span>=cur*(n-i+1)/i;</span><br><span class="line"><span class="keyword">if</span>(<span class="attribute">i</span>==2) res+=cur;</span><br><span class="line"><span class="keyword">if</span>(<span class="attribute">i</span>==3) res+=cur<span class="number">*2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="attribute">i</span>==4) res+=cur<span class="number">*9</span>;</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"%lld\n"</span>,res);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Alyona-and-Spreadsheet"><a href="#Alyona-and-Spreadsheet" class="headerlink" title="Alyona and Spreadsheet"></a>Alyona and Spreadsheet</h2><p>During the lesson small girl Alyona works with one famous spreadsheet computer program and learns how to edit tables.</p><p>Now she has a table filled with integers. The table consists of n rows and m columns. By ai, j we will denote the integer located at the i-th row and the j-th column. We say that the table is sorted in non-decreasing order in the column j if ai, j ≤ ai + 1, j for all i from 1 to n - 1.</p><p>Teacher gave Alyona k tasks. For each of the tasks two integers l and r are given and Alyona has to answer the following question: if one keeps the rows from l to r inclusive and deletes all others, will the table be sorted in non-decreasing order in at least one column? Formally, does there exist such j that ai, j ≤ ai + 1, j for all i from l to r - 1 inclusive.</p><p>Alyona is too small to deal with this task and asks you to help!</p><p><code>Input</code><br>The first line of the input contains two positive integers n and m (1 ≤ n·m ≤ 100 000) — the number of rows and the number of columns in the table respectively. Note that your are given a constraint that bound the product of these two integers, i.e. the number of elements in the table.</p><p>Each of the following n lines contains m integers. The j-th integers in the i of these lines stands for ai, j (1 ≤ ai, j ≤ 109).</p><p>The next line of the input contains an integer k (1 ≤ k ≤ 100 000) — the number of task that teacher gave to Alyona.</p><p>The i-th of the next k lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n).</p><p><code>Output</code><br>Print “Yes” to the i-th line of the output if the table consisting of rows from li to ri inclusive is sorted in non-decreasing order in at least one column. Otherwise, print “No”.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">input</span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line">output</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">Note</span><br><span class="line">In the sample, the whole table <span class="keyword">is</span> <span class="keyword">not</span> sorted <span class="keyword">in</span> any column. However, rows <span class="number">1</span>–<span class="number">3</span> are sorted <span class="keyword">in</span> column <span class="number">1</span>, <span class="keyword">while</span> rows <span class="number">4</span>–<span class="number">5</span> are sorted <span class="keyword">in</span> column <span class="number">3.</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>从n∗m的矩阵中挑出从第l行到第r行，问在这(r−l+1)∗m的矩阵中是否存在某一列，使得这一列的元素按序号从小到大非递减。</p><p>前缀和即可。计算每一行某个元素前面的所有的元素能够非递增的最小的起点，由于n，m的值未定，所以必须用一维数组来保存。</p><p>在查找<code>[l,r]</code>行时，只需要看第r行的m个元素是否存在某个元素，他所在的非递减序列的起点小于等于l即可，由于不能用for循环查询，所以需要前缀和。<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll a[maxn];</span><br><span class="line">ll b[maxn];</span><br><span class="line">ll res[maxn];</span><br><span class="line">ll dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll n,m,q,l,r;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n*m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">res[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">ll pos=<span class="number">1</span>;</span><br><span class="line">res[j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[m*(i<span class="number">-1</span>)+j]&gt;=a[(i<span class="number">-2</span>)*m+j]) res[(i<span class="number">-1</span>)*m+j]=pos;<span class="comment">//非递减</span></span><br><span class="line"><span class="keyword">else</span>&#123;<span class="comment">//递减的话就是一个新的起点</span></span><br><span class="line">res[m*(i<span class="number">-1</span>)+j]=i;</span><br><span class="line">pos=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">1</span>) res[m*(i<span class="number">-1</span>)+j]=min(res[m*(i<span class="number">-1</span>)+j],res[m*(i<span class="number">-1</span>)+j<span class="number">-1</span>]);\\计算前缀最小值</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;l,&amp;r);</span><br><span class="line"><span class="keyword">if</span>(res[r*m]&lt;=l) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Shell-Game"><a href="#Shell-Game" class="headerlink" title="Shell Game"></a>Shell Game</h2><p>Bomboslav likes to look out of the window in his room and watch lads outside playing famous shell game. The game is played by two persons: operator and player. Operator takes three similar opaque shells and places a ball beneath one of them. Then he shuffles the shells by swapping some pairs and the player has to guess the current position of the ball.</p><p>Bomboslav noticed that guys are not very inventive, so the operator always swaps the left shell with the middle one during odd moves (first, third, fifth, etc.) and always swaps the middle shell with the right one during even moves (second, fourth, etc.).</p><p>Let’s number shells from 0 to 2 from left to right. Thus the left shell is assigned number 0, the middle shell is 1 and the right shell is 2. Bomboslav has missed the moment when the ball was placed beneath the shell, but he knows that exactly n movements were made by the operator and the ball was under shell x at the end. Now he wonders, what was the initial position of the ball?</p><p><code>Input</code><br>The first line of the input contains an integer n (1 ≤ n ≤ 2·109) — the number of movements made by the operator.</p><p>The second line contains a single integer x (0 ≤ x ≤ 2) — the index of the shell where the ball was found after n movements.</p><p><code>Output</code><br>Print one integer from 0 to 2 — the index of the shell where the ball was initially placed.<br></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">output</span><br><span class="line"><span class="number">1</span></span><br><span class="line">input</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">output</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Note</span><br><span class="line">In <span class="keyword">the</span> <span class="keyword">first</span> sample, <span class="keyword">the</span> ball was initially placed beneath <span class="keyword">the</span> <span class="keyword">middle</span> <span class="built_in">shell</span> <span class="keyword">and</span> <span class="keyword">the</span> operator completed <span class="literal">four</span> movements.</span><br><span class="line"></span><br><span class="line">During <span class="keyword">the</span> <span class="keyword">first</span> move operator swapped <span class="keyword">the</span> left <span class="built_in">shell</span> <span class="keyword">and</span> <span class="keyword">the</span> <span class="keyword">middle</span> <span class="built_in">shell</span>. The ball is now under <span class="keyword">the</span> left <span class="built_in">shell</span>.</span><br><span class="line">During <span class="keyword">the</span> <span class="keyword">second</span> move operator swapped <span class="keyword">the</span> <span class="keyword">middle</span> <span class="built_in">shell</span> <span class="keyword">and</span> <span class="keyword">the</span> <span class="literal">right</span> <span class="literal">one</span>. The ball is still under <span class="keyword">the</span> left <span class="built_in">shell</span>.</span><br><span class="line">During <span class="keyword">the</span> <span class="keyword">third</span> move operator swapped <span class="keyword">the</span> left <span class="built_in">shell</span> <span class="keyword">and</span> <span class="keyword">the</span> <span class="keyword">middle</span> <span class="built_in">shell</span> again. The ball is again <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">middle</span>.</span><br><span class="line">Finally, <span class="keyword">the</span> operators swapped <span class="keyword">the</span> <span class="keyword">middle</span> <span class="built_in">shell</span> <span class="keyword">and</span> <span class="keyword">the</span> <span class="literal">right</span> <span class="built_in">shell</span>. The ball is now beneath <span class="keyword">the</span> <span class="literal">right</span> <span class="built_in">shell</span>.</span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>三个杯子，初始某个杯子中有一个小球，经过n次下列操作后，小球在第x号杯子（0，1，2号）：</p><p>此次操作次数的序号为第奇数次，交换0号和1号杯子。<br>此次操作次数的序号为第偶数次，交换1号和2号杯子。<br>问初始小球在那个杯子。</p><p>模拟后发现，每6次操作一个循环，因此n mod 6后模拟计算即可。</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">n%=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">0</span>;a[<span class="number">1</span>]=<span class="number">1</span>;a[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>) swap(a[<span class="number">0</span>],a[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> swap(a[<span class="number">1</span>],a[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[m]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Hanoi-Factory"><a href="#Hanoi-Factory" class="headerlink" title="Hanoi Factory"></a>Hanoi Factory</h2><p>Of course you have heard the famous task about Hanoi Towers, but did you know that there is a special factory producing the rings for this wonderful game? Once upon a time, the ruler of the ancient Egypt ordered the workers of Hanoi Factory to create as high tower as possible. They were not ready to serve such a strange order so they had to create this new tower using already produced rings.</p><p>There are n rings in factory’s stock. The i-th ring has inner radius ai, outer radius bi and height hi. The goal is to select some subset of rings and arrange them such that the following conditions are satisfied:</p><p>Outer radiuses form a non-increasing sequence, i.e. one can put the j-th ring on the i-th ring only if bj ≤ bi.<br>Rings should not fall one into the the other. That means one can place ring j on the ring i only if bj &gt; ai.<br>The total height of all rings used should be maximum possible.<br><code>Input</code><br>The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of rings in factory’s stock.</p><p>The i-th of the next n lines contains three integers ai, bi and hi (1 ≤ ai, bi, hi ≤ 109, bi &gt; ai) — inner radius, outer radius and the height of the i-th ring respectively.</p><p><code>Output</code><br>Print one integer — the maximum height of the tower that can be obtained.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line">output</span><br><span class="line"><span class="number">6</span></span><br><span class="line">input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">7</span> <span class="number">1</span></span><br><span class="line">output</span><br><span class="line"><span class="number">4</span></span><br><span class="line">Note</span><br><span class="line">In the first sample, the optimal solution <span class="keyword">is</span> to take all the rings <span class="keyword">and</span> put them on each other <span class="keyword">in</span> order <span class="number">3</span>, <span class="number">2</span>, <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">In the second sample, one can put the ring <span class="number">3</span> on the ring <span class="number">4</span> <span class="keyword">and</span> <span class="keyword">get</span> the tower of height <span class="number">3</span>, <span class="keyword">or</span> put the ring <span class="number">1</span> on the ring <span class="number">2</span> <span class="keyword">and</span> <span class="keyword">get</span> the tower of height <span class="number">4.</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>给你n个圆环，每个圆环有一个外径和内径，现在将这些圆环堆起来，满足上面的圆环外径bi≤bj且bi&gt;aj 其中aj,bj分别为下面一个圆环的内径和外径。问最高能将这些圆环堆多高。</p><p>一个简单的模拟题。。。（我居然写了一下午的区间更新查询线段树）</p><p>按照圆环外径从大到小排序，如果外径相同按照内径从大到小排序，然后按照顺序模拟即可，如果当前这个圆环放不到前面这个圆环，就继续往前面找，直到找到为止（这里可以用一个数组保存每个圆环找到的位置。<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll l,r,h;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span>&lt;(node i,node j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i.r==j.r) <span class="keyword">return</span> i.l&gt;j.l;</span><br><span class="line">        <span class="keyword">return</span> i.r&gt;j.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[maxn];</span><br><span class="line">ll res[maxn];</span><br><span class="line">ll pre[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;a[i].l,&amp;a[i].r,&amp;a[i].h);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    res[<span class="number">1</span>]=a[<span class="number">1</span>].h;</span><br><span class="line">    <span class="keyword">int</span> cur=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!(a[cur].l&lt;a[i].r &amp;&amp; a[i].r&lt;=a[cur].r) &amp;&amp; cur) cur=pre[cur];</span><br><span class="line">        res[i]=res[cur]+a[i].h;</span><br><span class="line">        pre[i]=cur;</span><br><span class="line">        cur=i;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans=max(ans,res[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Cloud-of-Hashtags"><a href="#Cloud-of-Hashtags" class="headerlink" title="Cloud of Hashtags"></a>Cloud of Hashtags</h2><p>Vasya is an administrator of a public page of organization “Mouse and keyboard” and his everyday duty is to publish news from the world of competitive programming. For each news he also creates a list of hashtags to make searching for a particular topic more comfortable. For the purpose of this problem we define hashtag as a string consisting of lowercase English letters and exactly one symbol ‘#’ located at the beginning of the string. The length of the hashtag is defined as the number of symbols in it without the symbol ‘#’.</p><p>The head administrator of the page told Vasya that hashtags should go in lexicographical order (take a look at the notes section for the definition).</p><p>Vasya is lazy so he doesn’t want to actually change the order of hashtags in already published news. Instead, he decided to delete some suffixes (consecutive characters at the end of the string) of some of the hashtags. He is allowed to delete any number of characters, even the whole string except for the symbol ‘#’. Vasya wants to pick such a way to delete suffixes that the total number of deleted symbols is minimum possible. If there are several optimal solutions, he is fine with any of them.</p><p><code>Input</code><br>The first line of the input contains a single integer n (1 ≤ n ≤ 500 000) — the number of hashtags being edited now.</p><p>Each of the next n lines contains exactly one hashtag of positive length.</p><p>It is guaranteed that the total length of all hashtags (i.e. the total length of the string except for characters ‘#’) won’t exceed 500 000.</p><p><code>Output</code><br>Print the resulting hashtags in any of the optimal solutions.<br></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment">#book</span></span><br><span class="line"><span class="comment">#bigtown</span></span><br><span class="line"><span class="comment">#big</span></span><br><span class="line">output</span><br><span class="line"><span class="comment">#b</span></span><br><span class="line"><span class="comment">#big</span></span><br><span class="line"><span class="comment">#big</span></span><br><span class="line">input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment">#book</span></span><br><span class="line"><span class="comment">#cool</span></span><br><span class="line"><span class="comment">#cold</span></span><br><span class="line">output</span><br><span class="line"><span class="comment">#book</span></span><br><span class="line"><span class="comment">#co</span></span><br><span class="line"><span class="comment">#cold</span></span><br><span class="line">input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="comment">#car</span></span><br><span class="line"><span class="comment">#cart</span></span><br><span class="line"><span class="comment">#art</span></span><br><span class="line"><span class="comment">#at</span></span><br><span class="line">output</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#art</span></span><br><span class="line"><span class="comment">#at</span></span><br><span class="line">input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="comment">#apple</span></span><br><span class="line"><span class="comment">#apple</span></span><br><span class="line"><span class="comment">#fruit</span></span><br><span class="line">output</span><br><span class="line"><span class="comment">#apple</span></span><br><span class="line"><span class="comment">#apple</span></span><br><span class="line"><span class="comment">#fruit</span></span><br><span class="line">Note</span><br><span class="line">Word a1, a2, ..., am <span class="keyword">of</span> <span class="built_in">length</span> m <span class="keyword">is</span> lexicographically <span class="keyword">not</span> <span class="keyword">greater than</span> <span class="built_in">word</span> b1, b2, ..., bk <span class="keyword">of</span> <span class="built_in">length</span> k, <span class="keyword">if</span> one <span class="keyword">of</span> two conditions hold:</span><br><span class="line"></span><br><span class="line"><span class="keyword">at</span> <span class="keyword">first</span> position i, such <span class="keyword">that</span> ai ≠ bi, <span class="keyword">the</span> <span class="built_in">character</span> ai goes earlier <span class="keyword">in</span> <span class="keyword">the</span> alphabet than <span class="built_in">character</span> bi, i.e. a has smaller <span class="built_in">character</span> than b <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">first</span> position <span class="keyword">where</span> they differ;</span><br><span class="line"><span class="keyword">if</span> there <span class="keyword">is</span> no such position i <span class="keyword">and</span> m ≤ k, i.e. <span class="keyword">the</span> <span class="keyword">first</span> <span class="built_in">word</span> <span class="keyword">is</span> a prefix <span class="keyword">of</span> <span class="keyword">the</span> <span class="keyword">second</span> <span class="keyword">or</span> two <span class="built_in">words</span> are <span class="keyword">equal</span>.</span><br><span class="line">The sequence <span class="keyword">of</span> <span class="built_in">words</span> <span class="keyword">is</span> said <span class="keyword">to</span> be sorted <span class="keyword">in</span> lexicographical order <span class="keyword">if</span> each <span class="built_in">word</span> (except <span class="keyword">the</span> <span class="keyword">last</span> one) <span class="keyword">is</span> lexicographically <span class="keyword">not</span> <span class="keyword">greater than</span> <span class="keyword">the</span> next <span class="built_in">word</span>.</span><br><span class="line"></span><br><span class="line">For <span class="keyword">the</span> <span class="built_in">words</span> consisting <span class="keyword">of</span> lowercase English letters <span class="keyword">the</span> lexicographical order coincides <span class="keyword">with</span> <span class="keyword">the</span> alphabet <span class="built_in">word</span> order <span class="keyword">in</span> <span class="keyword">the</span> dictionary.</span><br><span class="line"></span><br><span class="line">According <span class="keyword">to</span> <span class="keyword">the</span> <span class="keyword">above</span> definition, <span class="keyword">if</span> a hashtag consisting <span class="keyword">of</span> one <span class="built_in">character</span> '<span class="comment">#' it is lexicographically not greater than any other valid hashtag. That's why in the third sample we can't keep first two hashtags unchanged and shorten the other two.</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>有n个新闻标题，你要删除最少的字符，使得最后所有的标题按照输入顺序字典序升序排列。并输出删除后的新闻标题。</p><p>首先知道如果两个标题的字典序比较为降序，那么一定是要删除前面的那个标题，使得那个标题字典序变小。所以我们从后往前删除，能够保证每个标题删除的字符数量最少。</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="built_in">string</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> len[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">len[i]=a[i].length();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=min(len[i],len[i+<span class="number">1</span>]);j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i][j]&lt;a[i+<span class="number">1</span>][j]) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[i][j]&gt;a[i+<span class="number">1</span>][j])&#123;</span><br><span class="line">    a[i][j]=<span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;a[i][j]!=<span class="string">'\0'</span>;j++)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Game-of-Credit-Cards"><a href="#Game-of-Credit-Cards" class="headerlink" title="Game of Credit Cards"></a>Game of Credit Cards</h2><p>After the fourth season Sherlock and Moriary have realized the whole foolishness of the battle between them and decided to continue their competitions in peaceful game of Credit Cards.</p><p>Rules of this game are simple: each player bring his favourite n-digit credit card. Then both players name the digits written on their cards one by one. If two digits are not equal, then the player, whose digit is smaller gets a flick (knock in the forehead usually made with a forefinger) from the other player. For example, if n = 3, Sherlock’s card is 123 and Moriarty’s card has number 321, first Sherlock names 1 and Moriarty names 3 so Sherlock gets a flick. Then they both digit 2 so no one gets a flick. Finally, Sherlock names 3, while Moriarty names 1 and gets a flick.</p><p>Of course, Sherlock will play honestly naming digits one by one in the order they are given, while Moriary, as a true villain, plans to cheat. He is going to name his digits in some other order (however, he is not going to change the overall number of occurences of each digit). For example, in case above Moriarty could name 1, 2, 3 and get no flicks at all, or he can name 2, 3 and 1 to give Sherlock two flicks.</p><p>Your goal is to find out the minimum possible number of flicks Moriarty will get (no one likes flicks) and the maximum possible number of flicks Sherlock can get from Moriarty. Note, that these two goals are different and the optimal result may be obtained by using different strategies.</p><p><code>Input</code><br>The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of digits in the cards Sherlock and Moriarty are going to use.</p><p>The second line contains n digits — Sherlock’s credit card number.</p><p>The third line contains n digits — Moriarty’s credit card number.</p><p><code>Output</code><br>First print the minimum possible number of flicks Moriarty will get. Then print the maximum possible number of flicks that Sherlock can get from Moriarty.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">321</span></span><br><span class="line">output</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">88</span></span><br><span class="line"><span class="number">00</span></span><br><span class="line">output</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">Note</span><br><span class="line">First sample <span class="keyword">is</span> elaborated <span class="keyword">in</span> the problem statement. In the second sample, there <span class="keyword">is</span> no way Moriarty can avoid getting two flicks.</span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>S 某,M某分别有一张序号长度为n的信用卡，他们定了一个规则：比赛分为n局，每局S某，M某从n个数字中分别不重复的取出一个数字，谁的数字小谁得一分，平局不算分。<br>问如果随机排列这些数字，S某可能的最高得分和M某可能的最低得分分别为多少。</p><p>模拟题，算最高分时只要从小到大让S某牌去压M某小于自己当前牌大小的牌即可。算最低分时，只要从大到小让M某去压S某大于等于自己当前牌大小的牌即可。</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>],b[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s"</span>,s,t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">a[s[i]-<span class="string">'0'</span>]++;</span><br><span class="line">b[t[i]-<span class="string">'0'</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res1=<span class="number">0</span>,res2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">sum+=a[i];</span><br><span class="line">res1+=min(b[i],sum);</span><br><span class="line">sum-=min(b[i],sum);</span><br><span class="line">&#125;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">res2+=min(a[i],sum);</span><br><span class="line">sum-=min(a[i],sum);</span><br><span class="line">sum+=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>,n-res1,res2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday6&quot;&gt;&lt;a href=&quot;#Rday6&quot; class=&quot;headerlink&quot; title=&quot;Rday6&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday6&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;小比赛&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>Rday5</title>
    <link href="http://yoursite.com/2019/09/21/Rday5/"/>
    <id>http://yoursite.com/2019/09/21/Rday5/</id>
    <published>2019-09-20T16:00:00.000Z</published>
    <updated>2020-03-08T13:50:29.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday5"><a href="#Rday5" class="headerlink" title="Rday5"></a><center>Rday5</center></h1><p><center>练习<br><a id="more"></a></center></p><h2 id="2048-Game"><a href="#2048-Game" class="headerlink" title="2048 Game"></a>2048 Game</h2><p>You are playing a variation of game 2048. Initially you have a multiset s of n integers. Every integer in this multiset is a power of two.</p><p>You may perform any number (possibly, zero) operations with this multiset.</p><p>During each operation you choose two equal integers from s, remove them from s and insert the number equal to their sum into s.</p><p>For example, if s={1,2,1,1,4,2,2} and you choose integers 2 and 2, then the multiset becomes {1,1,1,4,4,2}.</p><p>You win if the number 2048 belongs to your multiset. For example, if s={1024,512,512,4} you can win as follows: choose 512 and 512, your multiset turns into {1024,1024,4}. Then choose 1024 and 1024, your multiset turns into {2048,4} and you win.</p><p>You have to determine if you can win this game.</p><p>You have to answer q independent queries.</p><p><code>Input</code><br>The first line contains one integer q (1≤q≤100) – the number of queries.</p><p>The first line of each query contains one integer n (1≤n≤100) — the number of elements in multiset.</p><p>The second line of each query contains n integers s1,s2,…,sn (1≤si≤229) — the description of the multiset. It is guaranteed that all elements of the multiset are powers of two.</p><p><code>Output</code><br>For each query print YES if it is possible to obtain the number 2048 in your multiset, and NO otherwise.</p><p>You may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1024</span> <span class="number">512</span> <span class="number">64</span> <span class="number">512</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2048</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">64</span> <span class="number">512</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4096</span> <span class="number">4</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">2048</span> <span class="number">2</span> <span class="number">2048</span> <span class="number">2048</span> <span class="number">2048</span> <span class="number">2048</span> <span class="number">2048</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2048</span> <span class="number">4096</span></span><br><span class="line">Output</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line"></span><br><span class="line">Note</span><br><span class="line">In the first query you can win as follows: choose <span class="number">512</span> <span class="keyword">and</span> <span class="number">512</span>, <span class="keyword">and</span> s turns <span class="built_in">int</span>o &#123;<span class="number">1024</span>,<span class="number">64</span>,<span class="number">1024</span>&#125;. Then choose <span class="number">1024</span> <span class="keyword">and</span> <span class="number">1024</span>, <span class="keyword">and</span> s turns <span class="built_in">int</span>o &#123;<span class="number">2048</span>,<span class="number">64</span>&#125; <span class="keyword">and</span> you win.</span><br><span class="line"></span><br><span class="line">In the second query s contains <span class="number">2048</span> initially.</span><br></pre></td></tr></table></figure><p></p><p><code>题意</code><br>根据所给的数字集合，判断里面的数字相加是否是2048就可以了<br>可以先排一下序，因为都是2的幂数，所以可以放心的直接相加就行了</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &gt; y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">sort(a, a + n, cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; <span class="number">2048</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum == <span class="number">2048</span> || a[i] == <span class="number">2048</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Perfect-Team"><a href="#Perfect-Team" class="headerlink" title="Perfect Team"></a>Perfect Team</h2><p>You may have already known that a standard ICPC team consists of exactly three members. The perfect team however has more restrictions. A student can have some specialization: coder or mathematician. She/he can have no specialization, but can’t have both at the same time.</p><p>So the team is considered perfect if it includes at least one coder, at least one mathematician and it consists of exactly three members.</p><p>You are a coach at a very large university and you know that c of your students are coders, m are mathematicians and x have no specialization.</p><p>What is the maximum number of full perfect teams you can distribute them into?</p><p>Note that some students can be left without a team and each student can be a part of no more than one team.</p><p>You are also asked to answer q independent queries.</p><p><code>Input</code><br>The first line contains a single integer q (1≤q≤104) — the number of queries.</p><p>Each of the next q lines contains three integers c, m and x (0≤c,m,x≤108) — the number of coders, mathematicians and students without any specialization in the university, respectively.</p><p>Note that the no student is both coder and mathematician at the same time.</p><p><code>Output</code><br>Print q integers — the i-th of them should be the answer to the i query in the order they are given in the input. The answer is the maximum number of full perfect teams you can distribute your students into.<br></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line">6</span><br><span class="line">1<span class="number"> 1 </span>1</span><br><span class="line">3<span class="number"> 6 </span>0</span><br><span class="line">0<span class="number"> 0 </span>0</span><br><span class="line">0<span class="number"> 1 </span>1</span><br><span class="line">10<span class="number"> 1 </span>10</span><br><span class="line">4<span class="number"> 4 </span>1</span><br><span class="line">Output</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">Note</span><br><span class="line">In the first example here are how teams are formed:</span><br><span class="line"></span><br><span class="line">the only team of<span class="number"> 1 </span>coder,<span class="number"> 1 </span>mathematician and<span class="number"> 1 </span>without specialization;</span><br><span class="line">all three teams consist of<span class="number"> 1 </span>coder and<span class="number"> 2 </span>mathematicians;</span><br><span class="line">no teams can be formed;</span><br><span class="line">no teams can be formed;</span><br><span class="line">one team consists of<span class="number"> 1 </span>coder,<span class="number"> 1 </span>mathematician and<span class="number"> 1 </span>without specialization, the rest aren't able to form any team;</span><br><span class="line">one team consists of<span class="number"> 1 </span>coder,<span class="number"> 1 </span>mathematician and<span class="number"> 1 </span>without specialization, one consists of<span class="number"> 2 </span>coders and<span class="number"> 1 </span>mathematician and one consists of<span class="number"> 1 </span>coder and<span class="number"> 2 </span>mathematicians.</span><br></pre></td></tr></table></figure><p></p><p><code>题解</code>：<br>这道题重点是判断一下数学家和编译员的人数，如果为0，是肯定组不成的<br>不为0的话，要判断数学家和编译员的人数之中最小的值和最小能够组成完美队伍的值之间，取最小值</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c, m, x;<span class="comment">//c是程序员,m是数学家,x是无专业人</span></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c &gt;&gt; m &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="number">0</span> || m == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minx = min(c, m);</span><br><span class="line"><span class="keyword">int</span> len = (c + m + x) / <span class="number">3</span>;</span><br><span class="line">ans = min(minx, len);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday5&quot;&gt;&lt;a href=&quot;#Rday5&quot; class=&quot;headerlink&quot; title=&quot;Rday5&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday5&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;练习&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>Rday4</title>
    <link href="http://yoursite.com/2019/09/20/Rday4/"/>
    <id>http://yoursite.com/2019/09/20/Rday4/</id>
    <published>2019-09-19T16:00:00.000Z</published>
    <updated>2020-03-08T13:50:33.389Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday4"><a href="#Rday4" class="headerlink" title="Rday4"></a><center>Rday4</center></h1><p><center>DFS<br><a id="more"></a></center></p><h2 id="Oil-Deposits"><a href="#Oil-Deposits" class="headerlink" title="Oil Deposits"></a>Oil Deposits</h2><p>应该可以算是入门题吧</p><p>The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil. A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid.<br><code>Input</code><br>The input file contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 &lt;= m &lt;= 100 and 1 &lt;= n &lt;= 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either <code>*&#39;, representing the absence of oil, or</code>@’, representing an oil pocket.<br><code>Output</code><br>For each grid, output the number of distinct oil deposits. Two different pockets are part of the same oil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line">*</span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line">*@*@*</span><br><span class="line">**@**</span><br><span class="line">*@*@*</span><br><span class="line"><span class="number">1</span> <span class="number">8</span></span><br><span class="line">@@****@*</span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line">****@</span><br><span class="line">*@@*@</span><br><span class="line">*@**@</span><br><span class="line">@@@*@</span><br><span class="line">@@**@</span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code>:<br>存图，套用一下DFS大概模板就行了</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">char</span> a[mod][mod];</span><br><span class="line"><span class="keyword">int</span> vis[mod][mod];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">8</span>][<span class="number">2</span>] = &#123;</span><br><span class="line"><span class="number">-1</span>, <span class="number">1</span>,</span><br><span class="line"><span class="number">-1</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">-1</span>, <span class="number">-1</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">-1</span>,</span><br><span class="line"><span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line"><span class="number">1</span>, <span class="number">-1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;=n || y &gt;= m)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> xx, yy;</span><br><span class="line"><span class="comment">//vis[x][y] = 1;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line">xx = x + d[i][<span class="number">0</span>];</span><br><span class="line">yy = y + d[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(xx &gt;= <span class="number">0</span> &amp;&amp; yy &gt;= <span class="number">0</span> &amp;&amp; xx &lt; n &amp;&amp; yy &lt; m &amp;&amp; a[xx][yy] != <span class="string">'*'</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[xx][yy] = <span class="string">'*'</span>;</span><br><span class="line">DFS(xx, yy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sx, sy;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m) &amp;&amp; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//memset(vis, 0, sizeof(vis));</span></span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i][j] == <span class="string">'@'</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ans ++;</span><br><span class="line">DFS(i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday4&quot;&gt;&lt;a href=&quot;#Rday4&quot; class=&quot;headerlink&quot; title=&quot;Rday4&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday4&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;DFS&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Rday3</title>
    <link href="http://yoursite.com/2019/09/19/Rday3/"/>
    <id>http://yoursite.com/2019/09/19/Rday3/</id>
    <published>2019-09-19T12:28:13.900Z</published>
    <updated>2020-03-08T13:50:37.091Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday3"><a href="#Rday3" class="headerlink" title="Rday3"></a><center>Rday3</center></h1><p><center>贪心<br><a id="more"></a></center></p><h2 id="排队接水"><a href="#排队接水" class="headerlink" title="排队接水"></a>排队接水</h2><p><code>题目描述</code><br>有n个人在一个水龙头前排队接水，假如每个人接水的时间为Ti，请编程找出这n个人排队的一种顺序，使得n个人的平均等待时间最小。</p><p><code>输入格式</code><br>输入文件共两行，第一行为n；第二行分别表示第1个人到第n个人每人的接水时间T1，T2，…，Tn，每个数据之间有1个空格。</p><p><code>输出格式</code><br>输出文件有两行，第一行为一种排队顺序，即1到n的一种排列；第二行为这种排列方案下的平均等待时间(输出结果精确到小数点后两位)。<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入输出样例</span><br><span class="line">输入</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">56</span> <span class="number">12</span> <span class="number">1</span> <span class="number">99</span> <span class="number">1000</span> <span class="number">234</span> <span class="number">33</span> <span class="number">55</span> <span class="number">99</span> <span class="number">812</span></span><br><span class="line">输出</span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">7</span> <span class="number">8</span> <span class="number">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">6</span> <span class="number">10</span> <span class="number">5</span></span><br><span class="line"><span class="number">291.90</span></span><br><span class="line"></span><br><span class="line">说明/提示</span><br><span class="line">n&lt;=<span class="number">1000</span></span><br><span class="line">ti&lt;=<span class="number">1e6</span>，不保证ti不重复</span><br><span class="line">当ti重复时，按照输入顺序即可（sort是可以的）</span><br></pre></td></tr></table></figure><p></p><p><code>题意</code>:<br>求最短的节水时间，看完题意分析可知，这题就是说单个人节水快的人先接水，这样后面人等的时间也就比较短了，这样最后平均下来的时间也会比较短<br>我见好多解法都是结构体解的，下面的解法利用一个巧妙地思维解，没有运用到结构体<br>因为数据是在1000之内的，所以可以乘上个1001，这样后面排序的时候序号不干扰排序<br>后面的结果%1001是序号，/1001是时间</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="comment">//接水人所用的时间</span></span><br><span class="line">a[i] = x * <span class="number">1001</span> + i;</span><br><span class="line">&#125;</span><br><span class="line">sort(a + <span class="number">1</span>, a + t + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i] % <span class="number">1001</span>);</span><br><span class="line">        <span class="comment">//表示其他人需要等的时间</span></span><br><span class="line">sum += a[i] / <span class="number">1001</span> * (t - i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">double</span> ans = sum / t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday3&quot;&gt;&lt;a href=&quot;#Rday3&quot; class=&quot;headerlink&quot; title=&quot;Rday3&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday3&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;贪心&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Rday2</title>
    <link href="http://yoursite.com/2019/09/18/Rday2/"/>
    <id>http://yoursite.com/2019/09/18/Rday2/</id>
    <published>2019-09-18T10:50:05.421Z</published>
    <updated>2020-03-08T13:50:41.126Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday2"><a href="#Rday2" class="headerlink" title="Rday2"></a><center>Rday2</center></h1><p><center>二分<br><a id="more"></a></center></p><h2 id="Strange-fuction"><a href="#Strange-fuction" class="headerlink" title="Strange fuction"></a>Strange fuction</h2><p>Now, here is a fuction:<br>F(x) = 6 <em>x^7+8</em>x^6+7<em>x^3+5</em>x^2-y*x (0 &lt;= x &lt;=100)<br>Can you find the minimum value when x is between 0 and 100.<br><code>Input</code><br>The first line of the input contains an integer T(1&lt;=T&lt;=100) which means the number of test cases. Then T lines follow, each line has only one real numbers Y.(0 &lt; Y &lt;1e10)<br><code>Output</code><br>Just the minimum value (accurate up to 4 decimal places),when x is between 0 and 100.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">-74.4291</span></span><br><span class="line"><span class="number">-178.8534</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code>：<br></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这道题就是一个数学思维题</span><br><span class="line">相当于y是个常数求 F(<span class="keyword">x</span>) = <span class="number">6</span> * <span class="keyword">x</span>^<span class="number">7</span>+<span class="number">8</span>*<span class="keyword">x</span>^<span class="number">6</span>+<span class="number">7</span>*<span class="keyword">x</span>^<span class="number">3</span>+<span class="number">5</span>*<span class="keyword">x</span>^<span class="number">2</span>-y*<span class="keyword">x</span> (<span class="number">0</span> &lt;= <span class="keyword">x</span> &lt;=<span class="number">100</span>)这个函数的最小值，令F' = <span class="number">0</span>，得出<span class="keyword">x</span>，y的方程，</span><br><span class="line">用二分法解方程得<span class="keyword">x</span><span class="number">0</span>(易证得<span class="keyword">x</span><span class="number">0</span>&gt;=<span class="number">0</span> &amp;&amp; <span class="keyword">x</span><span class="number">0</span>&lt;=<span class="number">100</span>)，则F'(<span class="keyword">x</span><span class="number">0</span>) = <span class="number">0</span>,由F'' 在[<span class="number">0</span><span class="number">-100</span>]上恒大于<span class="number">0</span>，</span><br><span class="line">所以F'在[<span class="number">0</span><span class="number">-100</span>]上单增，所以F'(<span class="keyword">x</span>)&lt;<span class="number">0</span>(<span class="keyword">x</span>&lt;<span class="keyword">x</span><span class="number">0</span>),F'(<span class="keyword">x</span>)&gt;<span class="number">0</span>(<span class="keyword">x</span>&gt;<span class="keyword">x</span><span class="number">0</span>),所以F(<span class="keyword">x</span>)在<span class="keyword">x</span>=<span class="keyword">x</span><span class="number">0</span>处取得最小值，所以本题主要就是二分求解方程的<span class="keyword">x</span><span class="number">0</span>，然后直接带入<span class="keyword">x</span><span class="number">0</span>，y计算即可。</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> mod = <span class="number">1e-6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">qiu_y</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">42</span> * <span class="built_in">pow</span>(x, <span class="number">6.0</span>) + <span class="number">48</span> * <span class="built_in">pow</span>(x, <span class="number">5.0</span>) + <span class="number">21</span> * <span class="built_in">pow</span>(x, <span class="number">2.0</span>) + <span class="number">10</span> * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">6</span> * <span class="built_in">pow</span>(x, <span class="number">7</span>) + <span class="number">8</span> * <span class="built_in">pow</span>(x, <span class="number">6</span>) + <span class="number">7</span> * <span class="built_in">pow</span>(x, <span class="number">3</span>) + <span class="number">5</span> * <span class="built_in">pow</span>(x, <span class="number">2</span>) - x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">double</span> l, r, mid, y, res;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; y;</span><br><span class="line">l = <span class="number">0.0</span>, r = <span class="number">100.0</span>;</span><br><span class="line"><span class="keyword">while</span>(r - l &gt; mod)</span><br><span class="line">&#123;</span><br><span class="line">mid = (r + l) / <span class="number">2</span>;</span><br><span class="line">res = qiu_y(mid);</span><br><span class="line"><span class="keyword">if</span>(res &lt; y)</span><br><span class="line">&#123;</span><br><span class="line">l = mid + <span class="number">1e-8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">r = mid - <span class="number">1e-8</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%0.4lf\n"</span>,f(mid, y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday2&quot;&gt;&lt;a href=&quot;#Rday2&quot; class=&quot;headerlink&quot; title=&quot;Rday2&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday2&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;二分&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Rday1</title>
    <link href="http://yoursite.com/2019/09/17/Rday1.0/"/>
    <id>http://yoursite.com/2019/09/17/Rday1.0/</id>
    <published>2019-09-17T11:39:08.450Z</published>
    <updated>2020-03-08T13:50:46.573Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Rday1"><a href="#Rday1" class="headerlink" title="Rday1"></a><center>Rday1</center></h1><p><center>树的直径<br><a id="more"></a></center></p><h2 id="Roads-in-the-North"><a href="#Roads-in-the-North" class="headerlink" title="Roads in the North"></a>Roads in the North</h2><p>Building and maintaining roads among communities in the far North is an expensive business. With this in mind, the roads are build such that there is only one route from a village to a village that does not pass through some other village twice.<br>Given is an area in the far North comprising a number of villages and roads among them such that any village can be reached by road from any other village. Your job is to find the road distance between the two most remote villages in the area.</p><p>The area has up to 10,000 villages connected by road segments. The villages are numbered from 1.<br><code>Input</code><br>Input to the problem is a sequence of lines, each containing three positive integers: the number of a village, the number of a different village, and the length of the road segment connecting the villages in kilometers. All road segments are two-way.<br><code>Output</code><br>You are to output a single integer: the road distance between the two most remote villages in the area.<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">9</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">8</span></span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">7</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code>：<br>首先分析题意，表示的是一个村落到另一个村落的距离并且带有权值，自然可以想到并查集或者树的直径，再加上所求的是最远的两个村落之间的最大的费用，可以知道，这道题就是求树的直径<br>树的直径做法：跑两边BFS就可以了，其中BFS表示找到一端的端点<br>整体做法：先vector存图，然后用队列和pair来写BFS，这个和模板有点相识，运用相关思想可解</p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxx];</span><br><span class="line"><span class="keyword">int</span> dis[maxx];</span><br><span class="line"><span class="keyword">int</span> en;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;v[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line">q.push(x);</span><br><span class="line">en = <span class="number">0</span>;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> f = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(dis[f] &gt; ans)</span><br><span class="line">&#123;</span><br><span class="line">ans = dis[f];</span><br><span class="line">en = f;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[f].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">t = v[f][i];</span><br><span class="line"><span class="keyword">if</span>(vis[t.first] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis[t.first] = <span class="number">1</span>;</span><br><span class="line">dis[t.first] = t.second + dis[f];</span><br><span class="line">q.push(t.first);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> en;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[i].size(); i ++) v[i].clear();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;n, &amp;m, &amp;k)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">v[n].push_back(make_pair(m, k));</span><br><span class="line">v[m].push_back(make_pair(n, k));</span><br><span class="line">&#125;</span><br><span class="line">bfs(<span class="number">1</span>);</span><br><span class="line">bfs(en);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Rday1&quot;&gt;&lt;a href=&quot;#Rday1&quot; class=&quot;headerlink&quot; title=&quot;Rday1&quot;&gt;&lt;/a&gt;&lt;center&gt;Rday1&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;树的直径&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="review" scheme="http://yoursite.com/categories/ACM/review/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
      <category term="树的直径" scheme="http://yoursite.com/tags/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>css基础</title>
    <link href="http://yoursite.com/2019/09/13/css/"/>
    <id>http://yoursite.com/2019/09/13/css/</id>
    <published>2019-09-12T16:00:00.000Z</published>
    <updated>2019-09-13T09:24:00.670Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --><h1 id="css基础"><a href="#css基础" class="headerlink" title="css基础"></a><center>css基础</center></h1><p><center>时隔这么久了，更新一下css的内容，哈哈<br><img src="https://i.loli.net/2019/09/13/LBEjduKyVqQvpTC.jpg" alt><br><a id="more"></a></center></p><h1 id="css简介"><a href="#css简介" class="headerlink" title="css简介"></a>css简介</h1><p>众所周知，网页设计是由html+css+js组成的<br>今天就了解一下css吧，也就是”网页化妆师”<br><a href="https://www.runoob.com/css/css-tutorial.html" target="_blank" rel="noopener">细致链接</a></p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>CSS 的选择器是 CSS最基础也是最重要的一个知识点。</span><br><span class="line"><span class="number">2.</span>选择器的权重：谁的权力大，就听谁的，同理，选择器权重也是一样，谁的权重值高，应用谁的</span><br><span class="line"><span class="number">3.</span>用途：用于准确的选中元素，并赋予样式</span><br></pre></td></tr></table></figure><h3 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h3><p>类（class）选择器：<br>通过标签的 class 属性 ，选择对应的元素 借助了一个类的概念，一处定义，可以多处使用</p><p>id选择器：<br>通过标签的 id 属性，选择 对应的元素 注意：id选择器唯一</p><p>群组选择器：<br>群组选择器是可以同时选择多个标签的选择器</p><p>层次选择器：<br>层次选择器分为，子代、后代、相邻和兄弟等四种选择器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">子代选择器：&gt;    eg：.<span class="keyword">div</span>&gt;ul</span><br><span class="line">后代选择器：一个空格    eg：.<span class="keyword">div</span> ul</span><br><span class="line">相邻选择器：只能选择与当前选择的标签的下一个，不包括上一个，用+表示   eg：.top+.contont</span><br><span class="line">兄弟选择器：只能选择当前选择器的下面的同一层次的选择器，不包括前面的，用~表示    eg：.top~contont</span><br><span class="line">属性选择器：一般用于自定义   eg:有一个&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"box"</span>&gt;&lt;/<span class="keyword">div</span>&gt;  使用的时候为 .<span class="keyword">div</span>[<span class="built_in">class</span>=<span class="string">"box"</span>]</span><br><span class="line">分组选择器：用,隔开就行了</span><br><span class="line">伪类选择器：首先是link,其次是hover,然后是visited,然后是actived</span><br></pre></td></tr></table></figure><h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Id选择器 &gt; <span class="keyword">class</span> 选择器 &gt; 元素选择器</span><br><span class="line"></span><br><span class="line">​<span class="symbol">Id</span>选择器：<span class="symbol">100</span> &gt; <span class="symbol">class</span> 选择器：<span class="symbol">10</span> &gt; 元素选择器：<span class="symbol">1</span></span><br></pre></td></tr></table></figure><h4 id="伪类选择器："><a href="#伪类选择器：" class="headerlink" title="伪类选择器："></a>伪类选择器：</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>link：未访问过的样式</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>visited：访问过后的样式</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>hover：划过的样式</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>active：激活的样式</span><br></pre></td></tr></table></figure><p><code>用法</code><br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="undefined">            height: 400px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:400px</span>;</span></span><br><span class="line"><span class="undefined">            background: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="undefined">            background: skyblue;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        a&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">text-decoration</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span></span><br><span class="line"><span class="undefined">            color: red;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span></span><br><span class="line"><span class="undefined">            color: yellow;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span></span><br><span class="line"><span class="undefined">            color: green;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span>lalla<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="CSS字体-文本"><a href="#CSS字体-文本" class="headerlink" title="CSS字体/文本"></a>CSS字体/文本</h3><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字体<span class="built_in">font</span>-family</span><br><span class="line">字体大小<span class="built_in">font</span>-<span class="built_in">size</span></span><br><span class="line">字体样式<span class="built_in">font</span>-style</span><br><span class="line">字体粗细<span class="built_in">font</span>-weight</span><br><span class="line">字体大小写<span class="built_in">font</span>-<span class="built_in">variant</span></span><br><span class="line">复合样式<span class="built_in">font</span></span><br></pre></td></tr></table></figure><h3 id="文本常用样式："><a href="#文本常用样式：" class="headerlink" title="文本常用样式："></a>文本常用样式：</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对齐方式<span class="built_in">text</span>-align</span><br><span class="line">首行缩进<span class="built_in">text</span>-indent</span><br><span class="line">文本线<span class="built_in">text</span>-decoration</span><br><span class="line">字距letter-spacing</span><br><span class="line">词距<span class="keyword">word</span>-spacing</span><br><span class="line">行高<span class="built_in">line</span>-<span class="built_in">height</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;css基础&quot;&gt;&lt;a href=&quot;#css基础&quot; class=&quot;headerlink&quot; title=&quot;css基础&quot;&gt;&lt;/a&gt;&lt;center&gt;css基础&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;时隔这么久了，更新一下css的内容，哈哈&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2019/09/13/LBEjduKyVqQvpTC.jpg&quot; alt&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
      <category term="css" scheme="http://yoursite.com/categories/html/css/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>集训中学到的方法</title>
    <link href="http://yoursite.com/2019/08/30/%E9%9B%86%E8%AE%AD%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/30/集训中学到的方法/</id>
    <published>2019-08-29T16:00:00.000Z</published>
    <updated>2019-08-18T15:38:10.143Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --><h1 id="学习就该如贪心！！一直向前-！"><a href="#学习就该如贪心！！一直向前-！" class="headerlink" title="学习就该如贪心！！一直向前~！"></a><center>学习就该如贪心！！一直向前~！</center></h1><p><center>记录一些会用到并且好用的函数<br>或者是容易混淆的知识点<br><code>持续更新</code><br><a id="more"></a></center></p><p>有关acm中精度的问题：<br><a href="https://www.cnblogs.com/crazyacking/p/4668471.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazyacking/p/4668471.html</a></p><h2 id="STL的定义方式："><a href="#STL的定义方式：" class="headerlink" title="STL的定义方式："></a>STL的定义方式：</h2><p>set/stack/queue/vector &lt;int/string&gt; 定义名称；<br><code>set</code>有自动排序的功能(从小到大)</p><blockquote><p>set里面用的是平衡二叉搜索树（也就是红黑树）维护</p></blockquote><p>string 字符串名称；<br>map&lt;string/int, int/string&gt; 名称；</p><h3 id="set的迭代器："><a href="#set的迭代器：" class="headerlink" title="set的迭代器："></a>set的迭代器：</h3><p>set<int>:: iterator it;<br>这个it是为指针用法<br>eg：<br>it = st.begin();<br>cout &lt;&lt; <em>it;<br>it ++;<br>for(; it != st.end(); it ++)<br>{<br>cout &lt;&lt; “ “ &lt;&lt; </em>it;<br>}</int></p><h3 id="map的迭代器："><a href="#map的迭代器：" class="headerlink" title="map的迭代器："></a>map的迭代器：</h3><p>map&lt;string, int&gt; :: iterator mp;<br>这个mp用法要用mp -&gt; first 或者mp -&gt; second 来表示<br>eg：<br>map&lt;string, int&gt; :: iterator it1;<br>map&lt;string, node&gt; :: iterator it2;<br>for(it2 = mp.begin(); it2 != mp.end(); it2 ++)<br>{<br>cout &lt;&lt; it2 -&gt; first &lt;&lt; endl;<br>for(it1 = mp[it2 -&gt; first].count.begin(); it1 != mp[it2 -&gt; first].count.end(); it1 ++)<br>{<br>cout &lt;&lt; “|—-“ &lt;&lt; it1 -&gt; first &lt;&lt; “(“ &lt;&lt; it1 -&gt; second &lt;&lt; “)” &lt;&lt; endl;<br>}<br>}</p><h3 id="嵌套map用法可以为"><a href="#嵌套map用法可以为" class="headerlink" title="嵌套map用法可以为"></a>嵌套map用法可以为</h3><p>struct node{<br>map&lt;string, int&gt; count;<br>};</p><p>map&lt;string, node&gt; mp;</p><p>用的时候为：mp[string].count[string] ++;或者一些操作</p><h2 id="二分查找–binary-search的用法"><a href="#二分查找–binary-search的用法" class="headerlink" title="二分查找–binary_search的用法"></a>二分查找–binary_search的用法</h2><p>头文件 <code>#include &lt;algorithm&gt;</code></p><p>使用方法：<br></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.函数模板：binary<span class="constructor">_search(<span class="params">arr</span>[],<span class="params">arr</span>[]+<span class="params">size</span> ,  <span class="params">indx</span>)</span></span><br><span class="line">b.参数说明：</span><br><span class="line">    arr<span class="literal">[]</span>： 数组首地址</span><br><span class="line">    size：数组元素个数</span><br><span class="line">    indx:需要查找的值</span><br><span class="line">c.函数功能：  在数组中以二分法检索的方式查找，若在数组(要求数组元素非递减)中查找到indx元素则真，若查找不到则返回值为假。</span><br></pre></td></tr></table></figure><p></p><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><p>查找第一个大于或等于某个元素的位置<br>使用方法：<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a.函数模板：lower_bound(arr[],arr[]+size ,  indx):</span><br><span class="line">b.参数说明：</span><br><span class="line">    arr[]： 数组首地址</span><br><span class="line">    size：数组元素个数</span><br><span class="line">    indx:需要查找的值</span><br><span class="line">c.函数功能:函数lower_bound()在first和last中的前闭后开区间进行二分查找，返回大于或等于val的第一个元素位置(注意是地址)。如果所有元素都小于val，则返回last的位置</span><br><span class="line">d.举例如下：</span><br><span class="line">　　一个数组number序列为：<span class="number">4</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">70</span>,<span class="number">96</span>,<span class="number">100.</span>设要插入数字<span class="number">3</span>,<span class="number">9</span>,<span class="number">111.</span>pos为要插入的位置的下标，则</span><br><span class="line">　　<span class="comment">/*注意因为返回值是一个指针，所以减去数组的指针就是int变量了*/</span></span><br><span class="line">　　pos = lower_bound( number, number + <span class="number">8</span>, <span class="number">3</span>) - number，pos = <span class="number">0.</span>即number数组的下标为<span class="number">0</span>的位置。</span><br><span class="line">　　pos = lower_bound( number, number + <span class="number">8</span>, <span class="number">9</span>) - number， pos = <span class="number">1</span>，即number数组的下标为<span class="number">1</span>的位置（即<span class="number">10</span>所在的位置）。</span><br><span class="line">　　pos = lower_bound( number, number + <span class="number">8</span>, <span class="number">111</span>) - number， pos = <span class="number">8</span>，即number数组的下标为<span class="number">8</span>的位置（但下标上限为<span class="number">7</span>，所以返回最后一个元素的下一个元素）。</span><br><span class="line">e.注意：函数lower_bound()在first和last中的前闭后开区间进行二分查找，返回大于或等于val的第一个元素位置。如果所有元素都小于val，则返回last的位置，且last的位置是越界的！</span><br></pre></td></tr></table></figure><p></p><h3 id="upper-bound-查找第一个大于某个位置的元素的位置"><a href="#upper-bound-查找第一个大于某个位置的元素的位置" class="headerlink" title="upper_bound: 查找第一个大于某个位置的元素的位置"></a>upper_bound: 查找第一个大于某个位置的元素的位置</h3><p>使用方法：<br></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a.函数模板：upper<span class="constructor">_bound(<span class="params">arr</span>[],<span class="params">arr</span>[]+<span class="params">size</span> ,  <span class="params">indx</span>)</span>:</span><br><span class="line">b.参数说明：</span><br><span class="line">    arr<span class="literal">[]</span>： 数组首地址</span><br><span class="line">    size：数组元素个数</span><br><span class="line">    indx:需要查找的值</span><br><span class="line">c.函数功能：函数upper<span class="constructor">_bound()</span>返回的在前闭后开区间查找的关键字的上界，返回大于<span class="keyword">val</span>的第一个元素位置</span><br><span class="line">　　例如：一个数组number序列<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4.</span>upper<span class="constructor">_bound(2)</span>后，返回的位置是<span class="number">3</span>（下标）也就是<span class="number">4</span>所在的位置,同样，如果插入元素大于数组中全部元素，返回的是last。(注意：数组下标越界)</span><br><span class="line">　　返回查找元素的最后一个可安插位置，也就是“元素值&gt;查找值”的第一个元素的位置 。</span><br></pre></td></tr></table></figure><p></p><h2 id="unique函数"><a href="#unique函数" class="headerlink" title="unique函数"></a>unique函数</h2><p>类属性算法unique的作用是从输入序列中“删除”所有相邻的重复元素。</p><p>该算法删除相邻的重复元素，然后重新排列输入范围内的元素，并且返回一个迭代器（容器的长度没变，只是元素顺序改变了），表示无重复的值范围得结束。<br></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sort words alphabetically so we can find the duplicates</span></span><br><span class="line"><span class="built_in">sort</span>(words.<span class="built_in">begin</span>(), words.<span class="keyword">end</span>());</span><br><span class="line"> <span class="built_in">vector</span>&lt;<span class="keyword">string</span>&gt;::iterator end_unique =  <span class="built_in">unique</span>(words.<span class="built_in">begin</span>(), words.<span class="keyword">end</span>());</span><br><span class="line"> words.erase(end_unique, words.end());</span><br></pre></td></tr></table></figure><p></p><p>在STL中unique函数是一个去重函数， unique的功能是去除相邻的重复元素(只保留一个),其实它并不真正把重复的元素删除，是把重复的元素移到后面去了，然后依然保存到了原数组中，然后 返回去重后最后一个元素的地址，因为unique去除的是相邻的重复元素，所以一般用之前都会要排一下序。<br>若调用sort后，vector的对象的元素按次序排列如下：<br>sort jumps over quick red red slow the the turtle<br><img src="https://i.loli.net/2019/08/12/24TpqaLng3NoZWU.png" alt="下载.png"><br>注意，words的大小并没有改变，依然保存着10个元素；只是这些元素的顺序改变了。调用unique“删除”了相邻的重复值。给“删除”加上引号是因为unique实际上并没有删除任何元素，而是将无重复的元素复制到序列的前段，从而覆盖相邻的重复元素。unique返回的迭代器指向超出无重复的元素范围末端的下一个位置。</p><p>注意：算法不直接修改容器的大小。如果需要添加或删除元素，则必须使用容器操作。<br>Eg:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"Illustrating the generic unique algorithm."&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">11</span>;</span><br><span class="line">    <span class="keyword">int</span> array1[N]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vector1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">        vector1.push_back(array1[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator new_end;</span><br><span class="line">    new_end=unique(vector1.begin(),vector1.end());    <span class="comment">//"删除"相邻的重复元素</span></span><br><span class="line">    assert(vector1.size()==N);</span><br><span class="line"></span><br><span class="line">    vector1.erase(new_end,vector1.end());  <span class="comment">//删除（真正的删除）重复的元素</span></span><br><span class="line">    copy(vector1.begin(),vector1.end(),ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>,<span class="string">" "</span>));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="gcd的前缀后缀维护"><a href="#gcd的前缀后缀维护" class="headerlink" title="gcd的前缀后缀维护"></a>gcd的前缀后缀维护</h2><p>说到gcd,就不得不提一下<br>C++11中子代有内置gcd函数,用法是 __gcd(a, b);</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6025" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6025</a></p><p><code>持续更新</code><br>PS:暂时不会讲解，先看代码吧，等以后理解透了在讲解<br>code:<br></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cmath&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstring&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">int</span> gcd(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line"><span class="keyword">int</span> t=a;</span><br><span class="line">a=b;b=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000005</span>],<span class="string">q[1000005]</span>,h[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> main()&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">memset(<span class="keyword">q</span>,<span class="number">0</span>,sizeof(<span class="keyword">q</span>));</span><br><span class="line">memset(h,<span class="number">0</span>,sizeof(h));</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">q[0]</span>=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="string">q[i]</span>=gcd(<span class="string">q[i-1]</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">h[n-<span class="number">1</span>]=a[n-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=n-<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">h[i]=gcd(h[i+<span class="number">1</span>],a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=max(<span class="string">q[n-2]</span>,h[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">ans=max(ans,gcd(<span class="string">q[i-1]</span>,h[i+<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="C-中auto的用法"><a href="#C-中auto的用法" class="headerlink" title="C++中auto的用法"></a>C++中auto的用法</h2><h3 id="C-98-auto"><a href="#C-98-auto" class="headerlink" title="C++98 auto"></a>C++98 auto</h3><p>早在C++98标准中就存在了auto关键字，那时的auto用于声明变量为自动变量，自动变量意为拥有自动的生命期，这是多余的，因为就算不使用auto声明，变量依旧拥有自动的生命期：<br></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a =<span class="number">10</span> ;  <span class="comment">//拥有自动生命期</span></span><br><span class="line"><span class="built_in">auto</span> <span class="built_in">int</span> b = <span class="number">20</span> ;<span class="comment">//拥有自动生命期</span></span><br><span class="line">static <span class="built_in">int</span> c = <span class="number">30</span> ;<span class="comment">//延长了生命期</span></span><br></pre></td></tr></table></figure><p></p><p>C++98中的auto多余且极少使用，C++11已经删除了这一用法，取而代之的是全新的auto：变量的自动类型推断。</p><h3 id="C-11-auto"><a href="#C-11-auto" class="headerlink" title="C++11 auto"></a>C++11 auto</h3><p>auto可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型，类似的关键字还有decltype。举个例子：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> au_a = a;<span class="comment">//自动类型推断，au_a为int类型</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(au_a).name() &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p></p><p>typeid运算符可以输出变量的类型。程序的运行结果输出了<br>int<br>这种用法就类似于C#中的var关键字。auto的自动类型推断发生在编译期，所以使用auto并不会造成程序运行时效率的降低。而是否会造成编译期的时间消耗，我认为是不会的，在未使用auto时，编译器也需要得知右操作数的类型，再与左操作数的类型进行比较，检查是否可以发生相应的转化，是否需要进行隐式类型转换。</p><h3 id="为什么用auto"><a href="#为什么用auto" class="headerlink" title="为什么用auto:"></a>为什么用auto:</h3><p>用于代替冗长复杂、变量使用范围专一的变量声明。<br>想象一下在没有auto的时候，我们操作标准库时经常需要这样：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator i = vs.begin(); i != vs.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用auto 可以简化代码:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = vs.begin(); i != vs.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="pair的用法"><a href="#pair的用法" class="headerlink" title="pair的用法"></a>pair的用法</h2><h3 id="pair的应用"><a href="#pair的应用" class="headerlink" title="pair的应用"></a>pair的应用</h3><p>pair是将2个数据组合成一组数据，当需要这样的需求时就可以使用pair，如stl中的map就是将key和value放在一起来保存。<br>另一个应用是，当一个函数需要返回2个数据的时候，可以选择pair。 pair的实现是一个结构体，主要的两个成员变量是first second 因为是使用struct不是class，所以可以直接使用pair的成员变量。<br></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;T1, T2&gt; p1;            //创建一个空的pair对象（使用默认构造），它的两个元素分别是T1和T2类型，采用值初始化。</span><br><span class="line">pair&lt;T1, T2&gt; p1(v1, v2);    //创建一个pair对象，它的两个元素分别是T1和T2类型，其中first成员初始化为v1，second成员初始化为v2。</span><br><span class="line">make_pair(v1, v2);          // 以v1和v2的值创建一个新的pair对象，其元素类型分别是v1和v2的类型。</span><br><span class="line">p1 &lt; p2;                    // 两个pair对象间的小于运算，其定义遵循字典次序：如 p1.first &lt; p2.first 或者 !(p2.first &lt; p1.first) &amp;&amp; (p1.second &lt; p2.second) 则返回true。</span><br><span class="line">p1 == p2；                  // 如果两个对象的first和second依次相等，则这两个对象相等；该运算使用元素的==操作符。</span><br><span class="line">p1.first;                   // 返回对象p1中名为first的公有数据成员</span><br><span class="line">p1.second;                 // 返回对象p1中名为second的公有数据成员</span><br></pre></td></tr></table></figure><p></p><h3 id="pair的创建和初始化"><a href="#pair的创建和初始化" class="headerlink" title="pair的创建和初始化"></a>pair的创建和初始化</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pair</span>包含两个数值，与容器一样，<span class="built_in">pair</span>也是一种模板类型。但是又与之前介绍的容器不同；</span><br><span class="line">在创建<span class="built_in">pair</span>对象时，必须提供两个类型名，两个对应的类型名的类型不必相同</span><br><span class="line"></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; anon;        <span class="comment">// 创建一个空对象anon，两个元素类型都是string</span></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, int&gt; word_count;     <span class="comment">// 创建一个空对象 word_count, 两个元素类型分别是string和int类型</span></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, vector&lt;int&gt; &gt; line;  <span class="comment">// 创建一个空对象line，两个元素类型分别是string和vector类型</span></span><br><span class="line"></span><br><span class="line">当然也可以在定义时进行成员初始化：</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; author(<span class="string">"James"</span>,<span class="string">"Joy"</span>);    <span class="comment">// 创建一个author对象，两个元素类型分别为string类型，并默认初始值为James和Joy。</span></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, int&gt; name_age(<span class="string">"Tom"</span>, <span class="string">"18"</span>);</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, int&gt; name_age2(name_age);    <span class="comment">// 拷贝构造初始化</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pair类型的使用相当的繁琐，如果定义多个相同的pair类型对象，可以使用<span class="keyword">typedef</span>简化声明：</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; Author;</span><br><span class="line"><span class="function">Author <span class="title">proust</span><span class="params">(<span class="string">"March"</span>,<span class="string">"Proust"</span>)</span></span>;</span><br><span class="line"><span class="function">Author <span class="title">Joy</span><span class="params">(<span class="string">"James"</span>,<span class="string">"Joy"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">变量间赋值：</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p1(<span class="number">1</span>, <span class="number">1.2</span>);</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p2 = p1;     <span class="comment">//operator =</span></span><br></pre></td></tr></table></figure><h2 id="pair对象的操作"><a href="#pair对象的操作" class="headerlink" title="pair对象的操作"></a>pair对象的操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span> ,<span class="keyword">double</span>&gt; p1;</span><br><span class="line">p1.first = <span class="number">1</span>;</span><br><span class="line">p1.second = <span class="number">2.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p1.first&lt;&lt;<span class="string">' '</span>&lt;&lt;p1.second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：1 2.5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> firstBook;</span><br><span class="line"><span class="keyword">if</span>(author.first==<span class="string">"James"</span> &amp;&amp; author.second==<span class="string">"Joy"</span>)</span><br><span class="line">    firstBook=<span class="string">"Stephen Hero"</span>;</span><br></pre></td></tr></table></figure><h2 id="生成新的pair对象"><a href="#生成新的pair对象" class="headerlink" title="生成新的pair对象"></a>生成新的pair对象</h2><p>还可以利用make_pair创建新的pair对象：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p1;</span><br><span class="line">p1 = make_pair(<span class="number">1</span>, <span class="number">1.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p1.first &lt;&lt; p1.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output: 1 1.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="built_in">string</span> m = <span class="string">"James"</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; newone;</span><br><span class="line"></span><br><span class="line">newone = make_pair(a, m);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; newone.first &lt;&lt; newone.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output: 8 James</span></span><br></pre></td></tr></table></figure><p></p><h2 id="通过tie获取pair元素值"><a href="#通过tie获取pair元素值" class="headerlink" title="通过tie获取pair元素值"></a>通过tie获取pair元素值</h2><p>在某些清况函数会以pair对象作为返回值时，可以直接通过std::tie进行接收。比如：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::pair&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; getPreson() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::make_pair(<span class="string">"Sven"</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> ages;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::tie(name, ages) = getPreson();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"name: "</span> &lt;&lt; name &lt;&lt; <span class="string">", ages: "</span> &lt;&lt; ages &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="有关字符串的一些用法"><a href="#有关字符串的一些用法" class="headerlink" title="有关字符串的一些用法"></a>有关字符串的一些用法</h2><p>1.isalpha(c) ~判断是否为英文字符<br>2.tolower(c) ~将字符转换成小写<br>3.字符串输入sstream<br>4.将字符串分割成单词：<br>stringstream temp(str); //分割成一个个单词<br>5.将字符串插入进set中，自动排序~</p><h2 id="string的用法"><a href="#string的用法" class="headerlink" title="string的用法"></a>string的用法</h2><p>提到字符串就必须提一句string,这个是真的好用！！！！</p><p>简洁明了string 的用法和 int 基本上没啥差别，也就是定义的类型不同，string功能多一点罢了(string毕竟是字符串嘛)</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string <span class="keyword">str</span>;</span><br><span class="line">string <span class="keyword">str</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">str</span> = <span class="string">"aaa"</span>;<span class="comment">//直接赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">cin &gt;&gt; <span class="keyword">str</span>[i];<span class="comment">//输入赋值</span></span><br></pre></td></tr></table></figure><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>说起来比较就更令人发指了！！！<br>不知道比起来某个char方便多少呢。<br></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">str1</span> = <span class="string">"abc"</span><span class="comment">;</span></span><br><span class="line"><span class="attribute">str2</span> = <span class="string">"abb"</span><span class="comment">;</span></span><br><span class="line">if(str1 &gt; str2) puts(<span class="string">"1"</span>)<span class="comment">;</span></span><br><span class="line">//输出结果 <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>没错，你没看错！！就是直接比较大小。。<br><code>持续更新string 功能</code></p><h2 id="stringstream的用法："><a href="#stringstream的用法：" class="headerlink" title="stringstream的用法："></a>stringstream的用法：</h2><p>stringstream是 C++ 提供的另一个字串型的串流(stream)物件，和之前学过的iostream、fstream有类似的操作方式。要使用stringstream， 必须先加入这一行：</p><p>#include<sstream><br>stringstream主要是用在將一个字符串分割，可以先用.clear( )以及.str( )將指定字串设定成一开始的內容，再用&gt;&gt;把个別的资料输出。</sstream></p><p>Eg:<br>題目：输入的第一行有一个数字 N 代表接下來有 N 行资料，每一行资料里有不固定个数的整数(最多20个，每行最大200个字元)，编程將每行的总和打印出來。<br>输入：<br>3<br>1 2 3<br>20 17 23 54 77 60<br>111 222 333 444 555 666 777 888 999<br>输出：<br>6<br>251<br>4995<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    getline(<span class="built_in">cin</span>, s);  <span class="comment">//读取换行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>, s);</span><br><span class="line">        ss.clear();</span><br><span class="line">        ss.str(s);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            ss &gt;&gt; a;</span><br><span class="line">            <span class="keyword">if</span>(ss.fail())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            sum += a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用stringstream简化类型转换<br>C++标准库中的<sstream>提供了比ANSI C的&lt;stdio.h&gt;更高级的一些功能，即单纯性、类型安全和可扩展性。接下来，我将举例说明怎样使用这些库来实现安全和自动的类型转换。<br>Eg:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">"%d"</span>, n);</span><br><span class="line">    <span class="comment">//s中的内容为“10000”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//到目前为止看起来还不错。但是，对上面代码的一个微小的改变就会使程序发生错误</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">"%f"</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误的格式化符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></sstream></p><p><code>详细学习链接</code>：<br><a href="http://blog.csdn.net/zhang_xueping/article/details/47846807" target="_blank" rel="noopener">http://blog.csdn.net/zhang_xueping/article/details/47846807</a><br><a href="http://blog.csdn.net/u014097230/article/details/52089530" target="_blank" rel="noopener">http://blog.csdn.net/u014097230/article/details/52089530</a></p><h2 id="优先队列—自动排序！！！"><a href="#优先队列—自动排序！！！" class="headerlink" title="优先队列—自动排序！！！"></a>优先队列—自动排序！！！</h2><p>说道优先队列就必须提一句<br>优先队列别有back()操作，并且第一个元素不是用front()而是top()，，，front()是队列的<br>优先队列是一种特殊的队列，在学习堆排序的时候就有所了解。<br><a href="https://blog.csdn.net/c20182030/article/details/52727101" target="_blank" rel="noopener">堆排序</a></p><h2 id="奇偶剪枝"><a href="#奇偶剪枝" class="headerlink" title="奇偶剪枝"></a>奇偶剪枝</h2><p><a href="https://www.cnblogs.com/wkfvawl/p/9337156.html" target="_blank" rel="noopener">点这里</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:33 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;学习就该如贪心！！一直向前-！&quot;&gt;&lt;a href=&quot;#学习就该如贪心！！一直向前-！&quot; class=&quot;headerlink&quot; title=&quot;学习就该如贪心！！一直向前~！&quot;&gt;&lt;/a&gt;&lt;center&gt;学习就该如贪心！！一直向前~！&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;记录一些会用到并且好用的函数&lt;br&gt;或者是容易混淆的知识点&lt;br&gt;&lt;code&gt;持续更新&lt;/code&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/ACM/Algorithm/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://yoursite.com/2019/08/26/Linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/08/26/Linux命令/</id>
    <published>2019-08-26T12:38:39.433Z</published>
    <updated>2019-08-26T13:11:51.132Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --><h1 id="Linux的一些常用命令整理"><a href="#Linux的一些常用命令整理" class="headerlink" title="Linux的一些常用命令整理"></a><center>Linux的一些常用命令整理</center></h1><p><center>也方便自己以后查询</center></p><a id="more"></a><p><a href="https://www.runoob.com/w3cnote/linux-common-command-2.html" target="_blank" rel="noopener">详情链接</a></p><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><blockquote><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。</p></blockquote><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>用于新建一个新目录</p><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><p>显示当前工作目录</p><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><p>切换文件路径,cd将给定的文件夹(或者目录)设置成当前工作目录<br>eg:</p><blockquote><p>cd desktop</p></blockquote><h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><p>删除给定目录<br>eg:</p><blockquote><p>mkdir test<br>rmdir test</p></blockquote><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><p>删除给定的文件</p><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>对文件进行复制</p><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>对文件或者文件夹进行移动，如果文件或者文件夹存在于当前工作目录，还可以对文件或者文件夹重新命名</p><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>用于标准输出(监控器或者屏幕)上查看文件内容</p><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>默认在标准输出上显示给定文件的最后10行内容，可以使用tail -n N 指定在标准输出上显示文件的最后N行内容。</p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>按页或按窗口打印文件内容。在查看包含大量文本数据的大文件时是非常有用和高效的。你可以使用Ctrl+F向前翻页，Ctrl+B向后翻页。</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>在给定的文件中搜寻指定的字符串。grep -i “” 在搜寻时会忽略字符串的大小写，而grep -r “” 则会在当前工作目录的文件中递归搜寻指定的字符串。</p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>这个命令会在给定位置搜寻与条件匹配的文件。你可以使用find -name 的-name选项来进行区分大小写的搜寻，find -iname 来进行不区分大小写的搜寻。</p><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>命令能创建、查看和提取tar压缩文件。tar -cvf 是创建对应压缩文件，tar -tvf 来查看对应压缩文件，tar -xvf 来提取对应压缩文件。</p><h2 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h2><p>命令创建和提取gzip压缩文件，还可以用gzip -d 来提取压缩文件。</p><h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p>会在终端列出所有可用的命令,可以使用任何命令的-h或-help选项来查看该命令的具体用法。图就省略啦，会有详细列表显示出来的。</p><h2 id="whatis"><a href="#whatis" class="headerlink" title="whatis"></a>whatis</h2><p>会用单行来描述给定的命令，就是解释当前命令。</p><h2 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h2><p>用于结束当前的终端会话。</p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>通过发送数据包ping远程主机(服务器)，常用与检测网络连接和服务器状态。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 09 2020 10:05:32 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Linux的一些常用命令整理&quot;&gt;&lt;a href=&quot;#Linux的一些常用命令整理&quot; class=&quot;headerlink&quot; title=&quot;Linux的一些常用命令整理&quot;&gt;&lt;/a&gt;&lt;center&gt;Linux的一些常用命令整理&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;也方便自己以后查询&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="常用命令" scheme="http://yoursite.com/categories/Linux/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="兴趣" scheme="http://yoursite.com/tags/%E5%85%B4%E8%B6%A3/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
