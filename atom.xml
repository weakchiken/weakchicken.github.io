<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dou Qing</title>
  
  <subtitle>~人间有万紫千红~&lt;br&gt;~唯你是我情之所钟~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-18T15:38:10.143Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>集训中学到的方法</title>
    <link href="http://yoursite.com/2019/08/30/%E9%9B%86%E8%AE%AD%E4%B8%AD%E5%AD%A6%E5%88%B0%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/30/集训中学到的方法/</id>
    <published>2019-08-29T16:00:00.000Z</published>
    <updated>2019-08-18T15:38:10.143Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --><h1 id="学习就该如贪心！！一直向前-！"><a href="#学习就该如贪心！！一直向前-！" class="headerlink" title="学习就该如贪心！！一直向前~！"></a><center>学习就该如贪心！！一直向前~！</center></h1><p><center>记录一些会用到并且好用的函数<br>或者是容易混淆的知识点<br><code>持续更新</code><br><a id="more"></a></center></p><p>有关acm中精度的问题：<br><a href="https://www.cnblogs.com/crazyacking/p/4668471.html" target="_blank" rel="noopener">https://www.cnblogs.com/crazyacking/p/4668471.html</a></p><h2 id="STL的定义方式："><a href="#STL的定义方式：" class="headerlink" title="STL的定义方式："></a>STL的定义方式：</h2><p>set/stack/queue/vector &lt;int/string&gt; 定义名称；<br><code>set</code>有自动排序的功能(从小到大)</p><blockquote><p>set里面用的是平衡二叉搜索树（也就是红黑树）维护</p></blockquote><p>string 字符串名称；<br>map&lt;string/int, int/string&gt; 名称；</p><h3 id="set的迭代器："><a href="#set的迭代器：" class="headerlink" title="set的迭代器："></a>set的迭代器：</h3><p>set<int>:: iterator it;<br>这个it是为指针用法<br>eg：<br>it = st.begin();<br>cout &lt;&lt; <em>it;<br>it ++;<br>for(; it != st.end(); it ++)<br>{<br>cout &lt;&lt; “ “ &lt;&lt; </em>it;<br>}</int></p><h3 id="map的迭代器："><a href="#map的迭代器：" class="headerlink" title="map的迭代器："></a>map的迭代器：</h3><p>map&lt;string, int&gt; :: iterator mp;<br>这个mp用法要用mp -&gt; first 或者mp -&gt; second 来表示<br>eg：<br>map&lt;string, int&gt; :: iterator it1;<br>map&lt;string, node&gt; :: iterator it2;<br>for(it2 = mp.begin(); it2 != mp.end(); it2 ++)<br>{<br>cout &lt;&lt; it2 -&gt; first &lt;&lt; endl;<br>for(it1 = mp[it2 -&gt; first].count.begin(); it1 != mp[it2 -&gt; first].count.end(); it1 ++)<br>{<br>cout &lt;&lt; “|—-“ &lt;&lt; it1 -&gt; first &lt;&lt; “(“ &lt;&lt; it1 -&gt; second &lt;&lt; “)” &lt;&lt; endl;<br>}<br>}</p><h3 id="嵌套map用法可以为"><a href="#嵌套map用法可以为" class="headerlink" title="嵌套map用法可以为"></a>嵌套map用法可以为</h3><p>struct node{<br>map&lt;string, int&gt; count;<br>};</p><p>map&lt;string, node&gt; mp;</p><p>用的时候为：mp[string].count[string] ++;或者一些操作</p><h2 id="二分查找–binary-search的用法"><a href="#二分查找–binary-search的用法" class="headerlink" title="二分查找–binary_search的用法"></a>二分查找–binary_search的用法</h2><p>头文件 <code>#include &lt;algorithm&gt;</code></p><p>使用方法：<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>.函数模板：binary_search(arr[],arr[]+size ,  indx)</span><br><span class="line"><span class="selector-tag">b</span>.参数说明：</span><br><span class="line">    arr[]： 数组首地址</span><br><span class="line">    size：数组元素个数</span><br><span class="line">    indx:需要查找的值</span><br><span class="line">c.函数功能：  在数组中以二分法检索的方式查找，若在数组(要求数组元素非递减)中查找到indx元素则真，若查找不到则返回值为假。</span><br></pre></td></tr></table></figure><p></p><h3 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h3><p>查找第一个大于或等于某个元素的位置<br>使用方法：<br></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">a</span>.函数模板：lower_bound(arr[],arr[]+size ,  indx):</span><br><span class="line">b.参数说明：</span><br><span class="line">    arr[]： 数组首地址</span><br><span class="line">    size：数组元素个数</span><br><span class="line">    indx:需要查找的值</span><br><span class="line">c.函数功能:函数lower_bound()在<span class="keyword">first</span>和<span class="keyword">last</span>中的前闭后开区间进行二分查找，返回大于或等于val的第一个元素位置(注意是地址)。如果所有元素都小于val，则返回<span class="keyword">last</span>的位置</span><br><span class="line">d.举例如下：</span><br><span class="line">　　一个数组<span class="built_in">number</span>序列为：<span class="number">4</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">30</span>,<span class="number">69</span>,<span class="number">70</span>,<span class="number">96</span>,<span class="number">100.</span>设要插入数字<span class="number">3</span>,<span class="number">9</span>,<span class="number">111.</span>pos为要插入的位置的下标，则</span><br><span class="line">　　<span class="comment">/*注意因为返回值是一个指针，所以减去数组的指针就是int变量了*/</span></span><br><span class="line">　　pos = lower_bound( <span class="built_in">number</span>, <span class="built_in">number</span> + <span class="number">8</span>, <span class="number">3</span>) - <span class="built_in">number</span>，pos = <span class="number">0.</span>即<span class="built_in">number</span>数组的下标为<span class="number">0</span>的位置。</span><br><span class="line">　　pos = lower_bound( <span class="built_in">number</span>, <span class="built_in">number</span> + <span class="number">8</span>, <span class="number">9</span>) - <span class="built_in">number</span>， pos = <span class="number">1</span>，即<span class="built_in">number</span>数组的下标为<span class="number">1</span>的位置（即<span class="number">10</span>所在的位置）。</span><br><span class="line">　　pos = lower_bound( <span class="built_in">number</span>, <span class="built_in">number</span> + <span class="number">8</span>, <span class="number">111</span>) - <span class="built_in">number</span>， pos = <span class="number">8</span>，即<span class="built_in">number</span>数组的下标为<span class="number">8</span>的位置（但下标上限为<span class="number">7</span>，所以返回最后一个元素的下一个元素）。</span><br><span class="line">e.注意：函数lower_bound()在<span class="keyword">first</span>和<span class="keyword">last</span>中的前闭后开区间进行二分查找，返回大于或等于val的第一个元素位置。如果所有元素都小于val，则返回<span class="keyword">last</span>的位置，且<span class="keyword">last</span>的位置是越界的！</span><br></pre></td></tr></table></figure><p></p><h3 id="upper-bound-查找第一个大于某个位置的元素的位置"><a href="#upper-bound-查找第一个大于某个位置的元素的位置" class="headerlink" title="upper_bound: 查找第一个大于某个位置的元素的位置"></a>upper_bound: 查找第一个大于某个位置的元素的位置</h3><p>使用方法：<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>.函数模板：<span class="selector-tag">upper_bound</span>(arr[],arr[]+size ,  indx):</span><br><span class="line"><span class="selector-tag">b</span>.参数说明：</span><br><span class="line">    <span class="selector-tag">arr</span><span class="selector-attr">[]</span>： 数组首地址</span><br><span class="line">    <span class="selector-tag">size</span>：数组元素个数</span><br><span class="line">    <span class="selector-tag">indx</span>:需要查找的值</span><br><span class="line"><span class="selector-tag">c</span>.函数功能：函数<span class="selector-tag">upper_bound</span>()返回的在前闭后开区间查找的关键字的上界，返回大于<span class="selector-tag">val</span>的第一个元素位置</span><br><span class="line">　　例如：一个数组<span class="selector-tag">number</span>序列<span class="selector-tag">1</span>,<span class="selector-tag">2</span>,<span class="selector-tag">2</span>,<span class="selector-tag">4</span><span class="selector-class">.upper_bound</span>(<span class="number">2</span>)后，返回的位置是<span class="selector-tag">3</span>（下标）也就是<span class="selector-tag">4</span>所在的位置,同样，如果插入元素大于数组中全部元素，返回的是<span class="selector-tag">last</span>。(注意：数组下标越界)</span><br><span class="line">　　返回查找元素的最后一个可安插位置，也就是“元素值&gt;查找值”的第一个元素的位置 。</span><br></pre></td></tr></table></figure><p></p><h2 id="unique函数"><a href="#unique函数" class="headerlink" title="unique函数"></a>unique函数</h2><p>类属性算法unique的作用是从输入序列中“删除”所有相邻的重复元素。</p><p>该算法删除相邻的重复元素，然后重新排列输入范围内的元素，并且返回一个迭代器（容器的长度没变，只是元素顺序改变了），表示无重复的值范围得结束。<br></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sort words alphabetically so we can find the duplicates</span></span><br><span class="line"><span class="built_in">sort</span>(words.<span class="built_in">begin</span>(), words.<span class="keyword">end</span>());</span><br><span class="line"> <span class="built_in">vector</span>&lt;<span class="keyword">string</span>&gt;::iterator end_unique =  <span class="built_in">unique</span>(words.<span class="built_in">begin</span>(), words.<span class="keyword">end</span>());</span><br><span class="line"> words.erase(end_unique, words.end());</span><br></pre></td></tr></table></figure><p></p><p>在STL中unique函数是一个去重函数， unique的功能是去除相邻的重复元素(只保留一个),其实它并不真正把重复的元素删除，是把重复的元素移到后面去了，然后依然保存到了原数组中，然后 返回去重后最后一个元素的地址，因为unique去除的是相邻的重复元素，所以一般用之前都会要排一下序。<br>若调用sort后，vector的对象的元素按次序排列如下：<br>sort jumps over quick red red slow the the turtle<br><img src="https://i.loli.net/2019/08/12/24TpqaLng3NoZWU.png" alt="下载.png"><br>注意，words的大小并没有改变，依然保存着10个元素；只是这些元素的顺序改变了。调用unique“删除”了相邻的重复值。给“删除”加上引号是因为unique实际上并没有删除任何元素，而是将无重复的元素复制到序列的前段，从而覆盖相邻的重复元素。unique返回的迭代器指向超出无重复的元素范围末端的下一个位置。</p><p>注意：算法不直接修改容器的大小。如果需要添加或删除元素，则必须使用容器操作。<br>Eg:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"> <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"Illustrating the generic unique algorithm."&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">11</span>;</span><br><span class="line">    <span class="keyword">int</span> array1[N]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vector1;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">        vector1.push_back(array1[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator new_end;</span><br><span class="line">    new_end=unique(vector1.begin(),vector1.end());    <span class="comment">//"删除"相邻的重复元素</span></span><br><span class="line">    assert(vector1.size()==N);</span><br><span class="line"></span><br><span class="line">    vector1.erase(new_end,vector1.end());  <span class="comment">//删除（真正的删除）重复的元素</span></span><br><span class="line">    copy(vector1.begin(),vector1.end(),ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">cout</span>,<span class="string">" "</span>));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="gcd的前缀后缀维护"><a href="#gcd的前缀后缀维护" class="headerlink" title="gcd的前缀后缀维护"></a>gcd的前缀后缀维护</h2><p>说到gcd,就不得不提一下<br>C++11中子代有内置gcd函数,用法是 __gcd(a, b);</p><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6025" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6025</a></p><p><code>持续更新</code><br>PS:暂时不会讲解，先看代码吧，等以后理解透了在讲解<br>code:<br></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cmath&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstring&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">int</span> gcd(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line"><span class="keyword">if</span>(a&lt;b)&#123;</span><br><span class="line"><span class="keyword">int</span> t=a;</span><br><span class="line">a=b;b=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000005</span>],<span class="string">q[1000005]</span>,h[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> main()&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">memset(<span class="keyword">q</span>,<span class="number">0</span>,sizeof(<span class="keyword">q</span>));</span><br><span class="line">memset(h,<span class="number">0</span>,sizeof(h));</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">q[0]</span>=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="string">q[i]</span>=gcd(<span class="string">q[i-1]</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">h[n-<span class="number">1</span>]=a[n-<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=n-<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">h[i]=gcd(h[i+<span class="number">1</span>],a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=max(<span class="string">q[n-2]</span>,h[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">ans=max(ans,gcd(<span class="string">q[i-1]</span>,h[i+<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="C-中auto的用法"><a href="#C-中auto的用法" class="headerlink" title="C++中auto的用法"></a>C++中auto的用法</h2><h3 id="C-98-auto"><a href="#C-98-auto" class="headerlink" title="C++98 auto"></a>C++98 auto</h3><p>早在C++98标准中就存在了auto关键字，那时的auto用于声明变量为自动变量，自动变量意为拥有自动的生命期，这是多余的，因为就算不使用auto声明，变量依旧拥有自动的生命期：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a =<span class="number">10</span> ;  <span class="comment">//拥有自动生命期</span></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">int</span> b = <span class="number">20</span> ;<span class="comment">//拥有自动生命期</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">30</span> ;<span class="comment">//延长了生命期</span></span><br></pre></td></tr></table></figure><p></p><p>C++98中的auto多余且极少使用，C++11已经删除了这一用法，取而代之的是全新的auto：变量的自动类型推断。</p><h3 id="C-11-auto"><a href="#C-11-auto" class="headerlink" title="C++11 auto"></a>C++11 auto</h3><p>auto可以在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型，类似的关键字还有decltype。举个例子：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">auto</span> au_a = a;<span class="comment">//自动类型推断，au_a为int类型</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(au_a).name() &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p></p><p>typeid运算符可以输出变量的类型。程序的运行结果输出了<br>int<br>这种用法就类似于C#中的var关键字。auto的自动类型推断发生在编译期，所以使用auto并不会造成程序运行时效率的降低。而是否会造成编译期的时间消耗，我认为是不会的，在未使用auto时，编译器也需要得知右操作数的类型，再与左操作数的类型进行比较，检查是否可以发生相应的转化，是否需要进行隐式类型转换。</p><h3 id="为什么用auto"><a href="#为什么用auto" class="headerlink" title="为什么用auto:"></a>为什么用auto:</h3><p>用于代替冗长复杂、变量使用范围专一的变量声明。<br>想象一下在没有auto的时候，我们操作标准库时经常需要这样：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator i = vs.begin(); i != vs.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用auto 可以简化代码:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vs;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = vs.begin(); i != vs.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="pair的用法"><a href="#pair的用法" class="headerlink" title="pair的用法"></a>pair的用法</h2><h3 id="pair的应用"><a href="#pair的应用" class="headerlink" title="pair的应用"></a>pair的应用</h3><p>pair是将2个数据组合成一组数据，当需要这样的需求时就可以使用pair，如stl中的map就是将key和value放在一起来保存。<br>另一个应用是，当一个函数需要返回2个数据的时候，可以选择pair。 pair的实现是一个结构体，主要的两个成员变量是first second 因为是使用struct不是class，所以可以直接使用pair的成员变量。<br></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;T1, T2&gt; p1;            //创建一个空的pair对象（使用默认构造），它的两个元素分别是T1和T2类型，采用值初始化。</span><br><span class="line">pair&lt;T1, T2&gt; p1(v1, v2);    //创建一个pair对象，它的两个元素分别是T1和T2类型，其中first成员初始化为v1，second成员初始化为v2。</span><br><span class="line">make_pair(v1, v2);          // 以v1和v2的值创建一个新的pair对象，其元素类型分别是v1和v2的类型。</span><br><span class="line">p1 &lt; p2;                    // 两个pair对象间的小于运算，其定义遵循字典次序：如 p1.first &lt; p2.first 或者 !(p2.first &lt; p1.first) &amp;&amp; (p1.second &lt; p2.second) 则返回true。</span><br><span class="line">p1 == p2；                  // 如果两个对象的first和second依次相等，则这两个对象相等；该运算使用元素的==操作符。</span><br><span class="line">p1.first;                   // 返回对象p1中名为first的公有数据成员</span><br><span class="line">p1.second;                 // 返回对象p1中名为second的公有数据成员</span><br></pre></td></tr></table></figure><p></p><h3 id="pair的创建和初始化"><a href="#pair的创建和初始化" class="headerlink" title="pair的创建和初始化"></a>pair的创建和初始化</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pair</span>包含两个数值，与容器一样，<span class="built_in">pair</span>也是一种模板类型。但是又与之前介绍的容器不同；</span><br><span class="line">在创建<span class="built_in">pair</span>对象时，必须提供两个类型名，两个对应的类型名的类型不必相同</span><br><span class="line"></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; anon;        <span class="comment">// 创建一个空对象anon，两个元素类型都是string</span></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, int&gt; word_count;     <span class="comment">// 创建一个空对象 word_count, 两个元素类型分别是string和int类型</span></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, vector&lt;int&gt; &gt; line;  <span class="comment">// 创建一个空对象line，两个元素类型分别是string和vector类型</span></span><br><span class="line"></span><br><span class="line">当然也可以在定义时进行成员初始化：</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; author(<span class="string">"James"</span>,<span class="string">"Joy"</span>);    <span class="comment">// 创建一个author对象，两个元素类型分别为string类型，并默认初始值为James和Joy。</span></span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, int&gt; name_age(<span class="string">"Tom"</span>, <span class="string">"18"</span>);</span><br><span class="line"><span class="built_in">pair</span>&lt;<span class="built_in">string</span>, int&gt; name_age2(name_age);    <span class="comment">// 拷贝构造初始化</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pair类型的使用相当的繁琐，如果定义多个相同的pair类型对象，可以使用<span class="keyword">typedef</span>简化声明：</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; Author;</span><br><span class="line"><span class="function">Author <span class="title">proust</span><span class="params">(<span class="string">"March"</span>,<span class="string">"Proust"</span>)</span></span>;</span><br><span class="line"><span class="function">Author <span class="title">Joy</span><span class="params">(<span class="string">"James"</span>,<span class="string">"Joy"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">变量间赋值：</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p1(<span class="number">1</span>, <span class="number">1.2</span>);</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p2 = p1;     <span class="comment">//operator =</span></span><br></pre></td></tr></table></figure><h2 id="pair对象的操作"><a href="#pair对象的操作" class="headerlink" title="pair对象的操作"></a>pair对象的操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span> ,<span class="keyword">double</span>&gt; p1;</span><br><span class="line">p1.first = <span class="number">1</span>;</span><br><span class="line">p1.second = <span class="number">2.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p1.first&lt;&lt;<span class="string">' '</span>&lt;&lt;p1.second&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：1 2.5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> firstBook;</span><br><span class="line"><span class="keyword">if</span>(author.first==<span class="string">"James"</span> &amp;&amp; author.second==<span class="string">"Joy"</span>)</span><br><span class="line">    firstBook=<span class="string">"Stephen Hero"</span>;</span><br></pre></td></tr></table></figure><h2 id="生成新的pair对象"><a href="#生成新的pair对象" class="headerlink" title="生成新的pair对象"></a>生成新的pair对象</h2><p>还可以利用make_pair创建新的pair对象：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">double</span>&gt; p1;</span><br><span class="line">p1 = make_pair(<span class="number">1</span>, <span class="number">1.2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p1.first &lt;&lt; p1.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output: 1 1.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">8</span>;</span><br><span class="line"><span class="built_in">string</span> m = <span class="string">"James"</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; newone;</span><br><span class="line"></span><br><span class="line">newone = make_pair(a, m);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; newone.first &lt;&lt; newone.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output: 8 James</span></span><br></pre></td></tr></table></figure><p></p><h2 id="通过tie获取pair元素值"><a href="#通过tie获取pair元素值" class="headerlink" title="通过tie获取pair元素值"></a>通过tie获取pair元素值</h2><p>在某些清况函数会以pair对象作为返回值时，可以直接通过std::tie进行接收。比如：<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::pair&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; getPreson() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::make_pair(<span class="string">"Sven"</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> ages;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::tie(name, ages) = getPreson();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"name: "</span> &lt;&lt; name &lt;&lt; <span class="string">", ages: "</span> &lt;&lt; ages &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="有关字符串的一些用法"><a href="#有关字符串的一些用法" class="headerlink" title="有关字符串的一些用法"></a>有关字符串的一些用法</h2><p>1.isalpha(c) ~判断是否为英文字符<br>2.tolower(c) ~将字符转换成小写<br>3.字符串输入sstream<br>4.将字符串分割成单词：<br>stringstream temp(str); //分割成一个个单词<br>5.将字符串插入进set中，自动排序~</p><h2 id="string的用法"><a href="#string的用法" class="headerlink" title="string的用法"></a>string的用法</h2><p>提到字符串就必须提一句string,这个是真的好用！！！！</p><p>简洁明了string 的用法和 int 基本上没啥差别，也就是定义的类型不同，string功能多一点罢了(string毕竟是字符串嘛)</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string <span class="keyword">str</span>;</span><br><span class="line">string <span class="keyword">str</span>[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">str</span> = <span class="string">"aaa"</span>;<span class="comment">//直接赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">cin &gt;&gt; <span class="keyword">str</span>[i];<span class="comment">//输入赋值</span></span><br></pre></td></tr></table></figure><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>说起来比较就更令人发指了！！！<br>不知道比起来某个char方便多少呢。<br></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">str1</span> = <span class="string">"abc"</span><span class="comment">;</span></span><br><span class="line"><span class="attribute">str2</span> = <span class="string">"abb"</span><span class="comment">;</span></span><br><span class="line">if(str1 &gt; str2) puts(<span class="string">"1"</span>)<span class="comment">;</span></span><br><span class="line">//输出结果 <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>没错，你没看错！！就是直接比较大小。。<br><code>持续更新string 功能</code></p><h2 id="stringstream的用法："><a href="#stringstream的用法：" class="headerlink" title="stringstream的用法："></a>stringstream的用法：</h2><p>stringstream是 C++ 提供的另一个字串型的串流(stream)物件，和之前学过的iostream、fstream有类似的操作方式。要使用stringstream， 必须先加入这一行：</p><p>#include<sstream><br>stringstream主要是用在將一个字符串分割，可以先用.clear( )以及.str( )將指定字串设定成一开始的內容，再用&gt;&gt;把个別的资料输出。</sstream></p><p>Eg:<br>題目：输入的第一行有一个数字 N 代表接下來有 N 行资料，每一行资料里有不固定个数的整数(最多20个，每行最大200个字元)，编程將每行的总和打印出來。<br>输入：<br>3<br>1 2 3<br>20 17 23 54 77 60<br>111 222 333 444 555 666 777 888 999<br>输出：<br>6<br>251<br>4995<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">stringstream</span> ss;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    getline(<span class="built_in">cin</span>, s);  <span class="comment">//读取换行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>, s);</span><br><span class="line">        ss.clear();</span><br><span class="line">        ss.str(s);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            ss &gt;&gt; a;</span><br><span class="line">            <span class="keyword">if</span>(ss.fail())</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            sum += a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用stringstream简化类型转换<br>C++标准库中的<sstream>提供了比ANSI C的&lt;stdio.h&gt;更高级的一些功能，即单纯性、类型安全和可扩展性。接下来，我将举例说明怎样使用这些库来实现安全和自动的类型转换。<br>Eg:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">"%d"</span>, n);</span><br><span class="line">    <span class="comment">//s中的内容为“10000”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//到目前为止看起来还不错。但是，对上面代码的一个微小的改变就会使程序发生错误</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">"%f"</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误的格式化符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></sstream></p><p><code>详细学习链接</code>：<br><a href="http://blog.csdn.net/zhang_xueping/article/details/47846807" target="_blank" rel="noopener">http://blog.csdn.net/zhang_xueping/article/details/47846807</a><br><a href="http://blog.csdn.net/u014097230/article/details/52089530" target="_blank" rel="noopener">http://blog.csdn.net/u014097230/article/details/52089530</a></p><h2 id="优先队列—自动排序！！！"><a href="#优先队列—自动排序！！！" class="headerlink" title="优先队列—自动排序！！！"></a>优先队列—自动排序！！！</h2><p>说道优先队列就必须提一句<br>优先队列别有back()操作，并且第一个元素不是用front()而是top()，，，front()是队列的<br>优先队列是一种特殊的队列，在学习堆排序的时候就有所了解。<br><a href="https://blog.csdn.net/c20182030/article/details/52727101" target="_blank" rel="noopener">堆排序</a></p><h2 id="奇偶剪枝"><a href="#奇偶剪枝" class="headerlink" title="奇偶剪枝"></a>奇偶剪枝</h2><p><a href="https://www.cnblogs.com/wkfvawl/p/9337156.html" target="_blank" rel="noopener">点这里</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;学习就该如贪心！！一直向前-！&quot;&gt;&lt;a href=&quot;#学习就该如贪心！！一直向前-！&quot; class=&quot;headerlink&quot; title=&quot;学习就该如贪心！！一直向前~！&quot;&gt;&lt;/a&gt;&lt;center&gt;学习就该如贪心！！一直向前~！&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;&lt;center&gt;记录一些会用到并且好用的函数&lt;br&gt;或者是容易混淆的知识点&lt;br&gt;&lt;code&gt;持续更新&lt;/code&gt;&lt;br&gt;&lt;/center&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/ACM/Algorithm/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>装逼神器之atom</title>
    <link href="http://yoursite.com/2019/08/22/Atom/"/>
    <id>http://yoursite.com/2019/08/22/Atom/</id>
    <published>2019-08-21T16:00:00.000Z</published>
    <updated>2019-08-22T16:36:22.056Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h1><p>本篇主要介绍一下好用的编译器-&gt;atom</p><a id="more"></a><h2 id="下载atom"><a href="#下载atom" class="headerlink" title="下载atom"></a>下载atom</h2><p><a href="https://atom.io/" target="_blank" rel="noopener">安装链接</a><br>下载完成就好了</p><h2 id="配置atom"><a href="#配置atom" class="headerlink" title="配置atom"></a>配置atom</h2><p>下载完成之后你可能会一脸懵逼<br>但是没关系，我已经经历过的东西当然不可能让正在看的你也经历这种事情，嘿嘿嘿</p><p>首先点击左上角的File，找到settings.进去，点到install里面<br>接下来就是我们的为所欲为了</p><blockquote><p>PS：你要知道一点的是：atom是文本编译器，不要想着什么东西都给你配置好了,atom的美观度取决于你在这上面下了多少工夫</p></blockquote><blockquote><p>好的，废话不多说，直接上一些我认为比较好的插件</p></blockquote><blockquote><p>插入一下，如果不想看配置gcc就直接跳过下面这一阶段就好</p></blockquote><h2 id="配置gcc-g"><a href="#配置gcc-g" class="headerlink" title="配置gcc/g++"></a>配置gcc/g++</h2><h3 id="用到的软件"><a href="#用到的软件" class="headerlink" title="用到的软件"></a>用到的软件</h3><p><a href="https://osdn.net/projects/mingw/releases/" target="_blank" rel="noopener">下载链接</a><br><img src="https://i.loli.net/2019/08/23/a1BzKqJschpHMui.png" alt="1.png"><br>然后就进去这个<a href="https://cdreamer.cn/2019/08/22/Atom%E9%85%8D%E7%BD%AEgcc%E7%8E%AF%E5%A2%83/#more" target="_blank" rel="noopener">地方</a>看如何配置环境，在此就不多写了</p><p>配置完后(注意一定要先配置完环境)</p><h3 id="gcc插件"><a href="#gcc插件" class="headerlink" title="gcc插件"></a>gcc插件</h3><p>一共有<code>linter-gcc</code>,<code>linter</code>,<code>gcc-make-run</code>三个插件</p><p>去settings,然后install，搜索<code>linter-gcc</code>和<code>linter</code>安装</p><blockquote><p>PS:如果没有安装成功，多试验几次就好</p></blockquote><p>然后进入packages里面找到刚刚安装好的<code>linter-gcc</code>，进入这个插件的settings,将路径(带Path的一遍表示路径)改为<code>g++</code>或者<code>gcc</code>(如果环境没有配置好，你就gg了)，勾选<code>Lint on-the-fly</code>这句表示在书写的同时进行编译(如果不勾选的话，只有在保存的时候才会编译)</p><p>OK了，这个时候在安装一个可以让我们编写的代码能够运行的插件就大功告成了,老办法，安装<code>gcc-make-run</code>，安装完，按F6就OK了</p><h2 id="该介绍装逼的插件了"><a href="#该介绍装逼的插件了" class="headerlink" title="该介绍装逼的插件了"></a>该介绍装逼的插件了</h2><p><code>Activate Power Mode</code>:写代码效果很好(亲测)，安装完就能用<br><code>minimap</code>:用过subline的应该都知道这个吧,不知道也没事,就是给一个缩小版的代码<br><code>Emmet</code>:Web开发者必不可少的工具，都说是神器<br><code>color-picker</code>：取色器<br><code>atom-html-preview</code>:实时预览HTML页面<br><code>language-JavaScript-jsx</code>:支持JSX语法<br><code>vim-mode</code>:用过vim的都知道好,基本实现了大部分的功能,不过造成许多快捷键冲突，这也是其他编辑器不具备的功能<br></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git-plus:</span><br><span class="line">git的插件与Sublime Text 的sublimegit功能基本一致,命令控制面板快捷键</span><br><span class="line">MacOS快捷键：<span class="built_in">Cmd</span>+<span class="built_in">Shift</span>+H</span><br><span class="line">Windows + Linux快捷键：Ctrl+<span class="built_in">Shift</span>+H</span><br></pre></td></tr></table></figure><p></p><p><code>file-icons</code>:让文件前面边好看点的图片<br><code>docblockr</code>:方便写代码注释<br><code>autocomplete-plus</code>:当输入的时候，提供可能的候选项<br><code>simplified-chinese-menu</code>:ATOM的汉化插件<br><code>atom-beautify</code>:代码格式一键美化<br><code>last-cursor-position</code>:光标自由切换到上一次/下一次编辑位置<br><code>markdown-preview-plus</code>:markdown预览<br><code>quick-highlight</code>:代码高亮<br><code>advanced-open-file</code>:快速的打开文件或新建文件，同时支持路径补全<br><code>regex-railroad-diagram</code>:正则表达式图形化<br><code>autocomplete-paths</code>:填写路径的时候有提示</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Atom&quot;&gt;&lt;a href=&quot;#Atom&quot; class=&quot;headerlink&quot; title=&quot;Atom&quot;&gt;&lt;/a&gt;Atom&lt;/h1&gt;&lt;p&gt;本篇主要介绍一下好用的编译器-&amp;gt;atom&lt;/p&gt;
    
    </summary>
    
      <category term="资源" scheme="http://yoursite.com/categories/%E8%B5%84%E6%BA%90/"/>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E8%B5%84%E6%BA%90/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="资源" scheme="http://yoursite.com/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="兴趣" scheme="http://yoursite.com/tags/%E5%85%B4%E8%B6%A3/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>atom配置gcc环境</title>
    <link href="http://yoursite.com/2019/08/22/Atom%E9%85%8D%E7%BD%AEgcc%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/08/22/Atom配置gcc环境/</id>
    <published>2019-08-21T16:00:00.000Z</published>
    <updated>2019-08-22T16:28:31.035Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h1><p>本篇主要介绍一下atom关于gcc的配置</p><a id="more"></a><h2 id="安装gcc-g"><a href="#安装gcc-g" class="headerlink" title="安装gcc/g++"></a>安装gcc/g++</h2><p>win7或者win10，在前面都是一样的，首先去官网下载mingw-get-setup.exe<br><a href="https://osdn.net/projects/mingw/releases/" target="_blank" rel="noopener">下载链接</a><br>如图，点击这个下载即可。<br><img src="https://i.loli.net/2019/08/23/a1BzKqJschpHMui.png" alt="1.png"></p><p>下载之后直接打开会出现下面这样<br><img src="https://i.loli.net/2019/08/23/GrSXbB7yWUiwfIm.png" alt="2.png"></p><p>下面这一步想改路径的可以该路径，不想改的直接无脑continue或者next就行了，如果改变了路径，要记住改到哪里了，后面要用到</p><p><img src="https://i.loli.net/2019/08/23/sioxY5TLQ7bc2mn.png" alt="3.png"></p><p>等待安装</p><p><img src="https://i.loli.net/2019/08/23/TtePcJkwNAHDEij.png" alt="4.png"></p><p>安装完下面的窗口会自动弹出来，按照步骤安装即可</p><p><img src="https://i.loli.net/2019/08/23/VZUzamrY1yIKPgh.png" alt="5.png"></p><p><img src="https://i.loli.net/2019/08/23/m57Uv89n4C1WoR3.png" alt="6.png"></p><p><img src="https://i.loli.net/2019/08/23/yfDMLSpJheizdH2.png" alt="7.png"></p><p>win7的话，按下面步骤安装，win10的话往下面看</p><p><img src="https://i.loli.net/2019/08/23/jWEZmDwgJnSvfAL.png" alt="8.png"></p><p><img src="https://i.loli.net/2019/08/23/svKfhbAqywExLYC.png" alt="9.png"></p><p>找到<code>path</code>，选中后点击编辑</p><p><img src="https://i.loli.net/2019/08/23/wmAhoBEpRsdkaVD.png" alt="10.1.png"></p><p>在后面添加<code>;C:\MinGW\bin</code>，这个英文的分好不能少了</p><p><img src="https://i.loli.net/2019/08/23/6xOLYJtBhm8vpV4.png" alt="10.2.png"></p><p>win10的就简单了，前面打开步骤相同，这一步直接新建添加就行</p><p><img src="https://i.loli.net/2019/08/23/Tlpydco3CePHXjF.png" alt="11.png"></p><blockquote><p>PS：如果么没有成功就看一下是不是哪一步操作失误了，应该不会错吧，哈哈</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Atom&quot;&gt;&lt;a href=&quot;#Atom&quot; class=&quot;headerlink&quot; title=&quot;Atom&quot;&gt;&lt;/a&gt;Atom&lt;/h1&gt;&lt;p&gt;本篇主要介绍一下atom关于gcc的配置&lt;/p&gt;
    
    </summary>
    
      <category term="资源" scheme="http://yoursite.com/categories/%E8%B5%84%E6%BA%90/"/>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E8%B5%84%E6%BA%90/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="资源" scheme="http://yoursite.com/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="兴趣" scheme="http://yoursite.com/tags/%E5%85%B4%E8%B6%A3/"/>
    
      <category term="教程" scheme="http://yoursite.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Day30</title>
    <link href="http://yoursite.com/2019/08/19/Day30/"/>
    <id>http://yoursite.com/2019/08/19/Day30/</id>
    <published>2019-08-18T16:00:00.000Z</published>
    <updated>2019-08-19T14:34:35.393Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day30"><a href="#Day30" class="headerlink" title="Day30"></a>Day30</h1><p>今天学到的是<code>网络流之最大流</code><br>好好学习！！！</p><a id="more"></a><h2 id="链式前向星"><a href="#链式前向星" class="headerlink" title="链式前向星"></a>链式前向星</h2><p><a href="https://blog.csdn.net/acdreamers/article/details/16902023" target="_blank" rel="noopener">传送门</a></p><h2 id="网络流之最大流"><a href="#网络流之最大流" class="headerlink" title="网络流之最大流"></a>网络流之最大流</h2><p><a href="https://blog.csdn.net/wzw1376124061/article/details/55001639" target="_blank" rel="noopener">传送门</a></p><h2 id="Drainage-Ditches"><a href="#Drainage-Ditches" class="headerlink" title="Drainage Ditches"></a>Drainage Ditches</h2><p>Description:<br>Every time it rains on Farmer John’s fields, a pond forms over Bessie’s favorite clover patch. This means that the clover is covered by water for awhile and takes quite a long time to regrow. Thus, Farmer John has built a set of drainage ditches so that Bessie’s clover patch is never covered in water. Instead, the water is drained to a nearby stream. Being an ace engineer, Farmer John has also installed regulators at the beginning of each ditch, so he can control at what rate water flows into that ditch.<br>Farmer John knows not only how many gallons of water each ditch can transport per minute but also the exact layout of the ditches, which feed out of the pond and into each other and stream in a potentially complex network.<br>Given all this information, determine the maximum rate at which water can be transported out of the pond and into the stream. For any given ditch, water flows in only one direction, but there might be a way that water can flow in a circle.<br><code>Input</code><br>The input includes several cases. For each case, the first line contains two space-separated integers, N (0 &lt;= N &lt;= 200) and M (2 &lt;= M &lt;= 200). N is the number of ditches that Farmer John has dug. M is the number of intersections points for those ditches. Intersection 1 is the pond. Intersection point M is the stream. Each of the following N lines contains three integers, Si, Ei, and Ci. Si and Ei (1 &lt;= Si, Ei &lt;= M) designate the intersections between which this ditch flows. Water will flow through this ditch from Si to Ei. Ci (0 &lt;= Ci &lt;= 10,000,000) is the maximum rate at which water will flow through the ditch.<br><code>Output</code><br>For each case, output a single integer, the maximum rate at which water may emptied from the pond.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">5 4</span><br><span class="line">1 2 40</span><br><span class="line">1 4 20</span><br><span class="line">2 4 20</span><br><span class="line">2 3 30</span><br><span class="line">3 4 10</span><br><span class="line">Sample Output</span><br><span class="line">50</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line">ll n,m,s,t,u,v,w,cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    ll to,dis,nxt;</span><br><span class="line">&#125;G[maxn];</span><br><span class="line">ll head[maxn],d[maxn],cur[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll from,ll to,ll dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    G[cnt].to=to;</span><br><span class="line">    G[cnt].dis=dis;</span><br><span class="line">    G[cnt].nxt=head[from];</span><br><span class="line">    head[from]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(ll u,ll flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t)    <span class="keyword">return</span> flow;</span><br><span class="line">    ll x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=cur[u];i!=<span class="number">-1</span>;i=G[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        cur[u]=G[i].nxt;</span><br><span class="line">        ll v=G[i].to;</span><br><span class="line">        <span class="keyword">if</span>(d[v]==d[u]+<span class="number">1</span>&amp;&amp;G[i].dis&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ll res=dfs(v,min(flow,G[i].dis));</span><br><span class="line">            flow-=res;</span><br><span class="line">            x+=res;</span><br><span class="line">            G[i].dis-=res;</span><br><span class="line">            G[i^<span class="number">1</span>].dis+=res;</span><br><span class="line">            <span class="keyword">if</span>(flow==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!x)  d[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">    <span class="built_in">queue</span>&lt;ll&gt; que;</span><br><span class="line">    que.push(s);</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        ll u=que.front();que.pop();</span><br><span class="line">        <span class="keyword">for</span>(ll i=head[u];i!=<span class="number">-1</span>;i=G[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            ll v=G[i].to;</span><br><span class="line">            <span class="keyword">if</span>(d[v]==<span class="number">-1</span>&amp;&amp;G[i].dis&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                que.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll max_flow=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bfs();</span><br><span class="line">        <span class="keyword">if</span>(d[t]==<span class="number">-1</span>)    <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;=n;i++)    cur[i]=head[i];</span><br><span class="line">        max_flow+=dfs(s,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;max_flow&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        s=<span class="number">1</span>,t=n;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dinic();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Island-Transport"><a href="#Island-Transport" class="headerlink" title="Island Transport"></a>Island Transport</h2><p>Description:<br>In the vast waters far far away, there are many islands. People are living on the islands, and all the transport among the islands relies on the ships.<br>You have a transportation company there. Some routes are opened for passengers. Each route is a straight line connecting two different islands, and it is bidirectional. Within an hour, a route can transport a certain number of passengers in one direction. For safety, no two routes are cross or overlap and no routes will pass an island except the departing island and the arriving island. Each island can be treated as a point on the XY plane coordinate system. X coordinate increase from west to east, and Y coordinate increase from south to north.<br>The transport capacity is important to you. Suppose many passengers depart from the westernmost island and would like to arrive at the easternmost island, the maximum number of passengers arrive at the latter within every hour is the transport capacity. Please calculate it.<br><code>Input</code><br>The first line contains one integer T (1&lt;=T&lt;=20), the number of test cases.<br>Then T test cases follow. The first line of each test case contains two integers N and M (2&lt;=N,M&lt;=100000), the number of islands and the number of routes. Islands are number from 1 to N.<br>Then N lines follow. Each line contain two integers, the X and Y coordinate of an island. The K-th line in the N lines describes the island K. The absolute values of all the coordinates are no more than 100000.<br>Then M lines follow. Each line contains three integers I1, I2 (1&lt;=I1,I2&lt;=N) and C (1&lt;=C&lt;=10000) . It means there is a route connecting island I1 and island I2, and it can transport C passengers in one direction within an hour.<br>It is guaranteed that the routes obey the rules described above. There is only one island is westernmost and only one island is easternmost. No two islands would have the same coordinates. Each island can go to any other island by the routes.<br><code>Output</code><br>For each test case, output an integer in one line, the transport capacity.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">2</span><br><span class="line">5 7</span><br><span class="line">3 3</span><br><span class="line">3 0</span><br><span class="line">3 1</span><br><span class="line">0 0</span><br><span class="line">4 5</span><br><span class="line">1 3 3</span><br><span class="line">2 3 4</span><br><span class="line">2 4 3</span><br><span class="line">1 5 6</span><br><span class="line">4 5 3</span><br><span class="line">1 4 4</span><br><span class="line">3 4 2</span><br><span class="line">6 7</span><br><span class="line">-1 -1</span><br><span class="line">0 1</span><br><span class="line">0 2</span><br><span class="line">1 0</span><br><span class="line">1 1</span><br><span class="line">2 3</span><br><span class="line">1 2 1</span><br><span class="line">2 3 6</span><br><span class="line">4 5 5</span><br><span class="line">5 6 3</span><br><span class="line">1 4 6</span><br><span class="line">2 5 5</span><br><span class="line">3 6 4</span><br><span class="line">Sample Output</span><br><span class="line">9</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h.&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m,start,over;</span><br><span class="line"><span class="keyword">int</span> deep[N],maxflow;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,w,pre;</span><br><span class="line">&#125;a[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">-1</span>,head[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[++cnt].to=to;</span><br><span class="line">    a[cnt].w=w;</span><br><span class="line">    a[cnt].pre=head[from];</span><br><span class="line">    head[from]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span><span class="comment">//这里我们不用队列直接用数组代替</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(deep,<span class="number">-1</span>,<span class="keyword">sizeof</span>(deep));</span><br><span class="line">    <span class="keyword">int</span> q[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> fro,bac;</span><br><span class="line">    fro=bac=<span class="number">0</span>;</span><br><span class="line">    q[bac++]=start,deep[start]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(fro&lt;bac)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> first=q[fro];</span><br><span class="line">        <span class="keyword">if</span>(first==over) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[first];~i;i=a[i].pre)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(deep[a[i].to]==<span class="number">-1</span>&amp;&amp;a[i].w&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                deep[a[i].to]=deep[first]+<span class="number">1</span>;</span><br><span class="line">                q[bac++]=a[i].to;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fro++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s==over) <span class="keyword">return</span> cap;</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>,f;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[s];~i;i=a[i].pre)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> to=a[i].to;</span><br><span class="line">        <span class="keyword">if</span>(deep[to]==deep[s]+<span class="number">1</span>&amp;&amp;a[i].w)</span><br><span class="line">        &#123;</span><br><span class="line">            f=dfs(to,min(cap-flow,a[i].w));</span><br><span class="line">            a[i].w-=f;</span><br><span class="line">            a[i^<span class="number">1</span>].w+=f;</span><br><span class="line">            flow+=f;</span><br><span class="line">            <span class="keyword">if</span>(flow==cap)   <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flow==<span class="number">0</span>) deep[s]=<span class="number">-2</span>;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tem=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())</span><br><span class="line">        <span class="keyword">while</span>((tem=dfs(start,INF))&gt;<span class="number">0</span>)</span><br><span class="line">            maxflow+=tem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        maxflow=<span class="number">0</span>,cnt=<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">        start = over = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> x,y,z,x_min=INF,x_max=-INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="keyword">if</span>(x&lt;x_min) start=i,x_min=x;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;x_max) over=i,x_max=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">            add(x,y,z);</span><br><span class="line">            add(y,x,z);</span><br><span class="line">        &#125;</span><br><span class="line">        dinic();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;maxflow&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Power-Network"><a href="#Power-Network" class="headerlink" title="Power Network"></a>Power Network</h2><p>Description:<br>A power network consists of nodes (power stations, consumers and dispatchers) connected by power transport lines. A node u may be supplied with an amount s(u) &gt;= 0 of power, may produce an amount 0 &lt;= p(u) &lt;= p max(u) of power, may consume an amount 0 &lt;= c(u) &lt;= min(s(u),c max(u)) of power, and may deliver an amount d(u)=s(u)+p(u)-c(u) of power. The following restrictions apply: c(u)=0 for any power station, p(u)=0 for any consumer, and p(u)=c(u)=0 for any dispatcher. There is at most one power transport line (u,v) from a node u to a node v in the net; it transports an amount 0 &lt;= l(u,v) &lt;= l max(u,v) of power delivered by u to v. Let Con=Σ uc(u) be the power consumed in the net. The problem is to compute the maximum value of Con.<br><img src="https://i.loli.net/2019/08/19/sMRZt8G6r7dv3aO.jpg" alt="1c1354d5a7c820146d570a7875b230b3.png"><br>An example is in figure 1. The label x/y of power station u shows that p(u)=x and p max(u)=y. The label x/y of consumer u shows that c(u)=x and c max(u)=y. The label x/y of power transport line (u,v) shows that l(u,v)=x and l max(u,v)=y. The power consumed is Con=6. Notice that there are other possible states of the network but the value of Con cannot exceed 6.<br><code>Input</code><br>There are several data sets in the input. Each data set encodes a power network. It starts with four integers: 0 &lt;= n &lt;= 100 (nodes), 0 &lt;= np &lt;= n (power stations), 0 &lt;= nc &lt;= n (consumers), and 0 &lt;= m &lt;= n^2 (power transport lines). Follow m data triplets (u,v)z, where u and v are node identifiers (starting from 0) and 0 &lt;= z &lt;= 1000 is the value of l max(u,v). Follow np doublets (u)z, where u is the identifier of a power station and 0 &lt;= z &lt;= 10000 is the value of p max(u). The data set ends with nc doublets (u)z, where u is the identifier of a consumer and 0 &lt;= z &lt;= 10000 is the value of c max(u). All input numbers are integers. Except the (u,v)z triplets and the (u)z doublets, which do not contain white spaces, white spaces can occur freely in input. Input data terminate with an end of file and are correct.<br><code>Output</code><br>For each data set from the input, the program prints on the standard output the maximum amount of power that can be consumed in the corresponding network. Each result has an integral value and is printed from the beginning of a separate line.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">2 1 1 2 (0,1)20 (1,0)10 (0)15 (1)20</span><br><span class="line">7 2 3 13 (0,0)1 (0,1)2 (0,2)5 (1,0)1 (1,2)8 (2,3)1 (2,4)7</span><br><span class="line">         (3,5)2 (3,6)5 (4,2)7 (4,3)5 (4,5)1 (6,0)5</span><br><span class="line">         (0)5 (1)2 (3)2 (4)1 (5)4</span><br><span class="line">Sample Output</span><br><span class="line">15</span><br><span class="line">6</span><br><span class="line">Hint</span><br><span class="line">The sample input contains two data sets. The first data set encodes a network with 2 nodes, power station 0 with pmax(0)=15 and consumer 1 with cmax(1)=20, and 2 power transport lines with lmax(0,1)=20 and lmax(1,0)=10. The maximum value of Con is 15. The second data set encodes the network from figure 1.</span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,dis,nxt;</span><br><span class="line">&#125;G[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn],d[maxn];</span><br><span class="line"><span class="keyword">int</span> n,np,nc,m,cnt,s,t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> dis)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    G[cnt].to=to;</span><br><span class="line">    G[cnt].dis=dis;</span><br><span class="line">    G[cnt].nxt=head[from];</span><br><span class="line">    head[from]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-1</span>,<span class="keyword">sizeof</span>(d));</span><br><span class="line">    d[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q.front();</span><br><span class="line">        <span class="keyword">if</span>(u==t)    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=G[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">            <span class="keyword">int</span> dis=G[i].dis;</span><br><span class="line">            <span class="keyword">if</span>(dis&amp;&amp;d[v]==<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                d[v]=d[u]+<span class="number">1</span>;</span><br><span class="line">                q.push(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i!=<span class="number">-1</span>;i=G[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=G[i].to;</span><br><span class="line">        <span class="keyword">int</span> dis=G[i].dis;</span><br><span class="line">        <span class="keyword">if</span>(dis&amp;&amp;d[v]==d[u]+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> f=dfs(v,min(dis,flow-x));</span><br><span class="line">            G[i].dis-=f;</span><br><span class="line">            G[i^<span class="number">1</span>].dis+=f;</span><br><span class="line">            x+=f;</span><br><span class="line">            <span class="keyword">if</span>(x==flow) <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=dfs(s,INF);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;np,&amp;nc,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        s=n+<span class="number">1</span>;</span><br><span class="line">        t=s+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,y,w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" (%d,%d)%d"</span>,&amp;x,&amp;y,&amp;w);</span><br><span class="line">            add(x,y,w);</span><br><span class="line">            add(y,x,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;np;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v,w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" (%d)%d"</span>,&amp;v,&amp;w);</span><br><span class="line">            add(s,v,w);</span><br><span class="line">            add(v,s,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nc;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u,w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">" (%d)%d"</span>,&amp;u,&amp;w);</span><br><span class="line">            add(u,t,w);</span><br><span class="line">            add(t,u,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dinic();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>Description:<br>Years later, Jerry fell in love with a girl, and he often walks for a long time to pay visits to her. But, because he spends too much time with his girlfriend, Tom feels neglected and wants to prevent him from visiting her.<br>After doing some research on the neighbourhood, Tom found that the neighbourhood consists of exactly n houses, and some of them are connected with directed road. To visit his girlfriend, Jerry needs to start from his house indexed 1 and go along the shortest path to hers, indexed n.<br>Now Tom wants to block some of the roads so that Jerry has to walk longer to reach his girl’s home, and he found that the cost of blocking a road equals to its length. Now he wants to know the minimum total cost to make Jerry walk longer.<br>Note, if Jerry can’t reach his girl’s house in the very beginning, the answer is obviously zero. And you don’t need to guarantee that there still exists a way from Jerry’s house to his girl’s after blocking some edges.<br><code>Input</code><br>The input begins with a line containing one integer T(1≤T≤10), the number of test cases.<br>Each test case starts with a line containing two numbers n,m(1≤n,m≤10000), the number of houses and the number of one-way roads in the neighbourhood.<br>m lines follow, each of which consists of three integers x,y,c(1≤x,y≤n,1≤c≤109), denoting that there exists a one-way road from the house indexed x to y of length c.<br><code>Output</code><br>Print T lines, each line containing a integer, the answer.<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">1</span><br><span class="line">3 4</span><br><span class="line">1 2 1</span><br><span class="line">2 3 1</span><br><span class="line">1 3 2</span><br><span class="line">1 3 3</span><br><span class="line">Sample Output</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EK算法求解最大流</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">34338315071127552</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,s,t;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    ll v;</span><br><span class="line">    ll val;</span><br><span class="line">    ll next;</span><br><span class="line">&#125;node[<span class="number">20101</span>];</span><br><span class="line"><span class="keyword">int</span> top=<span class="number">1</span>,head[<span class="number">10101</span>];<span class="comment">//top必须从一个奇数开始，一般用-1但我不习惯，解释见下方</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>)*(n+<span class="number">1</span>));</span><br><span class="line">    top = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(ll u,ll v,ll val)</span></span>&#123;</span><br><span class="line">    node[++top].v=v;</span><br><span class="line">    node[top].val=val;</span><br><span class="line">    node[top].next=head[u];</span><br><span class="line">    head[u]=top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c=getchar();</span><br><span class="line">    <span class="keyword">while</span>(c&gt;<span class="string">'9'</span>||c&lt;<span class="string">'0'</span>)c=getchar();</span><br><span class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)x=x*<span class="number">10</span>+c-<span class="string">'0'</span>,c=getchar();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">ll inque[<span class="number">10101</span>];<span class="comment">//点是访问过里</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pre</span>&#123;</span></span><br><span class="line">    ll v;<span class="comment">//该点的前一个点（从起点过来）</span></span><br><span class="line">    ll edge;<span class="comment">//与该点相连的边（靠近起点的）</span></span><br><span class="line">&#125;pre[<span class="number">10101</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;ll&gt;q;</span><br><span class="line">    <span class="built_in">memset</span>(inque,<span class="number">0</span>,<span class="keyword">sizeof</span>(inque));</span><br><span class="line">    <span class="built_in">memset</span>(pre,<span class="number">-1</span>,<span class="keyword">sizeof</span>(pre));</span><br><span class="line">    inque[s]=<span class="number">1</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">        ll u=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=node[i].next)&#123;</span><br><span class="line">            ll d=node[i].v;</span><br><span class="line">            <span class="keyword">if</span>(!inque[d]&amp;&amp;node[i].val)&#123;<span class="comment">//node[i].val==0则已经该路径满了</span></span><br><span class="line">            pre[d].v=u;</span><br><span class="line">            pre[d].edge=i;</span><br><span class="line">            <span class="keyword">if</span>(d==t)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            inque[d]=<span class="number">1</span>;</span><br><span class="line">            q.push(d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//是否有增广路</span></span><br><span class="line"><span class="function">ll <span class="title">EK</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(bfs())&#123;</span><br><span class="line">        ll mi=inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i!=s;i=pre[i].v)&#123;</span><br><span class="line">            mi=min(mi,node[pre[i].edge].val);<span class="comment">//每次只能增加增广路上最小的边的权值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i!=s;i=pre[i].v)&#123;</span><br><span class="line">            node[pre[i].edge].val-=mi;</span><br><span class="line">            node[pre[i].edge^<span class="number">1</span>].val+=mi;</span><br><span class="line">            <span class="comment">//反向的边的编号是正向边的编号^1</span></span><br><span class="line">            <span class="comment">//这就是为什么top开始时必须是奇数</span></span><br><span class="line">        &#125;</span><br><span class="line">        ans+=mi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll,ll&gt; pii;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; G[maxn];</span><br><span class="line">ll dis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">djk</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n+<span class="number">1</span>;i ++) dis[i] = inf;</span><br><span class="line">    priority_queue&lt;pii,<span class="built_in">vector</span>&lt;pii&gt;,greater&lt;pii&gt; &gt; que;</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    que.push(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        pii p = que.top();</span><br><span class="line">        ll v = p.second;</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">if</span> (dis[v] &lt; p.first) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; G[v].size();i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            pii p2 = G[v][i];</span><br><span class="line">            <span class="keyword">if</span> (dis[p2.first] &gt; dis[v] + p2.second)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[p2.first] = dis[v] + p2.second;</span><br><span class="line">                que.push(&#123;dis[p2.first],p2.first&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">    <span class="keyword">while</span> (num --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//int n,m;</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">            G[i].clear();</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            ll u,v,w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            G[u].push_back(&#123;v,w&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        djk(n);</span><br><span class="line">        m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; G[i].size();j ++)</span><br><span class="line">            &#123;</span><br><span class="line">                pii p = G[i][j];</span><br><span class="line">                <span class="keyword">if</span> (dis[i] + p.second == dis[p.first])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//cout&lt;&lt;"u\t"&lt;&lt;i&lt;&lt;"\tv\t"&lt;&lt;p.first&lt;&lt;"\tw\t"&lt;&lt;p.second&lt;&lt;endl;</span></span><br><span class="line">                    addedge(i,p.first,p.second);</span><br><span class="line">                    addedge(p.first,i,<span class="number">0</span>);</span><br><span class="line">                    m ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s = <span class="number">1</span>,t = n;</span><br><span class="line">        ll ans = EK();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">        <span class="keyword">if</span> (!ans) <span class="built_in">cout</span>&lt;&lt;<span class="string">"dis\t"</span>&lt;&lt;dis[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//7 8</span></span><br><span class="line"><span class="comment">//1 2 2</span></span><br><span class="line"><span class="comment">//1 3 1</span></span><br><span class="line"><span class="comment">//2 4 1</span></span><br><span class="line"><span class="comment">//3 4 2</span></span><br><span class="line"><span class="comment">//4 5 1</span></span><br><span class="line"><span class="comment">//4 6 2</span></span><br><span class="line"><span class="comment">//5 7 1</span></span><br><span class="line"><span class="comment">//6 7 1</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day30&quot;&gt;&lt;a href=&quot;#Day30&quot; class=&quot;headerlink&quot; title=&quot;Day30&quot;&gt;&lt;/a&gt;Day30&lt;/h1&gt;&lt;p&gt;今天学到的是&lt;code&gt;网络流之最大流&lt;/code&gt;&lt;br&gt;好好学习！！！&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="链式前向星" scheme="http://yoursite.com/tags/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/"/>
    
      <category term="网络流" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Day29</title>
    <link href="http://yoursite.com/2019/08/18/Day29/"/>
    <id>http://yoursite.com/2019/08/18/Day29/</id>
    <published>2019-08-17T16:00:00.000Z</published>
    <updated>2019-08-18T15:36:19.170Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --><h1 id="Day29"><a href="#Day29" class="headerlink" title="Day29"></a>Day29</h1><p>今天学长的积分赛<br>好好学习！！！</p><a id="more"></a><h2 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h2><p>Description:<br>Anxdada有一个长度为n的非负整数序列a1, a2, …, an.<br>他想知道能否将这个序列划分成奇数个子序列,其中每个子序列的第一个数字是奇数,最后一个数字也是奇数,而且这个子序列的长度也是奇数</p><p>子序列就是原序列的一个连续的片段. 例如,{3, 4, 5}和{1}都是{1, 2, 3, 4, 5, 6}的子序列,但是{1, 2, 4}和{7}并不是{1, 2, 3, 4, 5, 6}的子序列</p><p><code>Input</code><br>第一行包含一个正整数n(1 ≤ n ≤ 100) — 原序列的长度.</p><p>第二行包含n个非负整数a1, a2, …, an (0 ≤ ai ≤ 100) — 这个序列的元素.</p><p><code>Output</code><br>如果原序列可以按要求进行划分就输出”Yes”,否则输出”No”.<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Simple Input 1</span><br><span class="line">3</span><br><span class="line">1 3 5</span><br><span class="line">Simple Output 1</span><br><span class="line"><span class="literal">Yes</span></span><br><span class="line">Simple Input 2</span><br><span class="line">5</span><br><span class="line">1 0 1 5 1</span><br><span class="line">Simple Output 2</span><br><span class="line"><span class="literal">Yes</span></span><br><span class="line">Simple Input 3</span><br><span class="line">3</span><br><span class="line">4 3 1</span><br><span class="line">Simple Output 3</span><br><span class="line"><span class="literal">No</span></span><br><span class="line">Simple Input 4</span><br><span class="line">4</span><br><span class="line">3 9 9 3</span><br><span class="line">Simple Output 4</span><br><span class="line"><span class="literal">No</span></span><br><span class="line">Note</span><br><span class="line">在第一个样例中,把原序列划分为1个子序列: &#123;1, 3, 5&#125;满足题目的要求.</span><br><span class="line">在第二个样例中,把原序列划分为3个子序列: &#123;1, 0, 1&#125;, &#123;5&#125;, &#123;1&#125;.</span><br><span class="line">在第三个样例中,其中一个子序列一定以4开头,但是4是偶数,因此不符合题意.</span><br><span class="line">在第四个样例中,把原序列划分为2个部分:&#123;3, 9, 9&#125;,&#123;3&#125;,但是2是偶数不满足题意.</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">if</span>(t % <span class="number">2</span> == <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((a[<span class="number">1</span>] &amp; <span class="number">1</span>) &amp;&amp; (a[t] &amp; <span class="number">1</span>)) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="搜索漂亮的整数"><a href="#搜索漂亮的整数" class="headerlink" title="搜索漂亮的整数"></a>搜索漂亮的整数</h2><p>Description:<br>小红现在有两个列表的数字.<br>如果一个十进制数至少有一个数字来自列表一且至少有一个数字来自列表二，那么将这个数字叫做小红数，请你找出最小的正小红数<br><code>Input</code><br>第一行包括两个整数 n 和 m (1 ≤ n, m ≤ 9) — 分别代表第一个和第二个列表的长度。<br>第二行包含 n 个不同的数字 a1, a2, …, an (1 ≤ ai ≤ 9) 代表列表一中的元素。<br>第三行包含 m 个不同的数字 b1, b2, …, bm (1 ≤ bi ≤ 9) 代表列表二中的元素</p><p><code>Output</code><br>输出最小正小红数.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">7</span> <span class="number">6</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">25</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">8</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx], b[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> minn, maxn;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">sort(a, a + n);</span><br><span class="line">sort(b, b + m);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == b[j])</span><br><span class="line">&#123;</span><br><span class="line">ans = a[i];</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">minn = min(a[<span class="number">0</span>], b[<span class="number">0</span>]);</span><br><span class="line">maxn = max(a[<span class="number">0</span>], b[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; minn * <span class="number">10</span> + maxn &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="hzy-和zsl-的生存挑战"><a href="#hzy-和zsl-的生存挑战" class="headerlink" title="hzy 和zsl 的生存挑战"></a>hzy 和zsl 的生存挑战</h2><p>Description:<br>zsl 和hzy 来到了臭臭城堡，打算挑战臭臭城堡的大魔王hyz，大魔王hyz设置了这样的一个挑战：</p><ol><li>zsl 和hzy两个人各自来到一间密室，期间两人无法以任何形式交流</li><li>大魔王hyz会随机在两个人的脑海里各发送一个数字，0或者是1</li><li>zsl 和 hzy 需要猜对这俩个数字才算通关，但是大魔王hyz觉得人生不能过于无敌，因此降低难度，只要两个人中有一个人答对就算是通关</li></ol><p>现在大魔王hyz 给出的数字可能的情况有 00， 01， 10， 11 四种，请按上述枚举的顺序，计算所有情况下zsl 和hzy 通关的几率。（假设zsl 和 hzy 两个人都足够机智，能够选择出最优决策）<br><code>Input</code><br>(空)<br><code>Output</code><br>输出四个答案，每个答案后面跟随一个换行符并且保留两位小数位，分别对应00，01，10，11的情况下，zsl和hzy通关的几率<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Sample</span> <span class="selector-tag">Input</span></span><br><span class="line">(空)</span><br><span class="line"><span class="selector-tag">Sample</span> <span class="selector-tag">Output</span></span><br><span class="line">1<span class="selector-class">.00</span></span><br><span class="line">0<span class="selector-class">.00</span></span><br><span class="line">0<span class="selector-class">.50</span></span><br><span class="line">0<span class="selector-class">.55</span> (输出仅做格式参考,不保证正确性)</span><br></pre></td></tr></table></figure><p></p><p><code>评价</code></p><blockquote><p>该题及其SB，不得不吐槽一下<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1.00\n1.00\n1.00\n1.00\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="共享单车"><a href="#共享单车" class="headerlink" title="共享单车"></a>共享单车</h2><p>Description:<br>学长自从上次被打了一顿之后,就想着讨好实验室的人。<br>于是他决定带着实验室的人出去玩。实验室一共有k个人,出去玩需要骑自行车。<br>一共有m家共享单车公司提供自行车,第i家共享单车公司提供的自行车信息用li,ri,ci,pi表示。<br>其中:<br>li,ri表示这家公司从接下来的第li天到ri天,提供共享单车.<br>ci表示这家公司在这些天每天提供的单车数目.<br>pi表示租用每辆车需要的单价.<br>现在学长想在接下来连续的n天,每天都带着实验室的k个人出去玩,要求出行时候每个人都尽可能能坐到单车,即每天都要租k辆车,当然如果某一天所有公司全部加起来都没有提供k辆车,那么就将所有车都租下,让剩下的一些人走路,否则如果够k辆就一定要租k辆.<br>请你输出学长最少需要花多少钱.<br><code>Input</code><br>输入的第一行为3个整数n,k,m(1&lt;=n,k&lt;=10^6,1&lt;=m&lt;=2*10^5).<br>接下来m行,每行4个整数li,ri,ci,pi(1&lt;=li&lt;=ri&lt;=n,1&lt;=ci,pi&lt;=10^6).<br><code>Output</code><br>输出只有一行,表示学长最少需要花费的钱.</p><p><code>题意</code></p><blockquote><p>有很多个活动，每个活动有持续天数，每个活动会在每天提供C个CPU每个CPU价格为P，问需要工作N天，每天需要K个CPU的最少花费。</p></blockquote><p><code>解题思路</code></p><blockquote><p>首先价格越低的活动，肯定是要选的。因此我们对于每一天记录有哪些新活动 加入，哪些活动结束。然后维护一个线段树，线段树的下标是价格。即价格为i的活动，一共能提供多少个CPU，然后加入和删除活动就相当于update(C,+-P,1,MAXC,1)。 然后我们顺便维护一下价格*数量的和。然后利用线段树天然的二分性，快速求出前缀数量和为K的价格和。</p></blockquote><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line"><span class="number">5</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">10</span> <span class="number">1</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">44</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">7</span> <span class="number">13</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">10</span> <span class="number">7</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">10</span> <span class="number">6</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">10</span> <span class="number">9</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">10</span> <span class="number">8</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">462</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line">ll num[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll sum[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    num[rt]=num[rt&lt;&lt;<span class="number">1</span>]+num[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    sum[rt]=sum[rt&lt;&lt;<span class="number">1</span>]+sum[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> P,<span class="keyword">int</span> C,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        num[rt]+=C;</span><br><span class="line">        sum[rt]+=<span class="number">1l</span>l*P*C;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(P&lt;=m)</span><br><span class="line">        update(P,C,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        update(P,C,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> K,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="comment">//不到K个</span></span><br><span class="line">        <span class="keyword">if</span>(l==MAXN)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(K&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1l</span>l*K*l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(num[rt&lt;&lt;<span class="number">1</span>]&gt;=K)&#123;</span><br><span class="line">        <span class="keyword">return</span> query(K,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt&lt;&lt;<span class="number">1</span>]+query(K-num[rt&lt;&lt;<span class="number">1</span>],m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; C[MAXN];<span class="comment">//第i天加入的活动</span></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; O[MAXN];<span class="comment">//第i天结束的活动</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> K,M;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;N,&amp;K,&amp;M);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l,r,c,p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;l,&amp;r,&amp;c,&amp;p);</span><br><span class="line">        C[l].push_back(make_pair(p,c));<span class="comment">//加入的活动</span></span><br><span class="line">        O[r].push_back(make_pair(p,c));<span class="comment">//退出的活动</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="comment">//新活动加入</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;C[i].size();j++)</span><br><span class="line">            update(C[i][j].first,C[i][j].second,<span class="number">1</span>,MAXN,<span class="number">1</span>);</span><br><span class="line">        ans+=query(K,<span class="number">1</span>,MAXN,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//活动结束</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;O[i].size();j++)</span><br><span class="line">            update(O[i][j].first,-O[i][j].second,<span class="number">1</span>,MAXN,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="最小值最大值"><a href="#最小值最大值" class="headerlink" title="最小值最大值"></a>最小值最大值</h2><p>Description:<br>给出一个有n个整数的数组 a1, a2, …, an 和一个整数k。你被要求把这个数组分成k 个非空的子段。 然后从每个k 个子段拿出最小值，再从这些最小值中拿出最大值。求这个最大值最大能为多少？</p><p><code>Input</code><br>第一行输入两个整数 n 和 k (1 ≤ k ≤ n ≤  105) — 数组a 的大小和要求分成子段的数目</p><p>第二行包含 n 整数 a1,  a2,  …,  an ( - 109  ≤  ai ≤  109).</p><p><code>Output</code><br>输出答案——在你分离的每个子段中最小值中的最大值k<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">5</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">-4</span> <span class="number">-5</span> <span class="number">-3</span> <span class="number">-2</span> <span class="number">-1</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">-5</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>PS:对2也要特判一下<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; max(a[<span class="number">1</span>], a[n]) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; a[n] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="Ring"><a href="#Ring" class="headerlink" title="Ring"></a>Ring</h2><p>Description:<br>邓布利多教授正在帮助哈利摧毁魂器。当他怀疑一个魂器出现在那里时，他去了冈特沙克。他看到Marvolo Gaunt的戒指，并将其确定为魂器。虽然他摧毁了它，但仍然受到诅咒的影响。斯内普教授正在帮助邓布利多解除诅咒。为此，他想给Dumbledore提供他制作的药水x滴。<br>x的值被计算为给定p，q，r和阵列a1，a2，……的p·ai + q·aj + r·ak的最大值，使得1≤i≤j≤k≤n。帮助Snape找到x的值。请注意x的值可能是负数。<br><code>Input</code><br>第一行输入包含4个整数n，p，q，r（ - 1e9≤p，q，r≤1e9, 1≤n≤1e5）。<br>下一行输入包含n个空格分隔的整数a1，a2，… an（ - 1e9≤ai≤1e9）。<br><code>Output</code><br>输出p≤ai+ q·aj + r·ak的最大值，只要1≤i≤j≤k≤n即可得到。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">30</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">-3</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-2</span> <span class="number">-3</span> <span class="number">-4</span> <span class="number">-5</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">12</span></span><br><span class="line">Note</span><br><span class="line">In the first sample case, we can take i = j = k = <span class="number">5</span>, thus making the answer as <span class="number">1</span>·<span class="number">5</span> + <span class="number">2</span>·<span class="number">5</span> + <span class="number">3</span>·<span class="number">5</span> = <span class="number">30.</span></span><br><span class="line"></span><br><span class="line">In second sample case, selecting i = j = <span class="number">1</span> and k = <span class="number">5</span> gives the answer <span class="number">12.</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code></p><blockquote><p>找到a[i]<em>p+a[j]</em>q+a[k]*r的最大值，i&lt;=j&lt;=k;<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每次更新</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,a1,a2,a3,a=<span class="number">-8e18</span>,b=<span class="number">-8e18</span>,c=<span class="number">-8e18</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a1&gt;&gt;a2&gt;&gt;a3; <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        a=max(a,a1*x);</span><br><span class="line">        b=max(b,a+a2*x);</span><br><span class="line">        c=max(c,b+a3*x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前后缀维护</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> L[N],R[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p,q,r;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; q &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    L[<span class="number">1</span>] = a[<span class="number">1</span>]*p;R[n] = a[n]*r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">        L[i] = max(L[i<span class="number">-1</span>],a[i]*p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>;i &gt;= <span class="number">1</span>;i--)</span><br><span class="line">        R[i] = max(R[i+<span class="number">1</span>],a[i]*r);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> maxn = -(<span class="number">1l</span>l&lt;&lt;<span class="number">63</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        maxn = max(maxn , L[i]+a[i]*q+R[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; maxn &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="赛题分析"><a href="#赛题分析" class="headerlink" title="赛题分析"></a>赛题分析</h2><p>Description:<br>著名出题人小Q每次比赛后都会写一份《赛题分析》，包含比赛概况、每题的参考算法以及一些统计数值。<br>对于一道题来说，小Q会统计最短的验题人代码长度(Shortest judge solution)以及赛内参赛队伍最短的AC代码长度(Shortest team solution)。<br>统计验题人代码长度比较容易，因为验题人最多也不会超过20个。但是统计选手代码长度就不容易了，因为大赛区动辄三四百支队伍。<br>请写一个程序，帮助小Q统计最短代码长度。<br><code>Input</code><br>第一行包含一个正整数T(1≤T≤13)，表示赛题数量。<br>每道题第一行包含两个整数n,m(2≤n≤20,0≤m≤500)，分别表示验题人数量以及AC了该题的队伍数量。<br>第二行包含n个正整数a1,a2,…,an(50≤ai≤65536)，依次表示每个验题人的代码字节数。<br>第三行包含m个正整数b1,b2,…,bn(50≤bi≤65536)，依次表示每支AC队伍的代码字节数。若m=0则该行为空行。<br><code>Output</code><br>对于第i(1≤i≤T)道题，输出三行，第一行输出Problem x:，其中x=i+1000。<br>第二行输出Shortest judge solution: y bytes.，其中y表示最短的验题人代码字节数。<br>第三行输出Shortest team solution: z bytes.，其中z表示最短的选手代码字节数，若不存在请输出N/A。<br>注意：间隔都是一个空格。<br></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Sample <span class="keyword">Input</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">3627</span> <span class="number">1460</span> <span class="number">5288</span></span><br><span class="line"><span class="number">2365</span> <span class="number">2671</span></span><br><span class="line"><span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">5510</span> <span class="number">7682</span></span><br><span class="line">Sample Output</span><br><span class="line">Problem <span class="number">1001</span>:</span><br><span class="line"><span class="keyword">Shortest</span> judge solution: <span class="number">1460</span> bytes.</span><br><span class="line"><span class="keyword">Shortest</span> team solution: <span class="number">2365</span> bytes.</span><br><span class="line">Problem <span class="number">1002</span>:</span><br><span class="line"><span class="keyword">Shortest</span> judge solution: <span class="number">5510</span> bytes.</span><br><span class="line"><span class="keyword">Shortest</span> team solution: <span class="keyword">N</span>/A bytes.</span><br></pre></td></tr></table></figure><p></p><blockquote><p>排序题</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">30</span>], b[<span class="number">600</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1001</span>;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</span><br><span class="line">sort(a, a + n);</span><br><span class="line">sort(b, b + m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Problem %d:\n"</span>,k ++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Shortest judge solution: %d bytes.\n"</span>,a[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(m != <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Shortest team solution: %d bytes.\n"</span>,b[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Shortest team solution: N/A bytes.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="差异的可分割性"><a href="#差异的可分割性" class="headerlink" title="差异的可分割性"></a>差异的可分割性</h2><p>Description:<br>现在有n个整数，在这n个数中找出k个数，保证这k个数中任意两个数差的绝对值可以被m整除。<br><code>Input</code><br>第一行输入三个整数n，k，m(2&lt;=k&lt;=n&lt;=100000,1&lt;=m&lt;=100000)。<br>第二行包含n个整数a1，a2，…，  an（0 &lt;= ai &lt;= 10^9 )。<br><code>Output</code><br>如果不存在这样的k个数，输出”No”；<br>否则输出”Yes”后，在下一行输出这k个数,数与数之间用空格隔开。 (存在多种情况，输出任意一种)。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">4</span></span><br><span class="line">Output</span><br><span class="line">Yes</span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">4</span></span><br><span class="line">Output</span><br><span class="line">No</span><br><span class="line">Input</span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">7</span> <span class="number">7</span> <span class="number">7</span></span><br><span class="line">Output</span><br><span class="line">Yes</span><br><span class="line"><span class="number">2</span> <span class="number">7</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code></p><blockquote><p>用数组记录每个数对m取模余数相等的有多少个<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> nu[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n,k,m,i;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;nu[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> u=nu[i]%m;</span><br><span class="line">        ++cnt[u];</span><br><span class="line">        <span class="keyword">if</span>(cnt[u]==k) &#123;</span><br><span class="line">            ans=u;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==<span class="number">-1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nu[i]%m==ans) &#123;</span><br><span class="line">                --k;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;nu[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="扫雷"><a href="#扫雷" class="headerlink" title="扫雷"></a>扫雷</h2><p>Description:<br>扫雷游戏是晨晨和小璐特别喜欢的智力游戏，她俩最近沉迷其中无法自拔。<br>该游戏的界面是一个矩阵，矩阵中有些格子中有一个地雷，其余格子中没有地雷。 游戏中，格子可能处于己知和未知的状态。如果一个己知的格子中没有地雷，那么该 格子上会写有一个一位数，表示与这个格子八连通相邻的格子中地雷总的数量。<br>现在，晨晨和小璐在一个3行N列（均从1开始用连续正整数编号）的矩阵中进 行游戏，在这个矩阵中，第2行的格子全部是己知的，并且其中均没有地雷；而另外 两行中是未知的，并且其中的地雷总数量也是未知的。<br>晨晨和小璐想知道，第1行和第3行有多少种合法的埋放地雷的方案。<br><code>Input</code><br>包含多组测试数据，第一行一个正整数T，表示数据组数。<br>每组数据由一行仅由数字组成的长度为N的非空字符串组成，表示矩阵有3行N 列，字符串的第i个数字字符表示矩阵中第2行第i个格子中的数字。<br>保证字符串长度N &lt;= 10000，数据组数&lt;= 100。<br><code>Output</code><br>每行仅一个数字，表示安放地雷的方案数mod100,000,007的结果。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">000</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code></p><blockquote><p>这一题，你会发现确定了第一列的摆放方案，后面所有的都就确定了。。所以我们就枚举第一列的方案数，一共就有0,1,2三种，注意我们操作的是每一列，所以注意不能超过2个。。然后，模拟姿势就是，因为这个是身边的八个格子，枚举当前列的时候，我们要把它当成八个格子三列中的最后一列，以中间列为标准，设dp为枚举状态每一列已经放的个数，num为题目告诉的雷数，那么枚举每一列的时候，都要看前一列（八个格子三列中的中间列），用num[i-1]-dp[i-2]-dp[i-1]，即减去中间列左面放的，自己这一列放的，就是右边放的了，这样就满足了num[i]的数量。。姿势很重要。。然后就是计数了，如果当前放了0个或者两个，i列跟i-1列的方案数是一样的，如果是1的话，那i列就是i-1列的两倍了。。</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e8</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> num[maxn], dp[maxn];</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            num[i+<span class="number">1</span>] = str[i] - <span class="string">'0'</span>;</span><br><span class="line">        ll ans = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= num[<span class="number">1</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">2</span>) <span class="keyword">break</span>;  <span class="comment">//控制条件</span></span><br><span class="line">            dp[<span class="number">1</span>] = i;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j = <span class="number">2</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> k = num[j<span class="number">-1</span>] - dp[j<span class="number">-1</span>] - dp[j<span class="number">-2</span>];</span><br><span class="line">                <span class="keyword">if</span>(k &gt; <span class="number">2</span> || k &lt; <span class="number">0</span>) <span class="keyword">break</span>;  <span class="comment">//控制条件，这些都容易漏</span></span><br><span class="line">                dp[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j &lt;= n) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dp[n<span class="number">-1</span>] + dp[n] != num[n]) <span class="keyword">continue</span>;   <span class="comment">//这里一定要有，区域赛的题好几题都是策略完了，然后要判定一下。。按照这个策略，看看最后两列是不是相同</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i] == <span class="number">1</span>)</span><br><span class="line">                    ans = (ans * <span class="number">2</span>) % Mod;</span><br><span class="line">            &#125;</span><br><span class="line">            res = (res + ans) % Mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="派对柠檬水"><a href="#派对柠檬水" class="headerlink" title="派对柠檬水"></a>派对柠檬水</h2><p>Description:<br>点完菜，他们发现好像觉得少了点什么？</p><p>想想马上就要回老家了某不愿透露姓名的林姓学长再次却陷入了沉思。。。。。。。。。<br>他默默的去前台打算点几瓶二锅头。<br>他发现菜单上有n 种不同毫升的酒. 第 i 种有2i - 1 毫升价格为ci 元.商店中每种类型的酒的数量可以被认为是无限的。.<br>他对于自己能喝多少还是有点B-Tree的，但是他认为喝酒一定要喝的尽兴，于是他打算买至少L 毫升，但是又要花最少的钱，现在他想知道他最少需要花多少钱</p><p><code>Input</code><br>第一行输入两个整数 n and L (1 ≤ n ≤ 30; 1 ≤ L ≤ 109) — 代表有n总酒和需要买的数量<br>第二行输入 n个整数s c1, c2, …, cn (1 ≤ ci ≤ 109) —代表第i种酒需要的钱数<br><code>Output</code><br>输出一个整数，他买至少L 了毫升，所花的最少钱数<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">4</span> <span class="number">12</span></span><br><span class="line"><span class="number">20</span> <span class="number">30</span> <span class="number">70</span> <span class="number">90</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">150</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">10000</span> <span class="number">1000</span> <span class="number">100</span> <span class="number">10</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">10</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">1000</span> <span class="number">10000</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">30</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">5</span> <span class="number">787787787</span></span><br><span class="line"><span class="number">123456789</span> <span class="number">234567890</span> <span class="number">345678901</span> <span class="number">456789012</span> <span class="number">987654321</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">44981600785557577</span></span><br><span class="line">Note</span><br><span class="line">在第一个例子中，你应该花<span class="number">90</span>元购买一个<span class="number">8</span>毫升的，花<span class="number">60</span>元的购买两个<span class="number">2</span>毫升的。总共你会得到<span class="number">12</span>毫升只要<span class="number">150</span>元。</span><br><span class="line"></span><br><span class="line">在第二个例子中，即使你只需要<span class="number">3</span>毫升，但是购买一个<span class="number">10</span>元<span class="number">8</span>毫升的便宜一些。</span><br><span class="line"></span><br><span class="line">在第三个例子中，最好<span class="number">10</span>元购买三个<span class="number">1</span>毫升的。</span><br></pre></td></tr></table></figure><p></p><p><code>题目大意</code></p><blockquote><p>有 n 种柠檬汁，第 i 种每瓶的容量为 2^(i-1) 升，价格为 Ci，问至少买 L 升柠檬汁最少花多少钱？</p></blockquote><p><code>题解</code></p><blockquote><p>一看题，第一感觉是 DP，但是由于购买数可以超过 L 升，并且 L 太大了，所以不能用 DP解决。我们采取贪心的策略：优先买单价更低的。这样会出现一个问题，剩余量如果不够一瓶，我们是买一瓶单价最低的呢？还是从单价更高的中拼一下呢？因为买一瓶单价最低的话会产生一点浪费。所以我们就可以按照这个思路用 DFS做。<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line">LL n,mn;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">LL cost,lit; <span class="comment">//每瓶的价格和容量</span></span><br><span class="line"><span class="keyword">double</span> v; <span class="comment">//单价 /升</span></span><br><span class="line">&#125; a[<span class="number">33</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.v&lt;b.v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(LL dep,LL res,LL ans)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//参数：当前位置，剩余量，当前花费</span></span><br><span class="line"><span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ans&gt;=mn) <span class="keyword">return</span>; <span class="comment">//如果当前花费比最小值大则退出</span></span><br><span class="line"><span class="keyword">if</span>(dep==n||res&lt;=<span class="number">0</span>)</span><br><span class="line">&#123; <span class="comment">//如果搜索完毕或者已经购买完，则更新最小值并退出</span></span><br><span class="line"><span class="keyword">if</span>(ans&lt;mn) mn=ans;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LL x=res/a[dep].lit; <span class="comment">//当前种柠檬汁可以买多少瓶</span></span><br><span class="line"><span class="keyword">if</span>(res%a[dep].lit!=<span class="number">0</span>)</span><br><span class="line">&#123; <span class="comment">//如果剩余不够一瓶，则多买一瓶</span></span><br><span class="line">x++;</span><br><span class="line">f=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=x*a[dep].cost; <span class="comment">//先多买一瓶当前种的</span></span><br><span class="line">res-=x*a[dep].lit;</span><br><span class="line">dfs(dep+<span class="number">1</span>,res,ans);</span><br><span class="line"><span class="keyword">if</span>(f==<span class="number">1</span>)</span><br><span class="line">&#123; <span class="comment">//如果多买了，则在回溯时还原</span></span><br><span class="line">ans-=a[dep].cost;</span><br><span class="line">res+=a[dep].lit;</span><br><span class="line">dfs(dep+<span class="number">1</span>,res,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL i,l;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;l))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i].cost);</span><br><span class="line">a[i].lit=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">a[i].v=(<span class="keyword">double</span>)a[i].cost/a[i].lit;</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n,cmp); <span class="comment">//按单价升序排序</span></span><br><span class="line">mn=<span class="number">0x7fffffffffffffff</span>;</span><br><span class="line">dfs(<span class="number">0</span>,l,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,mn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="Count"><a href="#Count" class="headerlink" title="Count"></a>Count</h2><p>Description:<br>Farmer John有n头奶牛.<br>某天奶牛想要数一数有多少头奶牛,以一种特殊的方式:<br>第一头奶牛为1号,第二头奶牛为2号,第三头奶牛之后,假如当前奶牛是第n头,那么他的编号就是2倍的第n-2头奶牛的编号加上第n-1头奶牛的编号再加上自己当前的n的三次方为自己的编号.<br>现在Farmer John想知道,第n头奶牛的编号是多少,估计答案会很大,你只要输出答案对于123456789取模.<br><code>Input</code><br>第一行输入一个T,表示有T组样例<br>接下来T行,每行有一个正整数n,表示有n头奶牛 (n&gt;=3)<br>其中，T=10^4,n&lt;=10^18<br><code>Output</code><br>共T行,每行一个正整数表示所求的答案<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">31</span></span><br><span class="line"><span class="number">700</span></span><br><span class="line"><span class="number">7486</span></span><br><span class="line"><span class="number">64651</span></span><br><span class="line"><span class="number">527023</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>数据范围这么大，直接矩阵快速幂解决<br><code>题意</code><br>f[n] = 2*f[n-2] + f[n-1] + n^3，n&lt;=1e18，求f[n] 。</p></blockquote><p><code>题解</code><br>在计算 f[n+1] 的时候， 要变为 ，所以构造的矩阵中需要有这几项，然后因为引入了 ，所以 要变为 ，因为 项、项、常数项都已经存在，所以不需要引入新的项，其余各项均可通过这几项计算出。<br>code:<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">const int MAX = <span class="number">1e6</span> + <span class="number">20</span>;</span><br><span class="line">const int mod = <span class="number">123456789</span>;</span><br><span class="line"></span><br><span class="line">ll n;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">ll m[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">&#125;Matrix;</span><br><span class="line"></span><br><span class="line">Matrix Mul(Matrix a, Matrix b)</span><br><span class="line">&#123;</span><br><span class="line">Matrix c;</span><br><span class="line">memset(c.m, <span class="number">0</span>, sizeof(c.m));</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">for (int j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">for (int k = <span class="number">0</span>; k &lt; <span class="number">6</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line">c.m[i][j] += ((a.m[i][k] * b.m[k][j]) % mod + mod) % mod;</span><br><span class="line">c.m[i][j] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Matrix fastm(Matrix a, ll num)</span><br><span class="line">&#123;</span><br><span class="line">Matrix res;</span><br><span class="line">memset(res.m, <span class="number">0</span>, sizeof(res.m));</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">res.m[i][i] = <span class="number">1</span>;</span><br><span class="line">while (num)</span><br><span class="line">&#123;</span><br><span class="line">if (num &amp; <span class="number">1</span>)</span><br><span class="line">res = Mul(res, a);</span><br><span class="line">num &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">a = Mul(a, a);</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int T;</span><br><span class="line">scanf(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">Matrix a;</span><br><span class="line">memset(a.m, <span class="number">0</span>, sizeof(a.m));</span><br><span class="line">a.m[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>, a.m[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">a.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">a.m[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">1</span>, a.m[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">a.m[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>, a.m[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">a.m[<span class="number">4</span>][<span class="number">2</span>] = <span class="number">1</span>, a.m[<span class="number">4</span>][<span class="number">3</span>] = <span class="number">2</span>, a.m[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">a.m[<span class="number">5</span>][<span class="number">2</span>] = <span class="number">1</span>, a.m[<span class="number">5</span>][<span class="number">3</span>] = <span class="number">3</span>, a.m[<span class="number">5</span>][<span class="number">4</span>] = <span class="number">3</span>, a.m[<span class="number">5</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">ll st[<span class="number">10</span>];</span><br><span class="line">st[<span class="number">0</span>] = <span class="number">2</span>, st[<span class="number">1</span>] = <span class="number">1</span>, st[<span class="number">2</span>] = <span class="number">27</span>, st[<span class="number">3</span>] = <span class="number">27</span>, st[<span class="number">4</span>] = <span class="number">9</span>, st[<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">while (T--)</span><br><span class="line">&#123;</span><br><span class="line">scanf(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">n -= <span class="number">2</span>;</span><br><span class="line">Matrix b = fastm(a, n);</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line">for (int i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">ans = (ans + b.m[i][<span class="number">0</span>] * st[i] % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"%lld<span class="subst">\n</span>"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h2><p>Description:<br>Hao得了重感冒。他将要去看 n 名医生来找出确切的诊断。每个医生都需要之前医生的所有的诊断信息，所以Hao需要按照规定的顺序访问医生（比如Hao应该先访问 1号医生,2号医生, 然后是3号医生，等等）。 Hao将从上一位医生那里获取关于他的健康信息。</p><p>医生有一个奇怪的工作表。第i名医生从si天起工作之后会每隔di 天再工作.所以医生在si, si + di, si + 2di, ….这段时间是处以上班状态</p><p>Hao一天只能访问一名医生，Hao访问完所有医生之后所花费的最短时间是多少？</p><p><code>Input</code><br>First line contains an integer n — number of doctors (1 ≤ n ≤ 1000).</p><p>Next n lines contain two numbers si and di (1 ≤ si, di ≤ 1000).</p><p><code>Output</code><br>Output a single integer — the minimum day at which Borya can visit the last doctor.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">4</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="number">5</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">11</span></span><br><span class="line">Note</span><br><span class="line">In the first sample case, Borya can visit all doctors on days <span class="number">2</span>, <span class="number">3</span> and <span class="number">4.</span></span><br><span class="line"></span><br><span class="line">In the second sample case, Borya can visit all doctors on days <span class="number">10</span> and <span class="number">11.</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>题目大意说的是找到最晚的一天，那就一只加呗，直到最后一天<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;e[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i ++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;e[i].x, &amp;e[i].y);</span><br><span class="line"><span class="keyword">int</span> ans = e[<span class="number">1</span>].x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= t;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].x &gt; ans)</span><br><span class="line">&#123;</span><br><span class="line">ans = e[i].x;</span><br><span class="line">i ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(e[i].x &lt;= ans)</span><br><span class="line">&#123;</span><br><span class="line">e[i].x += e[i].y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day29&quot;&gt;&lt;a href=&quot;#Day29&quot; class=&quot;headerlink&quot; title=&quot;Day29&quot;&gt;&lt;/a&gt;Day29&lt;/h1&gt;&lt;p&gt;今天学长的积分赛&lt;br&gt;好好学习！！！&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Day28</title>
    <link href="http://yoursite.com/2019/08/17/Day28/"/>
    <id>http://yoursite.com/2019/08/17/Day28/</id>
    <published>2019-08-16T16:00:00.000Z</published>
    <updated>2019-08-18T15:36:00.412Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day28"><a href="#Day28" class="headerlink" title="Day28"></a>Day28</h1><p>今天积分赛<br>好好学习！！！</p><a id="more"></a><h2 id="Steve的水池"><a href="#Steve的水池" class="headerlink" title="Steve的水池"></a>Steve的水池</h2><p>Description:<br>Steve 拥有深棕色头发，晒黑的褐色皮肤，紫色的眼睛，身穿青蓝色的衬衫，一条紫蓝色牛仔裤以及灰黑色的鞋子。他还拥有2px至4px大小的胳膊。Steve 似乎拥有轻微的浅棕色胡子茬，或者拥有一张嘴，这取决于你怎样看他。</p><p>Steve 需要种庄稼，圈养动物来获得食物来源，为了抵抗怪物，他需要挖矿获得铁锭，金锭，甚至钻石来制作更高级的武器装备，通常，他还需要对武器装备附魔，来提升效果，为此，他不得不需要经常下矿。</p><p>在经历了枯燥又乏味的矿工生活后，Steve 打算建造一个水池来放松放松，他打算把水池建造成一个高度为1，长宽分别为N,M的水池，为此，他需要向水池中倒水，但Steve 只有一个水桶，他不想要浪费更多的铁锭来制作更多的水桶，为此，他需要尽可能少的往水池里倒水以尽快建造好水池，但是Steve 的世界有一个很奇怪的特性，每向一个区域倒水的时候，在这个区域会形成一个水源，当一个区域四个方向中至少有两个方向紧挨着这个区域的地方都为水源的话，这个区域也将会形成水源，Steve 想要知道最少他需要倒多少次水才能使水池每处都形成水源。</p><p><code>输入格式</code><br>输入第1行为一个整数T。（1 ≤ T ≤ 1000）<br>第2行到第T+1行每行为两个整数N,M代表水池的长宽。（1 ≤ N,M ≤ 10^9）</p><p><code>输出格式</code><br>输出为T行，每行输出一个整数，代表Steve 最少需要的倒水次数。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line">output</span><br><span class="line"><span class="number">1</span></span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line">output</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code></p><blockquote><p>规律题:规律为(n+m)/2</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="built_in">ceil</span>(<span class="number">1.0</span> * (n + m) / <span class="number">2</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="掷骰子"><a href="#掷骰子" class="headerlink" title="掷骰子"></a>掷骰子</h2><p>Description:<br>骰子，中国传统民间娱乐用来投掷的博具，早在战国时期就已经被发明。</p><p>现在给你 n 个骰子，求 n 个骰子掷出点数之和为 a 的概率是多少。<br><code>输入格式</code><br>第一行输入一个整数 T，表示有 T 组测试数据（1≤T≤10）<br>每组测试数据输入两个整数n,a，表示共有n个骰子，骰子点数总和为a(1≤n≤1000,n≤a≤6∗n)</p><p><code>输出格式</code><br>如题。答案对 109+7 取余。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line">output</span><br><span class="line"><span class="number">166666668</span></span><br><span class="line"><span class="number">27777778</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code></p><blockquote><p>dp[i][j]表示投掷玩i个骰子和为j的方案书，dp[i][j]=求和（dp[i-1][j-k]）,k为第i个骰子的点数。暴力转移即可</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line">ll dp[maxn][maxn*<span class="number">6</span>];</span><br><span class="line"><span class="function">ll <span class="title">quickpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">a=a*a%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> n,a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;a);</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=<span class="number">6</span>*n;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-6</span>;k&lt;j;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(k&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">dp[i][j]=(dp[i][j]+dp[i<span class="number">-1</span>][k])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,dp[n][a]*quickpow(quickpow(<span class="number">6</span>,n),mod<span class="number">-2</span>)%mod);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Subsequence"><a href="#Subsequence" class="headerlink" title="Subsequence"></a>Subsequence</h2><p>Description:<br>Steve 和 Alex 喜欢研究字符串，今天他们学到了一个新名词—“Subsequence“。对于字符串 s 和 t 来说，t 被称为 s 的”Subsequence“当且仅当 s 删除若干字母后能得到 t （也可以不删)。</p><p>例如：”ab”,”ac”,”bc”都是”abc”的”Subsequence“，而”ba”和”ca”则不是。</p><p>现在 Steve 和 Alex 手中各自有一个只由小写字母组成的字符串 s 和 t ，请判断 t 是否是 s 的”Subsequence“。</p><p><code>输入格式</code><br>第一行输入一个T,代表数据组数。<br>接下来输入T组，每组包含两行，第一行输入s，第二行输入t。<br>(1≤T≤1000,1≤|t|≤|s|≤10000)</p><p><code>输出格式</code><br>输出T行，如果t是s的”Subsequence“，输入”YES”,否则输出”NO”。<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">样例</span></span><br><span class="line"><span class="string">input</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"><span class="string">ac</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"><span class="string">ba</span></span><br><span class="line"><span class="string">abc</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">output</span></span><br><span class="line"><span class="literal">YES</span></span><br><span class="line"><span class="literal">NO</span></span><br><span class="line"><span class="literal">YES</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code></p><blockquote><p>设置一个指针j,如果s1i = s2j,j往后移，判断到最后j是否为m即可，m为t的长度</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"><span class="keyword">int</span> n = s1.size();</span><br><span class="line"><span class="keyword">int</span> m = s2.size();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; n &amp;&amp; j &lt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s1[i] == s2[j]) j ++;</span><br><span class="line">i ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j == m) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Steve的游戏名"><a href="#Steve的游戏名" class="headerlink" title="Steve的游戏名"></a>Steve的游戏名</h2><p>Description:<br>定义一个字符串s是一步字符串，当 s 满足以下两个条件：</p><p>s 中仅包含小写字母。<br>对于任意的1≤i&lt;|s|满足，s[i]+1=s[i+1]，也就是说，s[i]在英文字母表中的位置的下一位是s[i+1]，特别的，我们认为z的下一位是a，其中|s|表示s的长度。<br>举个例子：abc、zab 都是一步字符串，而 acd、zbc不是。<br>Steve 特别喜欢长长的名字，因此他在 Minecraft 中的名字特别特别的长。<br>Alex 对 Steve 的名字特别感兴趣，她想知道 Steve 的名字中有多少个子串是一步字符串。<br>形式化来说，对于一个字符串 s，问有多少对 &lt;i,j&gt; 满足 1≤i≤j≤n，且 s[i]…s[j] 是一步字符串。<br>保证 Steve 在 Minecraft 中的名字仅包含小写英文字母。</p><p><code>输入格式</code><br>输入包含多组测试数据。<br>第一行一个数字 T ，表示测试数据个数。<br>接下来每两行表示一个测试数据。<br>第一行一个数字 n 。<br>第二行一个长度为 n 的字符串 s。</p><p>数据范围：1≤T≤100,1≤n≤2⋅105</p><p><code>输出格式</code><br>一个数字表示答案。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">abc</span><br><span class="line"><span class="number">3</span></span><br><span class="line">zab</span><br><span class="line">output</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意</code></p><blockquote><p>O(|s|)的遍历即可,遇到不满足条件的更新最新的满足条件的最大区间|l,r|,答案加上(r-l+1)*(r-l)/2</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll t, n;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">ll x = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((str[i] - <span class="string">'a'</span> + <span class="number">1</span>) % <span class="number">26</span> == (str[i + <span class="number">1</span>] - <span class="string">'a'</span>) % <span class="number">26</span>) x ++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans += (<span class="number">1</span> + x) * x / <span class="number">2</span> - x;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x) ans += (<span class="number">1</span> + x) * x / <span class="number">2</span> - x;</span><br><span class="line">ans += n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="数字串"><a href="#数字串" class="headerlink" title="数字串"></a>数字串</h2><p>Description:<br>给你一个长度为 n 的数字串，找出其中位数不超过15位的不包含前导0和后导0的数 x ,使得 x+f(x) 是一个回文数,其中 f(x) 表示将 x 反转过来的数。</p><p><code>输入格式</code><br>多组输入，处理到文件结束,样例保证不超过1000组。<br>每组第一行一个整数 n ，表示数字串的长度(1≤n≤1000)，<br>接下来一行输入一个长度为 n 的数字串。</p><p><code>输出格式</code><br>第一行一个数 m 表示数字串中符合条件的数的个数(数可以重复)。<br>第二行从小到大输出 m 个数，每个数字之间以空格隔开。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">output</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">12</span> <span class="number">23</span> <span class="number">123</span></span><br><span class="line">提示</span><br><span class="line"><span class="number">1</span>+<span class="number">1</span>=<span class="number">2</span>,</span><br><span class="line"><span class="number">2</span>+<span class="number">2</span>=<span class="number">4</span>,</span><br><span class="line"><span class="number">3</span>+<span class="number">3</span>=<span class="number">6</span>,</span><br><span class="line"><span class="number">12</span>+<span class="number">21</span>=<span class="number">33</span>,</span><br><span class="line"><span class="number">23</span>+<span class="number">32</span>=<span class="number">55</span>,</span><br><span class="line"><span class="number">123</span>+<span class="number">321</span>=<span class="number">444</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>暴力即可过<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="function">ll <span class="title">fan</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        res=res*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'0'</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ll x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">15</span> &amp;&amp; i+j&lt;n;j++)&#123;</span><br><span class="line">                x=x*<span class="number">10</span>+s[i+j]-<span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">if</span>(s[i+j]==<span class="string">'0'</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(x+fan(x)==fan(x+fan(x)))&#123;</span><br><span class="line">                    a[sum++]=x;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a,a+sum);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,sum);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sum;i++) <span class="built_in">printf</span>(<span class="string">"%lld "</span>,a[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="Alex的午饭"><a href="#Alex的午饭" class="headerlink" title="Alex的午饭"></a>Alex的午饭</h2><p>Description:<br>Steve和Alex每天都在为午饭吃什么而发愁，因为吃的东西实在是太多了，而且很多都特别好吃。为了解决吃什么的问题，Alex决定每次吃饭前发布一个问卷调查，让他的好朋友选出他们今天最想吃的食物，然后Alex会根据问卷的结果来确定吃什么</p><p>每个问卷只收集一种食物，每个食物都由一个数字num来表示。Alex会选出问卷中出现次数超过问卷总数一半的数字来决定今天的午饭</p><p><code>输入格式</code><br>单组输入，每组两行<br>第一行有一个整数N (1≤N≤2×10^7)<br>第二行有N个整数num (num≤10^18)，代表每个问卷中的数字</p><p><code>输出格式</code><br>输出一个整数，即出现次数超过N/2的数<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">output</span><br><span class="line"><span class="number">1</span></span><br><span class="line">input</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line">output</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>ps:用map做的话会超时<br>好像是什么xx摩尔算法吧</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">ll x, ans;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; t; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(!res)</span><br><span class="line">ans = x;</span><br><span class="line"><span class="keyword">if</span>(x == ans)</span><br><span class="line">res ++;</span><br><span class="line"><span class="keyword">if</span>(x != ans)</span><br><span class="line">res --;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="The-war-land"><a href="#The-war-land" class="headerlink" title="The war land"></a>The war land</h2><p>Description:<br>Steve 和 Alex 开始玩一款叫做战争大陆的游戏，整个地图由 n 个岛屿和 n−1 条桥梁组成，第 i 个岛屿的战略能力为 wi ，整个地图是联通的。游戏开始 Steve 和 Alex 需要断掉一座桥梁，这样整个地图就被划分为了两个联通的区域 A 和 B 并且 A 和 B 之间无法到达。<br>为了使游戏尽可能公平，现在他们想让 A 和 B 的战略能力之和的差值的绝对值最小。</p><p><code>输入格式</code><br>第一行输入T代表数据组数。<br>接下来T组，对于每一组：<br>第一行输入n，接下来n−1行，每行输入两个数字u,v代表u和v之间的岛屿有一座桥梁，最后一行输入n个数，第i个数代表第i个岛屿的战略值wi。<br>(1≤T≤10,1≤n≤100000,1≤wi≤10^9,1≤u,v≤n)</p><p><code>输出格式</code><br>输出T组，对于每组输入，输出最小的差值的绝对值。<br><img src="https://i.loli.net/2019/08/18/esabHtQ9OGoc3ZS.png" alt="picg.9GafXAtx.png"><br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">output</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意</code></p><blockquote><p>这是一棵树，我们以1为根节点DFS统计以i为根的子树的大小，然后切一条边其实就是割掉一个子树，处理之后枚举即可。复杂度O(T·n)</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200001</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> siz[N],w[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> par)</span></span>&#123;</span><br><span class="line">    siz[u]=w[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v:G[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==par) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(siz,<span class="number">0</span>,<span class="keyword">sizeof</span>(siz));</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) G[i].clear();</span><br><span class="line">        <span class="keyword">int</span> u,v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">            G[u].push_back(v);</span><br><span class="line">            G[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;w[i];</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">999999999999999999</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            ans=min(ans,<span class="built_in">abs</span>(siz[<span class="number">1</span>]<span class="number">-2</span>*siz[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Number-throry"><a href="#Number-throry" class="headerlink" title="Number throry"></a>Number throry</h2><p>Description:<br>steve 学完了快速幂，现在会他快速的计算：(i^j)%d , Alex 作为一个数学大师，给了 steve 一个问题：已知<br>i∈[1,n],j∈[1,m] ，计算满足 (i^j)%d=0 的 (i,j) 的对数。</p><p><code>输入格式</code><br>T组输入，对于每一组输入三个数n,m,d。<br>(1≤T≤1000,1≤n,m,d≤10^9)。</p><p><code>输出格式</code><br>对于每组输入，输出答案，每个答案占一行。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">10</span> <span class="number">7</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">30</span> <span class="number">6</span></span><br><span class="line"><span class="number">100</span> <span class="number">100</span> <span class="number">8</span></span><br><span class="line">output</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">4937</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code><br><img src="https://i.loli.net/2019/08/18/AcCYrNwXRdnGZjF.png" alt="质因子分解.png"></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=(ans*a);</span><br><span class="line">a=(a*a);</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">ll n,m,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;n,&amp;m,&amp;d);</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;ll,ll&gt; &gt; prs;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=d;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(d%i==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(d%i==<span class="number">0</span>)&#123;</span><br><span class="line">d/=i;cnt++;</span><br><span class="line">&#125;</span><br><span class="line">prs.push_back(&#123;i,cnt&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(d!=<span class="number">1</span>) prs.push_back(&#123;d,<span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">for</span>(ll j=<span class="number">1</span>;j&lt;=min(m,<span class="number">1L</span>L*<span class="number">30</span>);j++)&#123;</span><br><span class="line">ll g=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:prs)&#123;</span><br><span class="line">g*=qpow(v.first,(v.second+j<span class="number">-1</span>)/j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">30</span>) res+=(m<span class="number">-29</span>)*(n/g);</span><br><span class="line"><span class="keyword">else</span> res+=n/g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Steve的难题"><a href="#Steve的难题" class="headerlink" title="Steve的难题"></a>Steve的难题</h2><p>Description:<br>Steve参加了2019年的暑期集训，在集训最后一场积分赛时，Steve英勇AC，提交了几十发全A了。Steve顿时惊叹，这不都是水题吗，于是接下来碰到的问题却难倒了他。求1n! 模p意义下的值。</p><p><code>输入格式</code><br>多组输入，处理到文件结束。<br>每行输入两个数n,p,(1≤n≤10^5,n&lt;p≤10^9).<br>数据保证 p 是个质数。<br><code>输出格式</code><br>如题<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">7</span></span><br><span class="line"><span class="number">3</span> <span class="number">11</span></span><br><span class="line">output</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code></p><blockquote><p>求解逆元裸题，可以用exgcd(扩展gcd)，也可以用费马小定理，由于p为质数，因此x的逆元为x^(p-2)%p</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">quick_pow</span><span class="params">(ll a, ll b, ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(b &lt;= <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">a = a * a % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x 的逆元为 x^(p - 2) % p;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll n, p;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;n, &amp;p))</span><br><span class="line">&#123;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">res = res * quick_pow(i, p - <span class="number">2</span>, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Steve’s-Shortest-Path"><a href="#Steve’s-Shortest-Path" class="headerlink" title="Steve’s Shortest Path"></a>Steve’s Shortest Path</h2><p>Description:<br>Alex 和 Steve 来到了一个神奇的国度，这个国家有 n 个城市和 m 条道路。这 m 条道路都是双向的，而且这个国家的客车有个特点，每辆客车除出发城市和到达城市外有且仅可经过一个城市。</p><p>假设u城市到v有一条道路并且 v 到 p 有一条道路,那么客车从 u 出发不能到达 v 但是能到达 p，Steve 和 Alex 在编号为 1 的城市,他们想知道能不能到达编号为 n 的城市，如果能，最少需要坐几次客车？</p><p><code>输入格式</code><br>单组输入。<br>第一行输入 n 和 m 代表城市的个数和路径的条数。<br>接下来 m 行每行输入两个数 u 和 v 代表 u 到 v 之间有条路。(2≤n,m≤10^6,1≤u,v≤n)。</p><p><code>输出格式</code><br>如果 Steve 和 Alex 能够到达终点，输出最少需要坐几次车才能到达，否则输出−1。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">output</span><br><span class="line"><span class="number">-1</span></span><br><span class="line">input</span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line">output</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code></p><blockquote><p>直接BFS/Dijkstra即可，记录两个状态分别代表到达i点最短路为奇偶的情况.即dis[i][0]代表到i点走了偶数步的最短路，dis[i][1]代表到i点走了奇数步的最短路，然后答案即为dis[i][0]/2</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;vec[maxn];</span><br><span class="line"><span class="keyword">int</span> step[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line">    que.push(x);</span><br><span class="line">    vis[x]=<span class="number">1</span>;</span><br><span class="line">    step[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())&#123;</span><br><span class="line">        x=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vec[x].size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> y=vec[x][i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;vec[y].size();j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> z=vec[y][j];</span><br><span class="line">                <span class="keyword">if</span>(vis[z]) <span class="keyword">continue</span>;</span><br><span class="line">                vis[z]=<span class="number">1</span>;</span><br><span class="line">                step[z]=step[x]+<span class="number">1</span>;</span><br><span class="line">                que.push(z);</span><br><span class="line">                <span class="keyword">if</span>(z==n) <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;u,&amp;v);</span><br><span class="line">        vec[u].push_back(v);</span><br><span class="line">        vec[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    bfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(step[n]==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,step[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day28&quot;&gt;&lt;a href=&quot;#Day28&quot; class=&quot;headerlink&quot; title=&quot;Day28&quot;&gt;&lt;/a&gt;Day28&lt;/h1&gt;&lt;p&gt;今天积分赛&lt;br&gt;好好学习！！！&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Day27</title>
    <link href="http://yoursite.com/2019/08/16/Day27/"/>
    <id>http://yoursite.com/2019/08/16/Day27/</id>
    <published>2019-08-15T16:00:00.000Z</published>
    <updated>2019-08-18T14:05:45.571Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day27"><a href="#Day27" class="headerlink" title="Day27"></a>Day27</h1><p>今天讲的是 <code>KPM + hash算法</code><br>好好学习！！！<br><a href="https://vjudge.net/contest/320166" target="_blank" rel="noopener">OJ</a></p><a id="more"></a><p><code>PS</code>:</p><blockquote><p>这次的题基本上都是用KMP写的,hash算法的写法等理解好了再补</p></blockquote><h2 id="KMP算法解释"><a href="#KMP算法解释" class="headerlink" title="KMP算法解释"></a>KMP算法解释</h2><blockquote><p>详情注意一下链接<br><a href="https://blog.csdn.net/buppt/article/details/78531384" target="_blank" rel="noopener">前后缀数组的理解</a><br><a href="https://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">KMP解释</a><br><a href="https://www.cnblogs.com/yjiyjige/p/3263858.html" target="_blank" rel="noopener">KMP白话讲解</a><br><a href="https://www.cnblogs.com/SYCstudio/p/7194315.html" target="_blank" rel="noopener">KMP生动一点的讲解</a></p></blockquote><p>贴一个板子<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s,t;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cal_nxt(<span class="built_in">string</span> s)&#123;</span><br><span class="line">    <span class="keyword">int</span> n=(<span class="keyword">int</span>)s.length();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=nxt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(s[i]!=s[j]&amp;&amp;j&gt;<span class="number">0</span>) j=nxt[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j]) j++;</span><br><span class="line">        nxt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nxt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t;</span><br><span class="line">    m=t.length();</span><br><span class="line">    n=s.length();</span><br><span class="line">    <span class="built_in">string</span> T=t+<span class="string">'#'</span>+s;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt=cal_nxt(T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;(<span class="keyword">int</span>)T.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nxt[i]==m)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//另一个板子</span></span><br><span class="line"><span class="built_in">string</span> start,en;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">1000010</span>];</span><br><span class="line"><span class="comment">//得到nxt维护数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnxt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j, k;</span><br><span class="line">j = <span class="number">0</span>, k = <span class="number">-1</span>, nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从头比或相等则比较下去并记录最长公共真前、后缀长度</span></span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span> || en[j] == en[k])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//j之前的最长公共真前、后缀长度为k，前缀下标0~k-1，后缀下标j-k~j-1</span></span><br><span class="line">nxt[++ j] = ++ k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nxt[k];<span class="comment">//k回退到Next[k]的位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">getnxt();</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j, k;</span><br><span class="line">j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//k==-1相当于从start的开始（重新）比较，相等就比下去</span></span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span> || en[k] == start[j])</span><br><span class="line">&#123;</span><br><span class="line">++ j;</span><br><span class="line">++ k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nxt[k];</span><br><span class="line"><span class="keyword">if</span>(k == m)</span><br><span class="line">&#123;</span><br><span class="line">k = nxt[k];<span class="comment">//把j位置的字符和k位置的字符对齐，便于下次比较</span></span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="hash算法解释"><a href="#hash算法解释" class="headerlink" title="hash算法解释"></a>hash算法解释</h2><blockquote><p>详情注意一下链接<br><a href="https://www.jishuwen.com/d/2AU3#tuit" target="_blank" rel="noopener">解释</a></p></blockquote><p>加一个板子<br></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace  std;</span><br><span class="line">typedef unsigned long long ull;</span><br><span class="line">const ull <span class="built_in">base</span> = <span class="number">2333</span>;</span><br><span class="line">const ull <span class="built_in">mod</span> = <span class="number">1</span>e9+<span class="number">9</span>;</span><br><span class="line">const <span class="built_in">int</span> <span class="built_in">N</span> = <span class="number">1</span>e6+<span class="number">100</span>;</span><br><span class="line">ull hashes[<span class="built_in">N</span>],p[<span class="built_in">N</span>];</span><br><span class="line">ull gethashes(<span class="built_in">int</span> l,<span class="built_in">int</span> r)&#123;</span><br><span class="line">    return (hashes[r]%<span class="built_in">mod</span>-(hashes[l-<span class="number">1</span>]%<span class="built_in">mod</span>*p[r-l+<span class="number">1</span>]%<span class="built_in">mod</span>)%<span class="built_in">mod</span>+<span class="built_in">mod</span>)%<span class="built_in">mod</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">char</span> s[<span class="built_in">N</span>],<span class="built_in">t</span>[<span class="built_in">N</span>];</span><br><span class="line"><span class="built_in">int</span> main()&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">T</span>;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;<span class="built_in">T</span>);</span><br><span class="line">    while(<span class="built_in">T</span>--)&#123;</span><br><span class="line">        scanf(<span class="string">"%s %s"</span>,<span class="built_in">t</span>+<span class="number">1</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">int</span> <span class="built_in">n</span>=strlen(s+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">int</span> m=strlen(<span class="built_in">t</span>+<span class="number">1</span>);</span><br><span class="line">        p[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        for(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">n</span>;i++)&#123;</span><br><span class="line">            hashes[i]=(hashes[i-<span class="number">1</span>]*<span class="built_in">base</span>%<span class="built_in">mod</span>+s[i]%<span class="built_in">mod</span>)%<span class="built_in">mod</span>;</span><br><span class="line">            p[i]=(p[i-<span class="number">1</span>]%<span class="built_in">mod</span>*<span class="built_in">base</span>%<span class="built_in">mod</span>)%<span class="built_in">mod</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ull ans=<span class="number">0</span>;</span><br><span class="line">        for(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;=m;i++) ans=(ans*<span class="built_in">base</span>%<span class="built_in">mod</span>+<span class="built_in">t</span>[i]%<span class="built_in">mod</span>)%<span class="built_in">mod</span>;</span><br><span class="line">        <span class="built_in">int</span> res=<span class="number">0</span>;</span><br><span class="line">        for(<span class="built_in">int</span> i=m;i&lt;=<span class="built_in">n</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">if</span>(gethashes(i-m+<span class="number">1</span>,i)==ans)&#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Number-Sequence"><a href="#Number-Sequence" class="headerlink" title="Number Sequence"></a>Number Sequence</h2><p>Description:<br>Given two sequences of numbers : a[1], a[2], …… , a[N], and b[1], b[2], …… , b[M] (1 &lt;= M &lt;= 10000, 1 &lt;= N &lt;= 1000000). Your task is to find a number K which make a[K] = b[1], a[K + 1] = b[2], …… , a[K + M - 1] = b[M]. If there are more than one K exist, output the smallest one.<br><code>Input</code><br>The first line of input is a number T which indicate the number of cases. Each case contains three lines. The first line is two numbers N and M (1 &lt;= M &lt;= 10000, 1 &lt;= N &lt;= 1000000). The second line contains N integers which indicate a[1], a[2], …… , a[N]. The third line contains M integers which indicate b[1], b[2], …… , b[M]. All integers are in the range of [-1000000, 1000000].<br><code>Output</code><br>For each test case, you should output one line which only contain K described above. If no such K exists, output -1 instead.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">13</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">13</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[maxx], b[maxx];</span><br><span class="line"><span class="keyword">int</span> nxt[maxx];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnxt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">-1</span>;</span><br><span class="line">nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span> || b[k] == b[j])</span><br><span class="line">&#123;</span><br><span class="line">nxt[++ j] = ++ k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nxt[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kpm</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">getnxt();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span> || b[k] == a[j])</span><br><span class="line">&#123;</span><br><span class="line">++ j;</span><br><span class="line">++ k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nxt[k];</span><br><span class="line"><span class="keyword">if</span>(k == m)</span><br><span class="line">&#123;</span><br><span class="line">res = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> res - m + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; kpm() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Oulipo"><a href="#Oulipo" class="headerlink" title="Oulipo"></a>Oulipo</h2><p>Description:<br>The French author Georges Perec (1936–1982) once wrote a book, La disparition, without the letter ‘e’. He was a member of the Oulipo group. A quote from the book:</p><p>Tout avait Pair normal, mais tout s’affirmait faux. Tout avait Fair normal, d’abord, puis surgissait l’inhumain, l’affolant. Il aurait voulu savoir où s’articulait l’association qui l’unissait au roman : stir son tapis, assaillant à tout instant son imagination, l’intuition d’un tabou, la vision d’un mal obscur, d’un quoi vacant, d’un non-dit : la vision, l’avision d’un oubli commandant tout, où s’abolissait la raison : tout avait l’air normal mais…</p><p>Perec would probably have scored high (or rather, low) in the following contest. People are asked to write a perhaps even meaningful text on some subject with as few occurrences of a given “word” as possible. Our task is to provide the jury with a program that counts these occurrences, in order to obtain a ranking of the competitors. These competitors often write very long texts with nonsense meaning; a sequence of 500,000 consecutive ‘T’s is not unusual. And they never use spaces.</p><p>So we want to quickly find out how often a word, i.e., a given string, occurs in a text. More formally: given the alphabet {‘A’, ‘B’, ‘C’, …, ‘Z’} and two finite strings over that alphabet, a word W and a text T, count the number of occurrences of W in T. All the consecutive characters of W must exactly match consecutive characters of T. Occurrences may overlap.<br><code>Input</code><br>The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:</p><p>One line with the word W, a string over {‘A’, ‘B’, ‘C’, …, ‘Z’}, with 1 ≤ |W| ≤ 10,000 (here |W| denotes the length of the string W).<br>One line with the text T, a string over {‘A’, ‘B’, ‘C’, …, ‘Z’}, with |W| ≤ |T| ≤ 1,000,000.<br><code>Output</code><br>For every test case in the input file, the output should contain a single number, on a single line: the number of occurrences of the word W in the text T.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line">BAPC</span><br><span class="line">BAPC</span><br><span class="line">AZA</span><br><span class="line">AZAZAZA</span><br><span class="line">VERDI</span><br><span class="line">AVERDXIVYERDIAN</span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> start,en;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">1000010</span>];</span><br><span class="line"><span class="comment">//得到nxt维护数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnxt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j, k;</span><br><span class="line">j = <span class="number">0</span>, k = <span class="number">-1</span>, nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从头比或相等则比较下去并记录最长公共真前、后缀长度</span></span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span> || en[j] == en[k])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//j之前的最长公共真前、后缀长度为k，前缀下标0~k-1，后缀下标j-k~j-1</span></span><br><span class="line">nxt[++ j] = ++ k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nxt[k];<span class="comment">//k回退到Next[k]的位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">getnxt();</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j, k;</span><br><span class="line">j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//k==-1相当于从start的开始（重新）比较，相等就比下去</span></span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span> || en[k] == start[j])</span><br><span class="line">&#123;</span><br><span class="line">++ j;</span><br><span class="line">++ k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nxt[k];</span><br><span class="line"><span class="keyword">if</span>(k == m)</span><br><span class="line">&#123;</span><br><span class="line">k = nxt[k];<span class="comment">//把j位置的字符和k位置的字符对齐，便于下次比较</span></span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; en &gt;&gt; start;</span><br><span class="line">n = start.size();</span><br><span class="line">m = en.size();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; kmp() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="剪花布条"><a href="#剪花布条" class="headerlink" title="剪花布条"></a>剪花布条</h2><p>Description:<br>一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出几块小饰条来呢？<br><code>Input</code><br>输入中含有一些数据，分别是成对出现的花布条和小饰条，其布条都是用可见ASCII字符表示的，可见的ASCII字符有多少个，布条的花纹也有多少种花样。花纹条和小饰条不会超过1000个字符长。如果遇见#字符，则不再进行工作。<br><code>Output</code><br>输出能从花纹布中剪出的最多小饰条个数，如果一块都没有，那就老老实实输出0，每个结果之间应换行。<br></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sample</span> <span class="keyword">Input</span></span><br><span class="line">abcde a3</span><br><span class="line">aaaaaa  aa</span><br><span class="line">#</span><br><span class="line"><span class="keyword">Sample</span> Output</span><br><span class="line">0</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> start,en;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">10010</span>];</span><br><span class="line"><span class="comment">//得到nxt维护数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnxt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j, k;</span><br><span class="line">j = <span class="number">0</span>, k = <span class="number">-1</span>, nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//从头比或相等则比较下去并记录最长公共真前、后缀长度</span></span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span> || en[j] == en[k])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//j之前的最长公共真前、后缀长度为k，前缀下标0~k-1，后缀下标j-k~j-1</span></span><br><span class="line">nxt[++ j] = ++ k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nxt[k];<span class="comment">//k回退到Next[k]的位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">getnxt();</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j, k;</span><br><span class="line">j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//k==-1相当于从start的开始（重新）比较，相等就比下去</span></span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span> || en[k] == start[j])</span><br><span class="line">&#123;</span><br><span class="line">++ j;</span><br><span class="line">++ k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nxt[k];</span><br><span class="line"><span class="keyword">if</span>(k == m)</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; start)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(start == <span class="string">"#"</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; en;</span><br><span class="line">n = start.size();</span><br><span class="line">m = en.size();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; kmp() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Cyclic-Nacklace"><a href="#Cyclic-Nacklace" class="headerlink" title="Cyclic Nacklace"></a>Cyclic Nacklace</h2><p>Description:<br>CC always becomes very depressed at the end of this month, he has checked his credit card yesterday, without any surprise, there are only 99.9 yuan left. he is too distressed and thinking about how to tide over the last days. Being inspired by the entrepreneurial spirit of “HDU CakeMan”, he wants to sell some little things to make money. Of course, this is not an easy task.</p><p>As Christmas is around the corner, Boys are busy in choosing christmas presents to send to their girlfriends. It is believed that chain bracelet is a good choice. However, Things are not always so simple, as is known to everyone, girl’s fond of the colorful decoration to make bracelet appears vivid and lively, meanwhile they want to display their mature side as college students. after CC understands the girls demands, he intends to sell the chain bracelet called CharmBracelet. The CharmBracelet is made up with colorful pearls to show girls’ lively, and the most important thing is that it must be connected by a cyclic chain which means the color of pearls are cyclic connected from the left to right. And the cyclic count must be more than one. If you connect the leftmost pearl and the rightmost pearl of such chain, you can make a CharmBracelet. Just like the pictrue below, this CharmBracelet’s cycle is 9 and its cyclic count is 2:</p><p>Now CC has brought in some ordinary bracelet chains, he wants to buy minimum number of pearls to make CharmBracelets so that he can save more money. but when remaking the bracelet, he can only add color pearls to the left end and right end of the chain, that is to say, adding to the middle is forbidden.<br>CC is satisfied with his ideas and ask you for help.<br><code>Input</code><br>The first line of the input is a single integer T ( 0 &lt; T &lt;= 100 ) which means the number of test cases.<br>Each test case contains only one line describe the original ordinary chain to be remade. Each character in the string stands for one pearl and there are 26 kinds of pearls being described by ‘a’ ~’z’ characters. The length of the string Len: ( 3 &lt;= Len &lt;= 100000 ).<br><code>Output</code><br>For each case, you are required to output the minimum count of pearls added to make a CharmBracelet.<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">aaa</span><br><span class="line">abca</span><br><span class="line">abcde</span><br><span class="line">Sample Output</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">-1</span>;</span><br><span class="line">nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span> || str[k] == str[j])</span><br><span class="line">&#123;</span><br><span class="line">nxt[++ j] = ++ k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nxt[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">ll t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">n = str.size();</span><br><span class="line">kmp();</span><br><span class="line"><span class="comment">//n - nxt[n]为最小循环长度</span></span><br><span class="line"><span class="keyword">if</span>(nxt[n] &amp;&amp; n % (n - nxt[n]) == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="comment">//一个循环节的长度减去多余的长度，就是需要补的长度。</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n - nxt[n] - n % (n - nxt[n]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h2><p>Description:<br>For each prefix of a given string S with N characters (each character has an ASCII code between 97 and 126, inclusive), we want to know whether the prefix is a periodic string. That is, for each i (2 &lt;= i &lt;= N) we want to know the largest K &gt; 1 (if there is one) such that the prefix of S with length i can be written as A K ,that is A concatenated K times, for some string A. Of course, we also want to know the period K.<br><code>Input</code><br>The input consists of several test cases. Each test case consists of two lines. The first one contains N (2 &lt;= N &lt;= 1 000 000) – the size of the string S.The second line contains the string S. The input file ends with a line, having the<br>number zero on it.<br><code>Output</code><br>For each test case, output “Test case #” and the consecutive test case number on a single line; then, for each prefix with length i that has a period K &gt; 1, output the prefix size i and the period K separated by a single space; the prefix sizes must be in increasing order. Print a blank line after each test case.<br></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">3</span><br><span class="line">aaa</span><br><span class="line">12</span><br><span class="line">aabaabaabaab</span><br><span class="line">0</span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Test </span>case #1</span><br><span class="line">2 2</span><br><span class="line">3 3</span><br><span class="line"></span><br><span class="line"><span class="keyword">Test </span>case #2</span><br><span class="line">2 2</span><br><span class="line">6 2</span><br><span class="line">9 3</span><br><span class="line">12 4</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> nextval[N];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">nextval[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(i != len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">-1</span> || s[i] == s[j])</span><br><span class="line">nextval[++i] = ++j;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">j = nextval[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> length, add;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len) &amp;&amp; len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">getnext(s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>, T++);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i)</span><br><span class="line">&#123;</span><br><span class="line">length = i - nextval[i]; <span class="comment">//循环节的长度</span></span><br><span class="line"><span class="keyword">if</span>(i != length &amp;&amp; i % length == <span class="number">0</span>) <span class="comment">//如果有多个循环</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i, i / length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Power-Strings"><a href="#Power-Strings" class="headerlink" title="Power Strings"></a>Power Strings</h2><p>Description:<br>Given two strings a and b we define a<em>b to be their concatenation. For example, if a = “abc” and b = “def” then a</em>b = “abcdef”. If we think of concatenation as multiplication, exponentiation by a non-negative integer is defined in the normal way: a^0 = “” (the empty string) and a^(n+1) = a*(a^n).<br><code>Input</code><br>Each test case is a line of input representing s, a string of printable characters. The length of s will be at least 1 and will not exceed 1 million characters. A line containing a period follows the last test case.<br><code>Output</code><br>For each s you should print the largest n such that s = a^n for some string a.<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">abcd</span><br><span class="line">aaaa</span><br><span class="line">ababab</span><br><span class="line">.</span><br><span class="line">Sample Output</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">Hint</span><br><span class="line">This problem has huge input, <span class="keyword">use</span> scanf instead <span class="keyword">of</span> cin <span class="keyword">to</span> avoid <span class="built_in">time</span> <span class="keyword">limit</span> exceed.</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">1000010</span>];</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnxt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">-1</span>;</span><br><span class="line">nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">-1</span> || str[j] == str[k])</span><br><span class="line">&#123;</span><br><span class="line">nxt[++ j] = ++ k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nxt[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str == <span class="string">"."</span>) <span class="keyword">break</span>;</span><br><span class="line">n = str.size();</span><br><span class="line">getnxt();</span><br><span class="line"><span class="keyword">int</span> len = n - nxt[n];</span><br><span class="line"><span class="keyword">if</span>(n % len == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n / len);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"1\n"</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Seek-the-Name-Seek-the-Fame"><a href="#Seek-the-Name-Seek-the-Fame" class="headerlink" title="Seek the Name, Seek the Fame"></a>Seek the Name, Seek the Fame</h2><p>Description:<br>The little cat is so famous, that many couples tramp over hill and dale to Byteland, and asked the little cat to give names to their newly-born babies. They seek the name, and at the same time seek the fame. In order to escape from such boring job, the innovative little cat works out an easy but fantastic algorithm:</p><p>Step1. Connect the father’s name and the mother’s name, to a new string S.<br>Step2. Find a proper prefix-suffix string of S (which is not only the prefix, but also the suffix of S).</p><p>Example: Father=’ala’, Mother=’la’, we have S = ‘ala’+’la’ = ‘alala’. Potential prefix-suffix strings of S are {‘a’, ‘ala’, ‘alala’}. Given the string S, could you help the little cat to write a program to calculate the length of possible prefix-suffix strings of S? (He might thank you by giving your baby a name:)<br><code>Input</code><br>The input contains a number of test cases. Each test case occupies a single line that contains the string S described above.</p><p>Restrictions: Only lowercase letters may appear in the input. 1 &lt;= Length of S &lt;= 400000.<br><code>Output</code><br>For each test case, output a single line with integer numbers in increasing order, denoting the possible length of the new baby’s name.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">ababcababababcabab</span><br><span class="line">aaaaa</span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">9</span> <span class="number">18</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">400005</span>;</span><br><span class="line"><span class="keyword">char</span> p[N];</span><br><span class="line"><span class="keyword">int</span> next[N],arr[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> p[],<span class="keyword">int</span> m,<span class="keyword">int</span> next[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">-1</span>;</span><br><span class="line">next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;m)&#123;</span><br><span class="line"><span class="keyword">if</span>(t&lt;<span class="number">0</span>||p[j]==p[t])&#123;</span><br><span class="line">next[++j]=++t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> t=next[t];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,p)!=EOF)&#123;</span><br><span class="line"><span class="keyword">int</span> m=<span class="built_in">strlen</span>(p);</span><br><span class="line">getNext(p,m,next);</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m;next[i]!=<span class="number">-1</span>;i=next[i])</span><br><span class="line">   arr[cnt++]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=cnt<span class="number">-1</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Compress-Words"><a href="#Compress-Words" class="headerlink" title="Compress Words"></a>Compress Words</h2><p>Description:<br>Amugae has a sentence consisting of n words. He want to compress this sentence into one word. Amugae doesn’t like repetitions, so when he merges two words into one word, he removes the longest prefix of the second word that coincides with a suffix of the first word. For example, he merges “sample” and “please” into “samplease”.</p><p>Amugae will merge his sentence left to right (i.e. first merge the first two words, then merge the result with the third word and so on). Write a program that prints the compressed word after the merging process ends.</p><p><code>Input</code><br>The first line contains an integer n (1≤n≤105), the number of the words in Amugae’s sentence.</p><p>The second line contains n words separated by single space. Each words is non-empty and consists of uppercase and lowercase English letters and digits (‘A’, ‘B’, …, ‘Z’, ‘a’, ‘b’, …, ‘z’, ‘0’, ‘1’, …, ‘9’). The total length of the words does not exceed 106.</p><p><code>Output</code><br>In the only line output the compressed word after the merging process ends as described in the problem.</p><p><code>题解</code></p><blockquote><p>KMP模板题，用第二个串与第一个串中等长后缀进行匹配即可，比如第一个串长度为n，第二个串长度为m，n&gt;m，则从第一个串的n-m处开始与第二个串匹配，最大匹配长度即为可以合并的长度。<br></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line"><span class="keyword">Input</span></span><br><span class="line">5</span><br><span class="line">I want to <span class="keyword">order</span> pizza</span><br><span class="line">Output</span><br><span class="line">Iwantorderpizza</span><br><span class="line"><span class="keyword">Input</span></span><br><span class="line">5</span><br><span class="line"><span class="keyword">sample</span> please ease <span class="keyword">in</span> <span class="keyword">out</span></span><br><span class="line">Output</span><br><span class="line">sampleaseinout</span><br></pre></td></tr></table></figure><p></p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> nxt[maxn];</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">char</span> ans[maxn];</span><br><span class="line"><span class="keyword">int</span> lenn,lenm;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">-1</span>, j = <span class="number">0</span>;</span><br><span class="line">    nxt[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j &lt; lenm)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">-1</span> || str[j] == str[k]) nxt[++j] = ++k;</span><br><span class="line">        <span class="keyword">else</span> k = nxt[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回最长匹配长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">get_next();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; lenn; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (j&amp;&amp;ans[i] != str[j])j = nxt[j];</span><br><span class="line"><span class="keyword">if</span> (ans[i] == str[j])j++;</span><br><span class="line"><span class="keyword">if</span> (j == lenm) &#123;</span><br><span class="line"><span class="keyword">return</span> lenm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ans);</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">lenn=<span class="built_in">strlen</span>(ans);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">        lenm=<span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">int</span> now=KMP(max(pos-lenm,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=now;j&lt;lenm;j++)&#123;</span><br><span class="line">            ans[lenn++]=str[j];</span><br><span class="line">        &#125;</span><br><span class="line">        pos=lenn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lenn;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day27&quot;&gt;&lt;a href=&quot;#Day27&quot; class=&quot;headerlink&quot; title=&quot;Day27&quot;&gt;&lt;/a&gt;Day27&lt;/h1&gt;&lt;p&gt;今天讲的是 &lt;code&gt;KPM + hash算法&lt;/code&gt;&lt;br&gt;好好学习！！！&lt;br&gt;&lt;a href=&quot;https://vjudge.net/contest/320166&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OJ&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="KPM" scheme="http://yoursite.com/tags/KPM/"/>
    
      <category term="hash算法" scheme="http://yoursite.com/tags/hash%E7%AE%97%E6%B3%95/"/>
    
      <category term="匹配字符串算法" scheme="http://yoursite.com/tags/%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JAVA实现大数相加</title>
    <link href="http://yoursite.com/2019/08/16/JAVA%E5%AE%9E%E7%8E%B0%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>http://yoursite.com/2019/08/16/JAVA实现大数相加/</id>
    <published>2019-08-15T16:00:00.000Z</published>
    <updated>2019-08-22T01:15:16.727Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day27"><a href="#Day27" class="headerlink" title="Day27"></a>Day27</h1><p>今天无意间看到了，就记录下来吧，等有时间了再补上<br>好好学习！！！</p><a id="more"></a><h2 id="简单的介绍一下Java"><a href="#简单的介绍一下Java" class="headerlink" title="简单的介绍一下Java"></a>简单的介绍一下Java</h2><p>Java的大数相加：</p><h3 id="先导入包（和python有点点像）"><a href="#先导入包（和python有点点像）" class="headerlink" title="先导入包（和python有点点像）"></a>先导入包（和python有点点像）</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.*;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.util.*;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.math.*;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>*</code>就不用解释了吧(就是通配符，写一个*的话表示可以用到这个包下面)</p></blockquote><h4 id="介绍一下常用的包"><a href="#介绍一下常用的包" class="headerlink" title="介绍一下常用的包"></a>介绍一下常用的包</h4><table><thead><tr><th>所用到的包名</th><th>说明</th></tr></thead><tbody><tr><td>java.lang</td><td>该包提供了Java编程的基础类，例如 Object、Math、String、StringBuffer、System、Thread等，不使用该包就很难编写Java代码了。</td></tr><tr><td>java.util</td><td>该包提供了包含集合框架、遗留的集合类、事件模型、日期和时间实施、国际化和各种实用工具类（字符串标记生成器、随机数生成器和位数组）。</td></tr><tr><td>java.io</td><td>该包通过文件系统、数据流和序列化提供系统的输入与输出。</td></tr><tr><td>java.net</td><td>该包提供实现网络应用与开发的类。</td></tr><tr><td>java.sql</td><td>该包提供了使用Java语言访问并处理存储在数据源（通常是一个关系型数据库）中的数据API。</td></tr><tr><td>java.awt</td><td>这两个包提供了GUI设计与开发的类。java.awt包提供了创建界面和绘制图形图像的所有类，而javax.swing包提供了一组“轻量级”的组件，尽量让这些组件在所有平台上的工作方式相同。</td></tr><tr><td>java.swing</td><td></td></tr><tr><td>java.text</td><td>提供了与自然语言无关的方式来处理文本、日期、数字和消息的类和接口。</td></tr></tbody></table><p><code>详情链接</code></p><p><a href="https://beyond429.iteye.com/blog/344024" target="_blank" rel="noopener">java.lang 详解</a></p><p><a href="http://blog.csdn.net/abeetle/article/details/1497706" target="_blank" rel="noopener">java.util 详解</a></p><p><a href="http://blog.csdn.net/yczz/article/details/38761237" target="_blank" rel="noopener">java.io 详解</a></p><p><a href="https://zhidao.baidu.com/question/87061018.html" target="_blank" rel="noopener">java.net 详解</a></p><p><a href="http://www.360doc.com/content/12/0329/09/1200324_198823027.shtml" target="_blank" rel="noopener">java.sql 详解</a></p><p><a href="http://blog.csdn.net/u013147587/article/details/49815031" target="_blank" rel="noopener">java.awt 详解</a></p><p><a href="http://blog.sina.com.cn/s/blog_4a7979120100087g.html" target="_blank" rel="noopener">javax.swing 详解</a></p><p><a href="http://www.cnblogs.com/beibeibao/p/3411750.html" target="_blank" rel="noopener">java.text 详解</a></p><h3 id="书写格式"><a href="#书写格式" class="headerlink" title="书写格式"></a>书写格式</h3><p>主要入口为public static void main(String[] args){}<br>其中<code>String[] args</code>也可以写成<code>String args[]</code>，但还是推荐写第一种</p><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Text</span><span class="params">(自己命名)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特别注意！！"><a href="#特别注意！！" class="headerlink" title="特别注意！！"></a>特别注意！！</h3><p>Java中十分敏感大小写!!!<br>每一个单词的开头字母都要大写<br>Eg：First FirstApple</p><h3 id="JAVA实现大数相加模板"><a href="#JAVA实现大数相加模板" class="headerlink" title="JAVA实现大数相加模板"></a>JAVA实现大数相加模板</h3><p>对应题目HDU1002<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.*;</span><br><span class="line"><span class="comment">//注意一下，在OJ上交JAVA题的时候要把`自己命名`改成Main不然不给过编译</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> t = cin.nextInt();</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(t&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x!=<span class="number">0</span>)System.out.println(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">else</span> x=<span class="number">1</span>;</span><br><span class="line">BigInteger a = cin.nextBigInteger();</span><br><span class="line">BigInteger b = cin.nextBigInteger();</span><br><span class="line">System.out.println(<span class="string">"Case "</span>+num+<span class="string">":"</span>);</span><br><span class="line">System.out.println(a+<span class="string">" + "</span>+b+<span class="string">" = "</span>+a.add(b));</span><br><span class="line">num++;</span><br><span class="line">t--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="其他的大数模拟的例子"><a href="#其他的大数模拟的例子" class="headerlink" title="其他的大数模拟的例子"></a>其他的大数模拟的例子</h2><p><code>链接</code><br><a href="https://blog.csdn.net/Hpuer_Random/article/details/83663194" target="_blank" rel="noopener">(づ￣3￣)づ╭❤～</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day27&quot;&gt;&lt;a href=&quot;#Day27&quot; class=&quot;headerlink&quot; title=&quot;Day27&quot;&gt;&lt;/a&gt;Day27&lt;/h1&gt;&lt;p&gt;今天无意间看到了，就记录下来吧，等有时间了再补上&lt;br&gt;好好学习！！！&lt;/p&gt;
    
    </summary>
    
      <category term="JAVA" scheme="http://yoursite.com/categories/JAVA/"/>
    
      <category term="大数相加" scheme="http://yoursite.com/categories/JAVA/%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Day26</title>
    <link href="http://yoursite.com/2019/08/15/Day26/"/>
    <id>http://yoursite.com/2019/08/15/Day26/</id>
    <published>2019-08-14T16:00:00.000Z</published>
    <updated>2019-08-16T14:02:32.164Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day26"><a href="#Day26" class="headerlink" title="Day26"></a>Day26</h1><p>今天讲的是 <code>容斥定理 + 鸽巢原理</code><br>好好学习！！！<br><a href="https://vjudge.net/contest/317712#overview" target="_blank" rel="noopener">OJ</a><br><a id="more"></a></p><h2 id="内容讲解"><a href="#内容讲解" class="headerlink" title="内容讲解"></a>内容讲解</h2><p><a href="https://blog.csdn.net/qq_42757965/article/details/99060042" target="_blank" rel="noopener">传送门</a></p><h2 id="Ekka-Dokka"><a href="#Ekka-Dokka" class="headerlink" title="Ekka Dokka"></a>Ekka Dokka</h2><p>Description:<br>Ekka and his friend Dokka decided to buy a cake. They both love cakes and that’s why they want to share the cake after buying it. As the name suggested that Ekka is very fond of odd numbers and Dokka is very fond of even numbers, they want to divide the cake such that Ekka gets a share of N square centimeters and Dokka gets a share of M square centimeters where N is odd and M is even. Both N and M are positive integers.</p><p>They want to divide the cake such that N * M = W, where W is the dashing factor set by them. Now you know their dashing factor, you have to find whether they can buy the desired cake or not.</p><p><code>Input</code><br>Input starts with an integer T (≤ 10000), denoting the number of test cases.</p><p>Each case contains an integer W (2 ≤ W &lt; 2^63). And W will not be a power of 2.</p><p><code>Output</code><br>For each case, print the case number first. After that print “Impossible” if they can’t buy their desired cake. If they can buy such a cake, you have to print N and M. If there are multiple solutions, then print the result where M is as small as possible.<br></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample <span class="keyword">Input</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span>: <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>: Impossible</span><br><span class="line"><span class="keyword">Case</span> <span class="number">3</span>: <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll t, w;</span><br><span class="line">ll k = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;w);</span><br><span class="line">ll x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(w % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(w % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">x *= <span class="number">2</span>;</span><br><span class="line">w /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %lld: %lld %lld\n"</span>,k ++, w, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case %lld: Impossible\n"</span>,k ++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="How-many-integers-can-you-find"><a href="#How-many-integers-can-you-find" class="headerlink" title="How many integers can you find"></a>How many integers can you find</h2><p>Description:<br>Now you get a number N, and a M-integers set, you should find out how many integers which are small than N, that they can divided exactly by any integers in the set. For example, N=12, and M-integer set is {2,3}, so there is another set {2,3,4,6,8,9,10}, all the integers of the set can be divided exactly by 2 or 3. As a result, you just output the number 7.<br><code>Input</code><br>There are a lot of cases. For each case, the first line contains two integers N and M. The follow line contains the M integers, and all of them are different from each other. 0&lt;N&lt;2^31,0&lt;M&lt;=10, and the M integer are non-negative and won’t exceed 20.<br><code>Output</code><br>For each case, output the number.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">12</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> !b ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">lcm</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a / gcd(a, b) * b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">11</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll n, m, cnt;</span><br><span class="line">ll sum, cnt1, LCM;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;n, &amp;m))</span><br><span class="line">&#123;</span><br><span class="line">ll x;</span><br><span class="line">cnt = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(x != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[cnt ++] = x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; cnt); i ++)</span><br><span class="line">&#123;</span><br><span class="line">cnt1 = <span class="number">0</span>, LCM = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">cnt1 ++;</span><br><span class="line">LCM = lcm(LCM, a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt1 % <span class="number">2</span> == <span class="number">0</span>) sum -= (n - <span class="number">1</span>) / LCM;</span><br><span class="line"><span class="keyword">else</span> sum += (n - <span class="number">1</span>) / LCM;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Co-prime"><a href="#Co-prime" class="headerlink" title="Co-prime"></a>Co-prime</h2><p>Description:<br>Given a number N, you are asked to count the number of integers between A and B inclusive which are relatively prime to N.<br>Two integers are said to be co-prime or relatively prime if they have no common positive divisors other than 1 or, equivalently, if their greatest common divisor is 1. The number 1 is relatively prime to every integer.<br><code>Input</code><br>The first line on input contains T (0 &lt; T &lt;= 100) the number of test cases, each of the next T lines contains three integers A, B, N where (1 &lt;= A &lt;= B &lt;= 10^15) and (1 &lt;=N &lt;= 10^9).<br><code>Output</code><br>For each test case, print the number of integers between A and B inclusive which are relatively prime to N. Follow the output format below.<br></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">15</span> <span class="number">5</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Case</span> <span class="meta">#1: 5</span></span><br><span class="line"><span class="keyword">Case</span> <span class="meta">#2: 10</span></span><br><span class="line"></span><br><span class="line">Hint</span><br><span class="line"><span class="keyword">In</span> the first test <span class="keyword">case</span>, the five integers <span class="keyword">in</span> range [<span class="number">1</span>,<span class="number">10</span>] which are relatively prime <span class="keyword">to</span> <span class="number">2</span> are &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;.</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> aa[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll t, a, b, n;</span><br><span class="line">ll k = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line">ll cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">aa[++ cnt] = i;</span><br><span class="line"><span class="keyword">while</span>(n % i == <span class="number">0</span>)</span><br><span class="line">n = n / i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n != <span class="number">1</span>)</span><br><span class="line">aa[++ cnt] = n;</span><br><span class="line">ll sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; cnt); i ++)</span><br><span class="line">&#123;</span><br><span class="line">ll ans = <span class="number">0</span>, sum1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> &amp; (i &gt;&gt; j))</span><br><span class="line">&#123;</span><br><span class="line">sum1 = sum1 * aa[j + <span class="number">1</span>];</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += b / sum1;</span><br><span class="line">sum -= (a - <span class="number">1</span>) / sum1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sum -= b / sum1;</span><br><span class="line">sum += (a - <span class="number">1</span>) / sum1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>, k ++, b - a + <span class="number">1</span> - sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Find-a-multiple"><a href="#Find-a-multiple" class="headerlink" title="Find a multiple"></a>Find a multiple</h2><p>Description:<br>The input contains N natural (i.e. positive integer) numbers ( N &lt;= 10000 ). Each of that numbers is not greater than 15000. This numbers are not necessarily different (so it may happen that two or more of them will be equal). Your task is to choose a few of given numbers ( 1 &lt;= few &lt;= N ) so that the sum of chosen numbers is multiple for N (i.e. N * k = (sum of chosen numbers) for some natural number k).<br><code>Input</code><br>The first line of the input contains the single number N. Each of next N lines contains one number from the given set.<br><code>Output</code><br>In case your program decides that the target set of numbers can not be found it should print to the output the single number 0. Otherwise it should print the number of the chosen numbers in the first line followed by the chosen numbers themselves (on a separate line each) in arbitrary order.</p><p>If there are more than one set of numbers with required properties you should print to the output only one (preferably your favorite) of them.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>这一题的解不是固定的<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"><span class="keyword">int</span> sum[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">sum[i] = (sum[i - <span class="number">1</span>] + a[i]) % n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[i] == sum[j])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,j - i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= j; k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[k] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种写法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"><span class="keyword">int</span> sum[maxx];</span><br><span class="line"><span class="keyword">int</span> b[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">sum[i] = (sum[i - <span class="number">1</span>] + a[i]) % n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j != <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, a[j]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b[sum[i]] == <span class="number">0</span>)</span><br><span class="line">b[sum[i]] = i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i - b[sum[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = b[sum[i]] + <span class="number">1</span>; j &lt;= i; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j != b[sum[i]] + <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">" %d"</span>,a[j]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="吃糖果"><a href="#吃糖果" class="headerlink" title="吃糖果"></a>吃糖果</h2><p>Description:<br>HOHO，终于从Speakless手上赢走了所有的糖果，是Gardon吃糖果时有个特殊的癖好，就是不喜欢将一样的糖果放在一起吃，喜欢先吃一种，下一次吃另一种，这样；可是Gardon不知道是否存在一种吃糖果的顺序使得他能把所有糖果都吃完？请你写个程序帮忙计算一下。<br><code>Input</code><br>第一行有一个整数T，接下来T组数据，每组数据占2行，第一行是一个整数N（0&lt;N&lt;=1000000)，第二行是N个数，表示N种糖果的数目Mi(0&lt;Mi&lt;=1000000)。<br><code>Output</code><br>对于每组数据，输出一行，包含一个”Yes”或者”No”。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line">Sample Output</span><br><span class="line">No</span><br><span class="line">Yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please use function scanf</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line">ll sum;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll t, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(a[n] &lt;= sum - a[n] + <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Teacher-Bo"><a href="#Teacher-Bo" class="headerlink" title="Teacher Bo"></a>Teacher Bo</h2><p>Description:<br>Teacher BoBo is a geography teacher in the school.One day in his class,he marked N points in the map,the i-th point is at (Xi,Yi).He wonders,whether there is a tetrad (A,B,C,D)(A&lt;B,C&lt;D,A≠CorB≠D) such that the manhattan distance between A and B is equal to the manhattan distance between C and D.</p><p>If there exists such tetrad,print “YES”,else print “NO”.<br><code>Input</code><br>First line, an integer T. There are T test cases.(T≤50)</p><p>In each test case,the first line contains two intergers, N, M, means the number of points and the range of the coordinates.(N,M≤105).</p><p>Next N lines, the i-th line shows the coordinate of the i-th point.(Xi,Yi)(0≤Xi,Yi≤M).<br><code>Output</code><br>T lines, each line is “YES” or “NO”.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">10</span></span><br><span class="line"><span class="number">8</span> <span class="number">8</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line">Sample Output</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span> &gt; mp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;e[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">mp.clear();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;e[i].x, &amp;e[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">abs</span>(e[i].x - e[j].x) + <span class="built_in">abs</span>(e[i].y - e[j].y);</span><br><span class="line">mp[x] ++;</span><br><span class="line"><span class="keyword">if</span>(mp[x] &gt;= <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="跳蚤"><a href="#跳蚤" class="headerlink" title="跳蚤"></a>跳蚤</h2><p>Description:<br>Z城市居住着很多只跳蚤。在Z城市周六生活频道有一个娱乐节目。一只跳蚤将被请上一个高空钢丝的正中央。钢丝很长，可以看作是无限长。节目主持人会给该跳蚤发一张卡片。卡片上写有N+1个自然数。其中最后一个是M，而前N个数都不超过M，卡片上允许有相同的数字。跳蚤每次可以从卡片上任意选择一个自然数S，然后向左，或向右跳S个单位长度。而他最终的任务是跳到距离他左边一个单位长度的地方，并捡起位于那里的礼物。<br>比如当N=2，M=18时，持有卡片(10, 15, 18)的跳蚤，就可以完成任务：他可以先向左跳10个单位长度，然后再连向左跳3次，每次15个单位长度，最后再向右连跳3次，每次18个单位长度。而持有卡片(12, 15, 18)的跳蚤，则怎么也不可能跳到距他左边一个单位长度的地方。<br>当确定N和M后，显然一共有M^N张不同的卡片。现在的问题是，在这所有的卡片中，有多少张可以完成任务。<br><code>Input</code><br>两个整数N和M(N &lt;= 15 , M &lt;= 100000000)。<br><code>Output</code><br>可以完成任务的卡片数。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">12</span></span><br><span class="line">Hint</span><br><span class="line">这<span class="number">12</span>张卡片分别是：</span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>), (<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p></p><blockquote><p>设卡片号为 a1,a2,…,an,m，跳蚤跳到对应号的次数是 x1,x2,…,xn，跳 m 个单位长度的次数是 xn+1<br>那么问题就转化为求：a[1]<em>x1+a[2]</em>x2+…+a[n]<em>xn+m</em>x(n+1)=1，一共有多少种情况而上述公式实质是求：GCD(a1,a2,…,an,m)=1<br>故先对 m 进行素因子分解，求出总的排列组合个数，即有：m^n 种，再根据容斥定理排除公因子非 1 的情况即可<br>设 g 为公因子非 1 的情况数，f(i) 表示有 i 个公因子的情况数，根据奇加偶减，有：g=f(1)-f(2)+f(3)-…f(k)<br>设g为公因子非1的情况数，f(i) 表示有 i 个公因子的情况数，由容斥原理得：g = f(1) - f(2) + f(3) -… f(k)</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx], num;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[++ num] = i;</span><br><span class="line"><span class="keyword">while</span>(n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">n = n / i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n &gt; <span class="number">1</span>) a[++ num] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">quick_pow</span><span class="params">(ll a, ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">a = a *  a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">ll temp, ans;</span><br><span class="line"><span class="keyword">int</span> aa[<span class="number">110</span>], n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> b, <span class="keyword">int</span> cnt, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt == c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= c; i ++)</span><br><span class="line">&#123;</span><br><span class="line">x = x / aa[i];</span><br><span class="line">&#125;</span><br><span class="line">temp += quick_pow(x, n);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = b + <span class="number">1</span>; i &lt;= num; i ++)</span><br><span class="line">&#123;</span><br><span class="line">aa[cnt + <span class="number">1</span>] = a[i];</span><br><span class="line">dfs(i, cnt + <span class="number">1</span>, c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m))</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">get_prime(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i ++)</span><br><span class="line">&#123;</span><br><span class="line">temp = <span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>, i);</span><br><span class="line"><span class="keyword">if</span>(i &amp; <span class="number">1</span>) ans += temp;</span><br><span class="line"><span class="keyword">else</span> ans -= temp;</span><br><span class="line">&#125;</span><br><span class="line">ans = quick_pow(m, n) - ans;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day26&quot;&gt;&lt;a href=&quot;#Day26&quot; class=&quot;headerlink&quot; title=&quot;Day26&quot;&gt;&lt;/a&gt;Day26&lt;/h1&gt;&lt;p&gt;今天讲的是 &lt;code&gt;容斥定理 + 鸽巢原理&lt;/code&gt;&lt;br&gt;好好学习！！！&lt;br&gt;&lt;a href=&quot;https://vjudge.net/contest/317712#overview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OJ&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="容斥原理" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
      <category term="鸽巢定理" scheme="http://yoursite.com/tags/%E9%B8%BD%E5%B7%A2%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Day25</title>
    <link href="http://yoursite.com/2019/08/14/Day25/"/>
    <id>http://yoursite.com/2019/08/14/Day25/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2019-08-15T15:15:39.372Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day25"><a href="#Day25" class="headerlink" title="Day25"></a>Day25</h1><p>今天讲的是 <code>扩展欧几里得+逆元</code> ，没咋学会。。。<br>数论是真的难！！！(可能只是对我而言吧)<br><code>补题</code><br><a id="more"></a></p><h1 id="逆元解释"><a href="#逆元解释" class="headerlink" title="逆元解释"></a>逆元解释</h1><p><a href="https://blog.csdn.net/zhjchengfeng5/article/details/7786595" target="_blank" rel="noopener">扩展欧几里得</a><br><a href="https://blog.csdn.net/ACdreamers/article/details/8220787" target="_blank" rel="noopener">逆元</a></p><h2 id="Problem-A"><a href="#Problem-A" class="headerlink" title="Problem A"></a>Problem A</h2><p>Description:<br>度熊手上有一本字典存储了大量的单词，有一次，他把所有单词组成了一个很长很长的字符串。现在麻烦来了，他忘记了原来的字符串都是什么，神奇的是他竟然记得原来那些字符串的哈希值。一个字符串的哈希值，由以下公式计算得到：</p><p>H(s)=∏{(i≤len(s))i=1}(Si−28) (mod 9973)</p><p>Si代表 S[i] 字符的 ASCII 码。</p><p>请帮助度熊计算大字符串中任意一段的哈希值是多少。<br><code>Input</code><br>多组测试数据，每组测试数据第一行是一个正整数N，代表询问的次数，第二行一个字符串，代表题目中的大字符串，接下来N行，每行包含两个正整数a和b，代表询问的起始位置以及终止位置。<br>1≤N≤1,000<br>1≤len(string)≤100,000<br>1≤a,b≤len(string)<br><code>Output</code><br>对于每一个询问，输出一个整数值，代表大字符串从 a 位到 b 位的子串的哈希值。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line">ACMlove2015</span><br><span class="line"><span class="number">1</span> <span class="number">11</span></span><br><span class="line"><span class="number">8</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">testMessage</span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">6891</span></span><br><span class="line"><span class="number">9240</span></span><br><span class="line"><span class="number">88</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>开一个arr数组存入区间1到i的乘积，算[a, b]区间时只需用arr[b]/arr[a-1]，然后求出arr[a-1]的逆元即可。<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">ll n, a, b, x, y;</span><br><span class="line">ll arr[MAXN];</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll r = exgcd(b, a%b, x, y);</span><br><span class="line">    ll t = y;</span><br><span class="line">    y = x - (a/b) * y;</span><br><span class="line">    x = t;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll gcd = exgcd(a, n, x, y);</span><br><span class="line">    <span class="keyword">return</span> (x+n)%n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i] = arr[i<span class="number">-1</span>]*(s[i<span class="number">-1</span>] - <span class="number">28</span>)%<span class="number">9973</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;arr[b]*inv(arr[a<span class="number">-1</span>], <span class="number">9973</span>)%<span class="number">9973</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="A-B"><a href="#A-B" class="headerlink" title="A/B"></a>A/B</h2><p>Description:<br>要求(A/B)%9973，但由于A很大，我们只给出n(n=A%9973)(我们给定的A必能被B整除，且gcd(B,9973) = 1)。<br><code>Input</code><br>数据的第一行是一个T，表示有T组数据。<br>每组数据有两个数n(0 &lt;= n &lt; 9973)和B(1 &lt;= B &lt;= 10^9)。<br><code>Output</code><br>对应每组数据输出(A/B)%9973。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1000</span> <span class="number">53</span></span><br><span class="line"><span class="number">87</span> <span class="number">123456789</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">7922</span></span><br><span class="line"><span class="number">6060</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展欧几里得算法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b)</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r = exgcd(b, a % b, x, y);</span><br><span class="line"><span class="keyword">int</span> t = y;</span><br><span class="line">y = x - (a / b) * y;</span><br><span class="line">x = t;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, a, b, mod = <span class="number">9973</span>;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">exgcd(b, mod, x, y);</span><br><span class="line">x = (x + mod) % mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, x * a % mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//试探法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9973</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(((i * (b % <span class="number">9973</span>) % <span class="number">9973</span>) - a) % <span class="number">9973</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Fansblog"><a href="#Fansblog" class="headerlink" title="Fansblog"></a>Fansblog</h2><p>Description:<br>Farmer John keeps a website called ‘FansBlog’ .Everyday , there are many people visited this blog.One day, he find the visits has reached P , which is a prime number.He thinks it is a interesting fact.And he remembers that the visits had reached another prime number.He try to find out the largest prime number Q ( Q &lt; P ) ,and get the answer of Q! Module P.But he is too busy to find out the answer. So he ask you for help. ( Q! is the product of all positive integers less than or equal to n: n! = n <em>(n-1) </em>(n-2) <em>(n-3) </em>… <em>3 </em>2 <em>1 . For example, 4! = 4 </em>3 <em>2 </em>1 = 24 )<br><code>Input</code><br>First line contains an number T(1&lt;=T&lt;=10) indicating the number of testcases.<br>Then T line follows, each contains a positive prime number P (1e9≤p≤1e14)<br><code>Output</code><br>For each testcase, output an integer representing the factorial of Q modulo P.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1000000007</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">328400734</span></span><br></pre></td></tr></table></figure><p></p><p><code>题意</code></p><blockquote><p>就是问一个质数p，求刚好不大于p的质数q的阶乘对p取模的值<br>首先我们要知道威尔逊定理：对于一个质数p，(p - 1) ! % p = p - 1<br>于是，我们可以得出<br>q ! <em>(q+1) </em>(q + 2) <em>… </em>(p - 2) <em>(p - 1) % p = p-1<br>现在答案就很明显了，ans = (p - 1) </em>inv(p - 1) <em>inv(p - 2) </em>… <em>inv(q + 2) </em>inv(q + 1)<br>q的话就直接暴力求就好了，然后还要注意一下<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">1</span> || !x) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ll r = <span class="built_in">sqrt</span>(x);</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">3</span>;i &lt;= r;i ++)</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">ksc</span><span class="params">(ll a,ll b,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a*b-(ll)((<span class="keyword">long</span> <span class="keyword">double</span>)a/p*b)*p+p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = ksc(ans,a,p);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = ksc(a,a,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll x,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> qpow(x,p<span class="number">-2</span>,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        ll p;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p;</span><br><span class="line">        ll ans = p<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (ll x = p - <span class="number">2</span>;;x -= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (check(x))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (ll i = x + <span class="number">1</span>;i &lt; p;i ++)</span><br><span class="line">                    ans = ksc(ans,inv(i,p),p);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="Romantic"><a href="#Romantic" class="headerlink" title="Romantic"></a>Romantic</h2><p>Description:<br>Girls are clever and bright. In HDU every girl like math. Every girl like to solve math problem!<br>Now tell you two nonnegative integer a and b. Find the nonnegative integer X and integer Y to satisfy X<em>a + Y</em>b = 1. If no such answer print “sorry” instead.<br><code>Input</code><br>The input contains multiple test cases.<br>Each case two nonnegative integer a,b (0&lt;a, b&lt;=2^31)<br><code>Output</code><br>output nonnegative integer X and integer Y, if there are more answers than the X smaller one will be choosed. If no answer put “sorry” instead.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">77</span> <span class="number">51</span></span><br><span class="line"><span class="number">10</span> <span class="number">44</span></span><br><span class="line"><span class="number">34</span> <span class="number">79</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">2</span> <span class="number">-3</span></span><br><span class="line">sorry</span><br><span class="line"><span class="number">7</span> <span class="number">-3</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>很明显的exgcd，如果gcd != 1时就sorry，因为要求的x为非负数，所以写一个while每次加b即可。<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b)</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r = exgcd(b, a % b, x, y);</span><br><span class="line"><span class="keyword">int</span> t = x;</span><br><span class="line">x = y;</span><br><span class="line">y = t - (a / b) * y;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, x, y;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a, &amp;b))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ans = exgcd(a, b, x, y);</span><br><span class="line"><span class="keyword">if</span>(ans != <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"sorry"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">x += b;</span><br><span class="line">y -= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="Integer-Divisibility"><a href="#Integer-Divisibility" class="headerlink" title="Integer Divisibility"></a>Integer Divisibility</h2><p>Description:<br>If an integer is not divisible by 2 or 5, some multiple of that number in decimal notation is a sequence of only a digit. Now you are given the number and the only allowable digit, you should report the number of digits of such multiple.</p><p>For example you have to find a multiple of 3 which contains only 1’s. Then the result is 3 because is 111 (3-digit) divisible by 3. Similarly if you are finding some multiple of 7 which contains only 3’s then, the result is 6, because 333333 is divisible by 7.</p><p><code>Input</code><br>Input starts with an integer T (≤ 300), denoting the number of test cases.</p><p>Each case will contain two integers n (0 &lt; n ≤ 106 and n will not be divisible by 2 or 5) and the allowable digit (1 ≤ digit ≤ 9).</p><p><code>Output</code><br>For each case, print the case number and the number of digits of such multiple. If several solutions are there; report the minimum one.<br></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample <span class="keyword">Input</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">9901</span> <span class="number">1</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span>: <span class="number">3</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>: <span class="number">6</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">3</span>: <span class="number">12</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>同余定理的运用，每次在原基础上乘10并加上d就可以了。<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">ll a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">ll m = b % a;</span><br><span class="line"><span class="keyword">while</span>(m)</span><br><span class="line">&#123;</span><br><span class="line">m = (m * <span class="number">10</span> + b) % a;</span><br><span class="line">cnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>, k ++, cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="Large-Division"><a href="#Large-Division" class="headerlink" title="Large Division"></a>Large Division</h2><p>Description:<br>Given two integers, a and b, you should check whether a is divisible by b or not. We know that an integer a is divisible by an integer b if and only if there exists an integer c such that a = b * c.</p><p><code>Input</code><br>Input starts with an integer T (≤ 525), denoting the number of test cases.</p><p>Each case starts with a line containing two integers a (-10200 ≤ a ≤ 10200) and b (|b| &gt; 0, b fits into a 32 bit signed integer). Numbers will not contain leading zeroes.</p><p><code>Output</code><br>For each case, print the case number first. Then print ‘divisible’ if a is divisible by b. Otherwise print ‘not divisible’.<br></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample <span class="keyword">Input</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">101</span> <span class="number">101</span></span><br><span class="line"><span class="number">0</span> <span class="number">67</span></span><br><span class="line"><span class="number">-101</span> <span class="number">101</span></span><br><span class="line"><span class="number">7678123668327637674887634</span> <span class="number">101</span></span><br><span class="line"><span class="number">11010000000000000000</span> <span class="number">256</span></span><br><span class="line"><span class="number">-202202202202000202202202</span> <span class="number">-101</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span>: divisible</span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>: divisible</span><br><span class="line"><span class="keyword">Case</span> <span class="number">3</span>: divisible</span><br><span class="line"><span class="keyword">Case</span> <span class="number">4</span>: <span class="keyword">not</span> divisible</span><br><span class="line"><span class="keyword">Case</span> <span class="number">5</span>: divisible</span><br><span class="line"><span class="keyword">Case</span> <span class="number">6</span>: divisible</span><br></pre></td></tr></table></figure><p></p><blockquote><p>大数取模，和上一题差不多，需要注意的是保存a的值用long long类型，因为在乘的过程中可能会爆int。<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line">ll mod;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mod;</span><br><span class="line"><span class="keyword">int</span> len = str.size();</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i] == <span class="string">'-'</span>) <span class="keyword">continue</span>;</span><br><span class="line">ans = ans * <span class="number">10</span> + (str[i] - <span class="string">'0'</span>);</span><br><span class="line">ans %= mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans % mod)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: not divisible\n"</span>, k ++);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: divisible\n"</span>, k ++);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="青蛙的约会"><a href="#青蛙的约会" class="headerlink" title="青蛙的约会"></a>青蛙的约会</h2><p>Description:<br>两只青蛙在网上相识了，它们聊得很开心，于是觉得很有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西跳，直到碰面为止。可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过青蛙们都是很乐观的，它们觉得只要一直朝着某个方向跳下去，总能碰到对方的。但是除非这两只青蛙在同一时间跳到同一点上，不然是永远都不可能碰面的。为了帮助这两只乐观的青蛙，你被要求写一个程序来判断这两只青蛙是否能够碰面，会在什么时候碰面。<br>我们把这两只青蛙分别叫做青蛙A和青蛙B，并且规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设青蛙A的出发点坐标是x，青蛙B的出发点坐标是y。青蛙A一次能跳m米，青蛙B一次能跳n米，两只青蛙跳一次所花费的时间相同。纬度线总长L米。现在要你求出它们跳了几次以后才会碰面。<br><code>Input</code><br>输入只包括一行5个整数x，y，m，n，L，其中x≠y &lt; 2000000000，0 &lt; m、n &lt; 2000000000，0 &lt; L &lt; 2100000000。<br><code>Output</code><br>输出碰面所需要的跳跃次数，如果永远不可能碰面则输出一行”Impossible”<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><p><a href="https://www.cnblogs.com/comeon4mydream/archive/2011/07/18/2109060.html" target="_blank" rel="noopener">详细题解</a><br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = (<span class="keyword">int</span>)<span class="number">1e5</span> +<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,  ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll r = exgcd(b, a%b, y, x);</span><br><span class="line">    y -= a/b*x;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x, y, m, n, l;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;m&gt;&gt;n&gt;&gt;l;</span><br><span class="line">    ll a, b, c, gcd;</span><br><span class="line">    a = m-n;</span><br><span class="line">    b = l;</span><br><span class="line">    c = y-x;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>)<span class="comment">//使计算gcd值为正</span></span><br><span class="line">    &#123;</span><br><span class="line">        a = -a;</span><br><span class="line">        c = -c;</span><br><span class="line">    &#125;</span><br><span class="line">    gcd = exgcd(a, b, x, y);</span><br><span class="line">    <span class="keyword">if</span>(c%gcd != <span class="number">0</span>)<span class="comment">//这样得不到整数解</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        x = x*c/gcd;</span><br><span class="line">        ll t = b/gcd;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(x%t+t)%t&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//x可能为负，这样写保证了值为正</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Candy-Distribution"><a href="#Candy-Distribution" class="headerlink" title="Candy Distribution"></a>Candy Distribution</h2><p>Description:<br>Kids like candies, so much that they start beating each other if the candies are not fairly distributed. So on your next party, you better start thinking before you buy the candies.</p><p>If there are K kids, we of course need K⋅X candies for a fair distribution, where X is a positive natural number. But we learned that always at least one kid looses one candy, so better be prepared with exactly one spare candy, resulting in (K⋅X)+1 candies.</p><p>Usually, the candies are packed into bags with a fixed number of candies C. We will buy some of these bags so that the above constraints are fulfilled.</p><p><code>Input</code><br>The first line gives the number of test cases t (0&lt;t&lt;100). Each test case is specified by two integers K and C on a single line, where K is the number of kids and C the number of candies in one bag (1≤K,C≤109). As you money is limited, you will never buy more than 109 candy bags.</p><p><code>Output</code><br>For each test case, print one line. If there is no such number of candy bugs to fulfill the above constraints, print “IMPOSSIBLE” instead. Otherwise print the number of candy bags, you want to buy. If there is more than one solution, any will do.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">10</span> <span class="number">5</span></span><br><span class="line"><span class="number">10</span> <span class="number">7</span></span><br><span class="line"><span class="number">1337</span> <span class="number">23</span></span><br><span class="line"><span class="number">123454321</span> <span class="number">42</span></span><br><span class="line"><span class="number">999999937</span> <span class="number">142857133</span></span><br><span class="line">Sample Output <span class="number">1</span></span><br><span class="line">IMPOSSIBLE</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">872</span></span><br><span class="line"><span class="number">14696943</span></span><br><span class="line"><span class="number">166666655</span></span><br></pre></td></tr></table></figure><p></p><p><code>题解</code></p><blockquote><p>根据题意，我们可以推出来 Cans + 1 = Kx<br>易知 Kx - Cans = 1，即ax + by = gcd(a,b)<br>所以对于gcd(K , C) == 1，我们用扩展欧几里得求出一个ans，否则输出impossible<br>但是要注意求出的ans是负数的话要通过加K变为正的，然后对于C = 1 的情况要输出K+1<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>,y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> r = exgcd(b,a%b,x,y);</span><br><span class="line">    <span class="keyword">int</span> tmp = y;</span><br><span class="line">    y = x - (a / b) * y;</span><br><span class="line">    x = tmp;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span> (t --)</span><br><span class="line">    &#123;</span><br><span class="line">        ll a,b,x,y;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        ll _ = exgcd(a,b,x,y);</span><br><span class="line">        <span class="keyword">if</span> (_ != <span class="number">1</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"IMPOSSIBLE"</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;a+<span class="number">1</span>&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (y &lt;= <span class="number">0</span>) y += a;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;y&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day25&quot;&gt;&lt;a href=&quot;#Day25&quot; class=&quot;headerlink&quot; title=&quot;Day25&quot;&gt;&lt;/a&gt;Day25&lt;/h1&gt;&lt;p&gt;今天讲的是 &lt;code&gt;扩展欧几里得+逆元&lt;/code&gt; ，没咋学会。。。&lt;br&gt;数论是真的难！！！(可能只是对我而言吧)&lt;br&gt;&lt;code&gt;补题&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="同余定理" scheme="http://yoursite.com/tags/%E5%90%8C%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Day24</title>
    <link href="http://yoursite.com/2019/08/13/Day24/"/>
    <id>http://yoursite.com/2019/08/13/Day24/</id>
    <published>2019-08-12T16:00:00.000Z</published>
    <updated>2019-08-13T15:11:06.767Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day23"><a href="#Day23" class="headerlink" title="Day23"></a>Day23</h1><p>今天和学长们一起打了学长们的积分赛。。。<br>战况还行<br><code>补题</code><br><a href="http://acm.zzuli.edu.cn/contest.php?cid=1398" target="_blank" rel="noopener">OJ链接</a><br><a id="more"></a></p><h2 id="小L的项链切割"><a href="#小L的项链切割" class="headerlink" title="小L的项链切割"></a>小L的项链切割</h2><p>题目描述<br>小T送给了小L了一串项链。为了方便，我们把项链上形态不同钻石用不同的字母表示。这样小L的项链就变成了一个字符串。小L忽然想把这串项链优美地切割一下，她想把它切割成尽量少的回文项链，啊也就是回文串。求最少的切割次数。<br><code>输入</code><br>第一行一个整数T 表示数据组数<br>下面T组数据，每一组数据:<br>只有一行，一个只有小写英文字母的字符串，字符串长度 &lt;= 1000。<br><code>输出</code><br>对于每一组数据，输出将这个字符串能切割成最少的回文串所需切割的次数。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">样例输入</span><br><span class="line"><span class="number">2</span></span><br><span class="line">abaacca</span><br><span class="line">abcd</span><br><span class="line">样例输出</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>解法<br>令dp[i]表示从字符串从位置1到位置 i ，最少要切割多少次<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e3</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> dp[MAXN];</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[l]!=s[r])</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                l++;</span><br><span class="line">                r--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">        <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i) &#123;</span><br><span class="line">                        dp[i] = MAXN;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;++j) &#123;</span><br><span class="line">                                <span class="keyword">if</span>(check(s,j,i)) &#123;</span><br><span class="line">                                        <span class="keyword">if</span>(j==<span class="number">1</span>)</span><br><span class="line">                                                dp[i] = <span class="number">1</span>;</span><br><span class="line">                                        <span class="keyword">else</span></span><br><span class="line">                                                dp[i] = min(dp[i],dp[j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[len]<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="小L的试卷"><a href="#小L的试卷" class="headerlink" title="小L的试卷"></a>小L的试卷</h2><p>Description:<br>题目描述<br>小L期末考试结束，高高兴兴放假回家了，可是那么多试卷，老师还要加班批改，有n份试卷由k个老师批改，n份试卷进行了密封编号，由于试卷上的做题情况和书写的规范程序不一样，批改不同的试卷用时也可能不一样，每个老师批改试卷的编号顺序是连续的，每位老师批改完分配给自己的试卷就可以离开，问最后离开的老师，最短可能的用时是多少，假定一份试卷让任何一位老师批改用时都是一样的。现在请你设计一种分配方案，使得最后离开的老师用时最短。<br><code>输入</code><br>第一行两个整数n，k；（0&lt;k≤n≤1000）<br>第二行n个整数，第i个整数表示批改第i份试卷的用时。<br><code>输出</code><br>输出一个整数，表示最后离开的老师所用的最短时间<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">样例输入</span><br><span class="line"><span class="number">9</span> <span class="number">3</span>                              </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">样例输出</span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure><p></p><blockquote><p>二分求解<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , k;</span><br><span class="line">ll a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isok</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    ll temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; x)  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        temp += a[i];</span><br><span class="line">        <span class="keyword">if</span> (temp &gt; x)</span><br><span class="line">        &#123;</span><br><span class="line">            num ++;</span><br><span class="line">            temp = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp &gt; <span class="number">0</span>)  num ++;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= k)  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)  <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">    ll l = <span class="number">0</span> , r = inf;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (isok(mid))  r = mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span>  l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="小L记单词"><a href="#小L记单词" class="headerlink" title="小L记单词"></a>小L记单词</h2><p>Description:<br>题目描述<br>小L最近在努力学习英语，但是对一些词组总是记不住，小L小把这些词组中每一个单词的首字母都记一下，这样形成词组的缩写，通过这种方式小L的学习效率明显提高。<br><code>输入</code><br>输入有多行，每组测试数据占一行，每行有一个词组，每个词组由一个或多个单词组成；每组的单词个数不超过10个，每个单词由大、小写字母组成；<br>单词长度不超过10，由一个空格分隔这些单词。<br><code>输出</code><br>对应每一个词组，输出词组的缩写，缩写都用大写字母，每组输出占一行。<br></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">样例输入</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">of</span> <span class="built_in">file</span></span><br><span class="line">样例输出</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">110</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">char</span> a[maxx];</span><br><span class="line"><span class="keyword">while</span>(getline(<span class="built_in">cin</span>,str))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">a[<span class="number">0</span>] = str[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; str.size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[i - <span class="number">1</span>] == <span class="string">' '</span>)</span><br><span class="line">a[len ++] = str[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= <span class="string">'a'</span> &amp;&amp; a[i] &lt;= <span class="string">'z'</span>)</span><br><span class="line">a[i] -= <span class="number">32</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt;= <span class="string">'A'</span> &amp;&amp; a[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i ++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="小L的取膜算式"><a href="#小L的取膜算式" class="headerlink" title="小L的取膜算式"></a>小L的取膜算式</h2><p>Description:<br>题目描述<br>小L想请你帮忙计算一下这个式子的结果<br>(a+b)p MOD p，其中p是质数。<br><code>输入</code><br>多组数据<br>第一行一个T表示数据组数<br>接下来T行，每行3个正整数a, b, p且保证p是质数 ，输入数据都是long long范围内的正整数。特别的: p &lt;= 2^62<br><code>输出</code><br>对于每一组输入数据，输出正确结果<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">样例输入</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">样例输出</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std<span class="comment">;</span></span><br><span class="line">typedef long long <span class="keyword">ll;</span></span><br><span class="line"><span class="keyword">int </span>main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">ll </span>T, a, <span class="keyword">b, </span>p<span class="comment">;</span></span><br><span class="line"><span class="keyword">scanf("%lld",&amp;T);</span></span><br><span class="line"><span class="keyword"></span>while(T --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">scanf("%lld </span>%<span class="keyword">lld </span>%<span class="keyword">lld",&amp;a, </span>&amp;<span class="keyword">b, </span>&amp;p)<span class="comment">;</span></span><br><span class="line">a %= p<span class="comment">;</span></span><br><span class="line"><span class="keyword">b </span>%= p<span class="comment">;</span></span><br><span class="line"><span class="keyword">ll </span>ans = (a + <span class="keyword">b) </span>% p<span class="comment">;</span></span><br><span class="line">printf(<span class="string">"%lld\n"</span>,ans)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="小L玩滚球游戏"><a href="#小L玩滚球游戏" class="headerlink" title="小L玩滚球游戏"></a>小L玩滚球游戏</h2><p>Description:<br>题目描述<br>小L正在玩滚球游戏，有n个水晶球在轨道上以不同开始位置和速度从近往远的方向滚动，如果两个水晶球在滚动过程中相遇，它们就会融合成一个水晶球，然后以速度较慢的水晶球的速度继续向前滚动， 问经过时间t后，轨道上还有多少水晶球。<br><code>输入</code><br>第一行输入两个整数n、t，n代表水晶球的数量（1 &lt;= n &lt;= 105, 0&lt;t&lt;231），t代表时间。<br>接下来n行，每行两个整数，按位置从近到远的顺序给出水晶球的初始位置和速度。<br><code>输出</code><br>输出一个整数表示经过时间t后水晶球的数量。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">样例输入</span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">6</span> <span class="number">1</span></span><br><span class="line">样例输出</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p>题解：</p><blockquote><p>根据题意，移动速度快的球可能会追上在他前面移动速度慢的球，并且追上后合并在一起会变成前面速度慢的球。<br>可以将题意理解为，后面移动速度快的球碰到前面移动速度慢的球则会消失。<br>而且t是固定的值，直接计算每个位置在t秒后移动到的位置，逆向维护一个最靠后的值，检测当前球是否超过这个值。<br>如果超过则说明追上了后面的球当前球会消失。<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fst first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sed second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll LINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], v[N];</span><br><span class="line">ll b[N]; <span class="comment">//经过t秒所处位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="comment">//freopen("C:/input.txt", "r", stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">int</span> n, t, m = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a[i], &amp;v[i]), b[i] = a[i] + <span class="number">1L</span>L * v[i] * t;</span><br><span class="line">ll p = LINF;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b[i] &gt;= p)</span><br><span class="line">m++;</span><br><span class="line">p = min(p, b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n - m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="小L的区间求和"><a href="#小L的区间求和" class="headerlink" title="小L的区间求和"></a>小L的区间求和</h2><p>Description:<br>题目描述<br>在给定的一个整数序列中，小L希望找到一个连续的区间，这个区间的和能够被k整除，请你帮小L算一下满足条件的最长的区间长度是多少。<br><code>输入</code><br>第一行输入两个整数n、k。（1 &lt;= n &lt;= 105,1&lt;=k&lt;100）<br>接下来一行输入n个整数，表示序列中的数。<br><code>输出</code><br>输出一个整数，满足条件区间的最长长度，如果不存在，输出0<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">样例输入</span><br><span class="line"><span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">样例输出</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p>题解：</p><blockquote><p>题解：开一个数组要来记录前n项对K取余的余数，，再开一个数组，用来记录余数第一次出现的位置<br>要点1 当一个 余数数组 的的前几项和为0的时候，从开头到此处的和是K的倍数<br>要点2 当一个余数重复出现的时候，说明从该余数第一次出现的位置（不包括第一次）到该次出现的位置的和味K的倍数（仔细想想还是很有道理的）<br>例如 2%10=2 （2+10）%10 =2 所以当两个余数相同时，期间一定加上了k的倍数。关键就是前面的前n项和的余数数组有点难理解。}<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx], sum[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;k);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">sum[i] = (sum[i - <span class="number">1</span>] + a[i]) % k;</span><br><span class="line">mp[sum[i]] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">mp[sum[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[sum[i]] == <span class="number">-1</span>)</span><br><span class="line">mp[sum[i]] = i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans = max(ans, i - mp[sum[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="小L的随机数"><a href="#小L的随机数" class="headerlink" title="小L的随机数"></a>小L的随机数</h2><p>Description:<br>题目描述<br>随机数是生成随机算法的基础，小L准备使用线性同余法（Linear Congruential Method）来生成一个随机数列，这种方法需要设置四个非负整数参数m, a, c, x0按照下面的公式生成出一系列随机数 : Xn+1 = (a * Xn + c) mod m ,小L现在想知道这个数列第n个数是多少，由于他只需要生成小于g的随机数，所以你只需要告诉他Xn mod g的结果即可。<br><code>输入</code><br>输入一行6个整数，分别表示m, a, c, X0, n, g 。(n ≤ 106，1 ≤ m, a, c, X0 , g ≤231 − 1)<br><code>输出</code><br>一行一个整数表示Xn<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">样例输入</span><br><span class="line"><span class="number">233</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">333</span></span><br><span class="line">样例输出</span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e7</span> + <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll m, a, c, x, n, g;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; a &gt;&gt; c &gt;&gt; x &gt;&gt; n &gt;&gt; g;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">x = (x * a + c) % m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,x % g);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="小L的直线"><a href="#小L的直线" class="headerlink" title="小L的直线"></a>小L的直线</h2><p>Description:<br>题目描述<br>小学时期的小L发现自己很有艺术细胞，于是买了一块画板，但是他的绘画水平使得他只能连接两点画出一条线段。有一天他决定在一张有n个点的图上作画，即他可以把这n个点任意连接。大家认为平行线是非常不美观的，于是他想知道自己最多能画多少条直线使整张画不出现平行线。<br><code>输入</code><br>第一行输入一个整数n （1 &lt;= n &lt;= 200）<br>接下来n行每行两个整数代表每个点的坐标x, y （-1000 &lt;= x, y &lt;= 1000）<br><code>输出</code><br>一行一个整数为能画出最多的两两不平行的直线条数<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">样例输入</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">-1</span> <span class="number">1</span></span><br><span class="line"><span class="number">-2</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line">样例输出</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e3</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;e[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">double</span>&gt; se;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; e[i].x &gt;&gt; e[i].y;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i == j) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((e[j].x - e[i].x) == <span class="number">0</span>)cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">1.0</span> * (e[j].y - e[i].y) / (e[j].x - e[i].x);</span><br><span class="line">se.insert(ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(set&lt;double&gt; :: iterator it = se.begin(); it != se.end(); it ++)</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; *it &lt;&lt; " ";</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; se.size() + cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="小L的长方形"><a href="#小L的长方形" class="headerlink" title="小L的长方形"></a>小L的长方形</h2><p>Description:<br>题目描述<br>在数学课上，老师发给小L一根铁丝，让小L将这根铁丝围成一个长方形。要求这个长方形的长是宽的3倍，并且计算它的面积。<br><code>输入</code><br>仅一个整数a，表示铁丝的长度(a≤10000)。<br><code>输出</code><br>输出三个数，分别表示长方形的长、宽、面积。如果计算结果是整数，则输出整数结果（没有小数部分）；如果不是，则保留三位小数。每个数之间用一个空格隔开。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">样例输入</span><br><span class="line"><span class="number">36</span></span><br><span class="line">样例输出</span><br><span class="line"><span class="number">13.500</span> <span class="number">4.500</span> <span class="number">60.750</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="keyword">double</span> l;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l;</span><br><span class="line">x = l / <span class="number">8</span>;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">3</span> * x * x;</span><br><span class="line"><span class="keyword">if</span>(x == (<span class="keyword">int</span>)x)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.0lf %.0lf %.0lf\n"</span>,<span class="number">3</span> * x, x, ans);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.3lf %.3lf %.3lf\n"</span>,<span class="number">3</span> * x, x, ans);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day23&quot;&gt;&lt;a href=&quot;#Day23&quot; class=&quot;headerlink&quot; title=&quot;Day23&quot;&gt;&lt;/a&gt;Day23&lt;/h1&gt;&lt;p&gt;今天和学长们一起打了学长们的积分赛。。。&lt;br&gt;战况还行&lt;br&gt;&lt;code&gt;补题&lt;/code&gt;&lt;br&gt;&lt;a href=&quot;http://acm.zzuli.edu.cn/contest.php?cid=1398&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OJ链接&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Day23</title>
    <link href="http://yoursite.com/2019/08/12/Day23/"/>
    <id>http://yoursite.com/2019/08/12/Day23/</id>
    <published>2019-08-11T16:00:00.000Z</published>
    <updated>2019-08-14T14:55:59.624Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day23"><a href="#Day23" class="headerlink" title="Day23"></a>Day23</h1><p>今天讲的是 <code>算术基本原理</code> ，没咋学会。。。<br>有是自闭的一天<br><code>补题</code><br><a id="more"></a></p><h1 id="数论解释"><a href="#数论解释" class="headerlink" title="数论解释"></a>数论解释</h1><p><code>真的有必要好好看一下</code><br><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E8%AE%BA" target="_blank" rel="noopener">数论</a></p><h2 id="算术基本原理"><a href="#算术基本原理" class="headerlink" title="算术基本原理"></a>算术基本原理</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">解释</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>算术基本定理，又称为正整数的唯一分解定理，即：每个大于1的自然数，要么本身就是质数，要么可以写为2个或以上的质数的积，而且这些质因子按大小排列之后，写法仅有一种方式。</p><p>例如: 6936 = 2^3 <em>3 </em>17^2, 1200 = 2^4 <em>3 </em>5^2</p><p>算术基本定理的内容由两部分构成：</p><p>分解的存在性：<br>分解的唯一性，即若不考虑排列的顺序，正整数分解为素数乘积的方式是唯一的。<br>算术基本定理是初等数论中一个基本的定理，也是许多其他定理的逻辑支撑点和出发点。</p><p><a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">详情链接</a></p><h3 id="假代码模板"><a href="#假代码模板" class="headerlink" title="假代码模板"></a>假代码模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> m=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>) a[num++]=i;</span><br><span class="line"><span class="keyword">while</span>(n%i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ma[i]++;</span><br><span class="line">n=n/i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n&gt;<span class="number">1</span>) a[num++]=n,ma[n]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,a[i],ma[a[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Smith-Numbers"><a href="#Smith-Numbers" class="headerlink" title="Smith Numbers"></a>Smith Numbers</h2><p>Description:<br>While skimming his phone directory in 1982, Albert Wilansky, a mathematician of Lehigh University,noticed that the telephone number of his brother-in-law H. Smith had the following peculiar property: The sum of the digits of that number was equal to the sum of the digits of the prime factors of that number. Got it? Smith’s telephone number was 493-7775. This number can be written as the product of its prime factors in the following way:<br>4937775= 3<em>5</em>5*65837</p><p>The sum of all digits of the telephone number is 4+9+3+7+7+7+5= 42,and the sum of the digits of its prime factors is equally 3+5+5+6+5+8+3+7=42. Wilansky was so amazed by his discovery that he named this kind of numbers after his brother-in-law: Smith numbers.<br>As this observation is also true for every prime number, Wilansky decided later that a (simple and unsophisticated) prime number is not worth being a Smith number, so he excluded them from the definition.<br>Wilansky published an article about Smith numbers in the Two Year College Mathematics Journal and was able to present a whole collection of different Smith numbers: For example, 9985 is a Smith number and so is 6036. However,Wilansky was not able to find a Smith number that was larger than the telephone number of his brother-in-law. It is your task to find Smith numbers that are larger than 4937775!<br><code>Input</code><br>The input file consists of a sequence of positive integers, one integer per line. Each integer will have at most 8 digits. The input is terminated by a line containing the number 0.<br><code>Output</code><br>For every number n &gt; 0 in the input, you are to compute the smallest Smith number which is larger than n,and print it on a line by itself. You can assume that such a number exists.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">4937774</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">4937775</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line">i = n % <span class="number">10</span>;</span><br><span class="line">sum += i;</span><br><span class="line">n /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//分治的思想，如果是素数，就返回sum，否则，将该数分成两部分，再求各部分的质因子的sum</span></span><br><span class="line"><span class="keyword">if</span>(isprime(n))</span><br><span class="line"><span class="keyword">return</span> sum(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(n + <span class="number">0.5</span>); i &gt; <span class="number">1</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> cut(i) + cut(n / i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span>(n ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!isprime(n) &amp;&amp; sum(n) == cut(n))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Pairs-Forming-LCM"><a href="#Pairs-Forming-LCM" class="headerlink" title="Pairs Forming LCM"></a>Pairs Forming LCM</h2><p>Description:<br>Find the result of the following code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pairsFormLCM</span><span class="params">( <span class="keyword">int</span> n )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++ )</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j = i; j &lt;= n; j++ )</span><br><span class="line">           <span class="keyword">if</span>( lcm(i, j) == n ) res++; <span class="comment">// lcm means least common multiple</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>A straight forward implementation of the code may time out. If you analyze the code, you will find that the code actually counts the number of pairs (i, j) for which lcm(i, j) = n and (i ≤ j).</p><p><code>Input</code><br>Input starts with an integer T (≤ 200), denoting the number of test cases.</p><p>Each case starts with a line containing an integer n (1 ≤ n ≤ 1014).</p><p><code>Output</code><br>For each case, print the case number and the value returned by the function ‘pairsFormLCM(n)’.<br></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Sample <span class="keyword">Input</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">27</span></span><br><span class="line"><span class="number">29</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span>: <span class="number">2</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>: <span class="number">2</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">3</span>: <span class="number">3</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">4</span>: <span class="number">5</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">5</span>: <span class="number">4</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">6</span>: <span class="number">5</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">7</span>: <span class="number">8</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">8</span>: <span class="number">5</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">9</span>: <span class="number">8</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">10</span>: <span class="number">8</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">11</span>: <span class="number">5</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">12</span>: <span class="number">11</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">13</span>: <span class="number">3</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">14</span>: <span class="number">4</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">15</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> p[maxn/<span class="number">10</span>],m;<span class="comment">//素数的数组开始1e7会RE</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])    p[m++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m&amp;&amp;p[j]*i&lt;maxn;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[p[j]*i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)    <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    ll n,ans,c;</span><br><span class="line">    <span class="keyword">int</span> t,f=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i]*p[i]&gt;n)    <span class="keyword">break</span>;</span><br><span class="line">            c=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n%p[i]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                n/=p[i];</span><br><span class="line">                ++c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c)    ans*=c*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">1</span>)    ans*=<span class="number">1</span>*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %lld\n"</span>,++f,ans/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Ekka-Dokka"><a href="#Ekka-Dokka" class="headerlink" title="Ekka Dokka"></a>Ekka Dokka</h2><p>Description:<br>Ekka and his friend Dokka decided to buy a cake. They both love cakes and that’s why they want to share the cake after buying it. As the name suggested that Ekka is very fond of odd numbers and Dokka is very fond of even numbers, they want to divide the cake such that Ekka gets a share of N square centimeters and Dokka gets a share of M square centimeters where N is odd and M is even. Both N and M are positive integers.</p><p>They want to divide the cake such that N * M = W, where W is the dashing factor set by them. Now you know their dashing factor, you have to find whether they can buy the desired cake or not.</p><p><code>Input</code><br>Input starts with an integer T (≤ 10000), denoting the number of test cases.</p><p>Each case contains an integer W (2 ≤ W &lt; 263). And W will not be a power of 2.</p><p><code>Output</code><br>For each case, print the case number first. After that print “Impossible” if they can’t buy their desired cake. If they can buy such a cake, you have to print N and M. If there are multiple solutions, then print the result where M is as small as possible.<br></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample <span class="keyword">Input</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span>: <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>: Impossible</span><br><span class="line"><span class="keyword">Case</span> <span class="number">3</span>: <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">ll w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;w);</span><br><span class="line">ll n = <span class="number">1</span>, m = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(w % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(w % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">n = n * <span class="number">2</span>;</span><br><span class="line">w = w / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %lld %lld\n"</span>, ++ k, w, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: Impossible\n"</span>,++ k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Sum-of-Consecutive-Integers"><a href="#Sum-of-Consecutive-Integers" class="headerlink" title="Sum of Consecutive Integers"></a>Sum of Consecutive Integers</h2><p>Description:<br>Given an integer N, you have to find the number of ways you can express N as sum of consecutive integers. You have to use at least two integers.</p><p>For example, N = 15 has three solutions, (1+2+3+4+5), (4+5+6), (7+8).</p><p><code>Input</code><br>Input starts with an integer T (≤ 200), denoting the number of test cases.</p><p>Each case starts with a line containing an integer N (1 ≤ N ≤ 1014).</p><p><code>Output</code><br>For each case, print the case number and the number of ways to express N as sum of consecutive integers.<br></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sample <span class="keyword">Input</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="number">828495</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span>: <span class="number">1</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>: <span class="number">3</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">3</span>: <span class="number">1</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">4</span>: <span class="number">2</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">5</span>: <span class="number">47</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line">typedef <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line">ll n,p[maxn/<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">is</span>[maxn];</span><br><span class="line"><span class="keyword">int</span> t,ca,pos;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">is</span>[i])    p[pos++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pos&amp;&amp;i*p[j]&lt;maxn;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">is</span>[i*p[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)    <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll ans=<span class="number">1</span>;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pos&amp;&amp;p[i]*p[i]&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ll cnt=<span class="number">0</span>;a</span><br><span class="line">            <span class="keyword">while</span>(n%p[i]==<span class="number">0</span>)    cnt++,n/=p[i];</span><br><span class="line">            <span class="keyword">if</span>(i)    ans*=cnt+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">2</span>)    ans*=<span class="number">2</span>;</span><br><span class="line">        printf(<span class="string">"Case %d: %lld\n"</span>,++ca,ans<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Aladdin-and-the-Flying-Carpet"><a href="#Aladdin-and-the-Flying-Carpet" class="headerlink" title="Aladdin and the Flying Carpet"></a>Aladdin and the Flying Carpet</h2><p>Description:<br>It’s said that Aladdin had to solve seven mysteries before getting the Magical Lamp which summons a powerful Genie. Here we are concerned about the first mystery.</p><p>Aladdin was about to enter to a magical cave, led by the evil sorcerer who disguised himself as Aladdin’s uncle, found a strange magical flying carpet at the entrance. There were some strange creatures guarding the entrance of the cave. Aladdin could run, but he knew that there was a high chance of getting caught. So, he decided to use the magical flying carpet. The carpet was rectangular shaped, but not square shaped. Aladdin took the carpet and with the help of it he passed the entrance.</p><p>Now you are given the area of the carpet and the length of the minimum possible side of the carpet, your task is to find how many types of carpets are possible. For example, the area of the carpet 12, and the minimum possible side of the carpet is 2, then there can be two types of carpets and their sides are: {2, 6} and {3, 4}.</p><p><code>Input</code><br>Input starts with an integer T (≤ 4000), denoting the number of test cases.</p><p>Each case starts with a line containing two integers: a b (1 ≤ b ≤ a ≤ 1012) where a denotes the area of the carpet and b denotes the minimum possible side of the carpet.</p><p><code>Output</code><br>For each case, print the case number and the number of possible carpets.<br></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample <span class="keyword">Input</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">12</span> <span class="number">2</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span>: <span class="number">1</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>: <span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll p[maxn],pos,vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])    p[pos++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;pos&amp;&amp;p[j]*i&lt;maxn;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[p[j]*i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>)    <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll t,a,b,l=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll now=<span class="number">0</span>,ans=<span class="number">1</span>,aa,net=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">if</span>(b*b&gt;=a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: 0\n"</span>,++l);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        aa=a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pos&amp;&amp;p[i]&lt;=a;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(a%p[i]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                a/=p[i];</span><br><span class="line">                c++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans*=(c+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">if</span>(a&gt;<span class="number">1</span>)    ans*=<span class="number">2</span>;</span><br><span class="line">            ans/=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(ll i=<span class="number">1</span>;i&lt;b;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(aa%i==<span class="number">0</span>)        </span><br><span class="line">                ans--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %lld: %lld\n"</span>,++l,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Minimum-Sum-LCM"><a href="#Minimum-Sum-LCM" class="headerlink" title="Minimum Sum LCM"></a>Minimum Sum LCM</h2><p>Description:<br>LCM (Least Common Multiple) of a set of integers is defined as the minimum number, which is a<br>multiple of all integers of that set. It is interesting to note that any positive integer can be expressed<br>as the LCM of a set of positive integers. For example 12 can be expressed as the LCM of 1, 12 or 12, 12 or 3, 4 or 4, 6 or 1, 2, 3, 4 etc.<br>In this problem, you will be given a positive integer N. You have to find out a set of at least two positive integers whose LCM is N. As infinite such sequences are possible, you have to pick the sequence whose summation of elements is minimum. We will be quite happy<br>if you just print the summation of the elements of this set. So, for N = 12, you should print 4+3 = 7 as LCM of 4 and 3 is 12 and 7 is the minimum possible summation.<br><code>Input</code><br>The input file contains at most 100 test cases. Each test case consists of a positive integer N (1 ≤ N ≤ 2^31 − 1).<br>Input is terminated by a case where N = 0. This case should not be processed. There can be at most 100 test cases.<br><code>Output</code><br>Output of each test case should consist of a line starting with ‘Case #: ’ where # is the test case number. It should be followed by the summation as specified in the problem statement. Look at the output for sample input for details.<br></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample <span class="keyword">Input</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span>: <span class="number">7</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>: <span class="number">7</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">3</span>: <span class="number">6</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ll n,<span class="attribute">cas</span>=1;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        ll <span class="attribute">ans</span>=0,cnt=0,x=n;</span><br><span class="line">        <span class="keyword">for</span>(ll <span class="attribute">i</span>=2;i*i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ll <span class="attribute">mid</span>=1;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="attribute">i</span>==0)</span><br><span class="line">            &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">while</span>(n%<span class="attribute">i</span>==0)</span><br><span class="line">                &#123;</span><br><span class="line">                    n/=i;</span><br><span class="line">                    mid*=i;</span><br><span class="line">                &#125;</span><br><span class="line">                ans+=mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="attribute">n</span>==x)    <span class="attribute">ans</span>=x+1;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n!=1 || cnt == 1)    ans+=n;</span><br><span class="line">        printf(<span class="string">"Case %lld: %lld\n"</span>,cas++,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="GCD-and-LCM"><a href="#GCD-and-LCM" class="headerlink" title="GCD and LCM"></a>GCD and LCM</h2><p>Description:<br>Given two positive integers G and L, could you tell me how many solutions of (x, y, z) there are, satisfying that gcd(x, y, z) = G and lcm(x, y, z) = L?<br>Note, gcd(x, y, z) means the greatest common divisor of x, y and z, while lcm(x, y, z) means the least common multiple of x, y and z.<br>Note 2, (1, 2, 3) and (1, 3, 2) are two different solutions.<br><code>Input</code><br>First line comes an integer T (T &lt;= 12), telling the number of test cases.<br>The next T lines, each contains two positive 32-bit signed integers, G and L.<br>It’s guaranteed that each answer will fit in a 32-bit signed integer.<br><code>Output</code><br>For each test case, print one line with the number of solutions satisfying the conditions above.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span> <span class="number">72</span></span><br><span class="line"><span class="number">7</span> <span class="number">33</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">72</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line">ll L, G;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;G, &amp;L);</span><br><span class="line">ll n = L / G;</span><br><span class="line"><span class="comment">//L % G != 0 无解</span></span><br><span class="line">ll ans = L % G ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i = <span class="number">2</span>; i * i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//m是n某一个素因子的幂级数</span></span><br><span class="line">ll m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n % i != <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">while</span>(n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m ++;</span><br><span class="line">n = n / i;</span><br><span class="line">&#125;</span><br><span class="line">ans = ans * <span class="number">6</span> * m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//n仍然不等于1说明此时n是一个大素数</span></span><br><span class="line"><span class="keyword">if</span>(n != <span class="number">1</span>)</span><br><span class="line">ans *= <span class="number">6</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">显然若lcm%gcd!=0时无解，令n=lcm/gcd，对n质因数分解后得到n=p1^k1*p2^k2*…*pm^km，那么必然有</span></span><br><span class="line"><span class="comment">a/g=p1^a1*p2^a2*…*pm^am</span></span><br><span class="line"><span class="comment">b/g=p1^b1*p2^b2*…*pm^bm</span></span><br><span class="line"><span class="comment">c/g=p1^c1*p2^c2*…*pm^cm</span></span><br><span class="line"><span class="comment">所以对于任意i(1&lt;=i&lt;=m)，都有min(ai,bi,ci)=0,max(ai,bi,ci)=ki，当ai,bi,ci三者之中居中者取1~ki-1时，总共有6*(ki-1)种情况，当取0或者ki时，有2*3=6种情况，所以对于每个i，都有6*(ki-1)+6=6*ki种情况，所以枚举n的所有质因子幂级数k每次累乘6*k即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> m, n, ans, i, count;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="keyword">if</span> (n % m) <span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="comment">///注意特判</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">n /= m;</span><br><span class="line">ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i * i &lt;= n; i += <span class="number">2</span>)<span class="comment">///不用求素数，因为范围很小(注意n在不断减小)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">n /= i;</span><br><span class="line">++count;</span><br><span class="line">&#125;</span><br><span class="line">ans *= <span class="number">6</span> * count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">--i;<span class="comment">///小技巧</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) ans *= <span class="number">6</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day23&quot;&gt;&lt;a href=&quot;#Day23&quot; class=&quot;headerlink&quot; title=&quot;Day23&quot;&gt;&lt;/a&gt;Day23&lt;/h1&gt;&lt;p&gt;今天讲的是 &lt;code&gt;算术基本原理&lt;/code&gt; ，没咋学会。。。&lt;br&gt;有是自闭的一天&lt;br&gt;&lt;code&gt;补题&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="算术基本原理" scheme="http://yoursite.com/tags/%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Day22</title>
    <link href="http://yoursite.com/2019/08/10/Day22/"/>
    <id>http://yoursite.com/2019/08/10/Day22/</id>
    <published>2019-08-09T16:00:00.000Z</published>
    <updated>2019-08-14T14:36:11.527Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --><h1 id="Day22"><a href="#Day22" class="headerlink" title="Day22"></a>Day22</h1><p>有是一次<code>积分赛</code><br>有是自闭的一天<br><code>补题</code><br><a id="more"></a></p><h2 id="wzy的大冒险——出发前的清理"><a href="#wzy的大冒险——出发前的清理" class="headerlink" title="wzy的大冒险——出发前的清理"></a>wzy的大冒险——出发前的清理</h2><p>Description:</p><p>由于上次学弟们没有ak，导致许多蚂蚁被留下了。wzy在出发冒险前请来了一只食蚁兽帮忙清理。<br>现在出现了一只食蚁兽。每个蚂蚁都有wzy给它的一个编号，食蚁兽要吃蚂蚁必须要确认蚂蚁的编号X是否满足要求，如下：</p><p>X的质因子的种类不超过13种<br>X的食蚁数是个素数(食蚁数的定义见最下方提示)<br>X的食蚁数是个回文数<br>如果都满足则输出 YES ,否则输出 NO</p><p><code>输入格式</code><br>第一行给定一个T,(1≤T≤1e5)<br>接下来T行，每行给出数字X,(1≤X≤1e17)</p><p><code>输出格式</code><br>每行输出 YES 或者 NO<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">121666</span></span><br><span class="line"><span class="number">111666</span></span><br><span class="line"><span class="number">1312333</span></span><br><span class="line">output</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line">提示</span><br><span class="line">补充：</span><br><span class="line"><span class="number">1.</span> 回文数至少为两位数，如 <span class="number">131</span> 、 <span class="number">22</span></span><br><span class="line"><span class="number">2.</span> 如果X的长度为 len1 ，令 len2=⌊len1/<span class="number">2</span>⌋，则 X 的前 len2 位形成的数是它的食蚁数</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">//打表做法</span><br><span class="line">//借用别人的代码</span><br><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define PI acos(-<span class="number">1</span>)</span><br><span class="line">const int NN = <span class="number">777</span><span class="comment">;</span></span><br><span class="line">typedef long long ll<span class="comment">;</span></span><br><span class="line">using namespace std<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">int prime[NN] = &#123;</span><br><span class="line"><span class="number">11,101,131,151</span>,<span class="number">181,191,313</span>,<span class="number">353,373</span>,<span class="number">383,727</span>,<span class="number">757,787</span>,<span class="number">797,919</span>,<span class="number">929</span>,</span><br><span class="line"><span class="number">10301,10501</span>,<span class="number">10601,11311</span>,<span class="number">11411,12421</span>,<span class="number">12721,12821</span>,<span class="number">13331,13831</span>,<span class="number">13931,14341</span>,<span class="number">14741,15451</span>,<span class="number">15551,16061</span>,<span class="number">16361,16561</span>,</span><br><span class="line"><span class="number">16661,17471</span>,<span class="number">17971,18181</span>,<span class="number">18481,19391</span>,<span class="number">19891,19991</span>,<span class="number">30103,30203</span>,<span class="number">30403,30703</span>,<span class="number">30803,31013</span>,<span class="number">31513,32323</span>,<span class="number">32423,33533</span>,</span><br><span class="line"><span class="number">34543,34843</span>,<span class="number">35053,35153</span>,<span class="number">35353,35753</span>,<span class="number">36263,36563</span>,<span class="number">37273,37573</span>,<span class="number">38083,38183</span>,<span class="number">38783,39293</span>,<span class="number">70207,70507</span>,<span class="number">70607,71317</span>,</span><br><span class="line"><span class="number">71917,72227</span>,<span class="number">72727,73037</span>,<span class="number">73237,73637</span>,<span class="number">74047,74747</span>,<span class="number">75557,76367</span>,<span class="number">76667,77377</span>,<span class="number">77477,77977</span>,<span class="number">78487,78787</span>,<span class="number">78887,79397</span>,</span><br><span class="line"><span class="number">79697,79997</span>,<span class="number">90709,91019</span>,<span class="number">93139,93239</span>,<span class="number">93739,94049</span>,<span class="number">94349,94649</span>,<span class="number">94849,94949</span>,<span class="number">95959,96269</span>,<span class="number">96469,96769</span>,<span class="number">97379,97579</span>,</span><br><span class="line"><span class="number">97879,98389</span>,<span class="number">98689</span>,<span class="number">1003001</span>,<span class="number">1008001</span>,<span class="number">1022201,1028201</span>,<span class="number">1035301</span>,<span class="number">1043401</span>,<span class="number">1055501</span>,<span class="number">1062601</span>,<span class="number">1065601</span>,<span class="number">1074701</span>,<span class="number">1082801</span>,</span><br><span class="line"><span class="number">1085801</span>,<span class="number">1092901</span>,<span class="number">1093901</span>,<span class="number">1114111,1117111</span>,<span class="number">1120211,1123211</span>,<span class="number">1126211,1129211</span>,<span class="number">1134311</span>,<span class="number">1145411</span>,<span class="number">1150511</span>,<span class="number">1153511</span>,<span class="number">1160611</span>,</span><br><span class="line"><span class="number">1163611</span>,<span class="number">1175711</span>,<span class="number">1177711</span>,<span class="number">1178711</span>,<span class="number">1180811</span>,<span class="number">1183811</span>,<span class="number">1186811</span>,<span class="number">1190911</span>,<span class="number">1193911</span>,<span class="number">1196911</span>,<span class="number">1201021</span>,<span class="number">1208021</span>,<span class="number">1212121,1215121</span>,</span><br><span class="line"><span class="number">1218121,1221221</span>,<span class="number">1235321</span>,<span class="number">1242421</span>,<span class="number">1243421</span>,<span class="number">1245421</span>,<span class="number">1250521</span>,<span class="number">1253521</span>,<span class="number">1257521</span>,<span class="number">1262621</span>,<span class="number">1268621</span>,<span class="number">1273721</span>,<span class="number">1276721</span>,<span class="number">1278721</span>,</span><br><span class="line"><span class="number">1280821</span>,<span class="number">1281821</span>,<span class="number">1286821</span>,<span class="number">1287821</span>,<span class="number">1300031</span>,<span class="number">1303031</span>,<span class="number">1311131,1317131</span>,<span class="number">1327231,1328231</span>,<span class="number">1333331</span>,<span class="number">1335331</span>,<span class="number">1338331</span>,<span class="number">1343431</span>,</span><br><span class="line"><span class="number">1360631</span>,<span class="number">1362631</span>,<span class="number">1363631</span>,<span class="number">1371731</span>,<span class="number">1374731</span>,<span class="number">1390931</span>,<span class="number">1407041</span>,<span class="number">1409041</span>,<span class="number">1411141,1412141</span>,<span class="number">1422241</span>,<span class="number">1437341</span>,<span class="number">1444441</span>,<span class="number">1447441</span>,</span><br><span class="line"><span class="number">1452541</span>,<span class="number">1456541</span>,<span class="number">1461641</span>,<span class="number">1463641</span>,<span class="number">1464641</span>,<span class="number">1469641</span>,<span class="number">1486841</span>,<span class="number">1489841</span>,<span class="number">1490941</span>,<span class="number">1496941</span>,<span class="number">1508051</span>,<span class="number">1513151,1520251</span>,<span class="number">1532351</span>,</span><br><span class="line"><span class="number">1535351</span>,<span class="number">1542451</span>,<span class="number">1548451</span>,<span class="number">1550551</span>,<span class="number">1551551</span>,<span class="number">1556551</span>,<span class="number">1557551</span>,<span class="number">1565651</span>,<span class="number">1572751</span>,<span class="number">1579751</span>,<span class="number">1580851</span>,<span class="number">1583851</span>,<span class="number">1589851</span>,<span class="number">1594951</span>,</span><br><span class="line"><span class="number">1597951</span>,<span class="number">1598951</span>,<span class="number">1600061</span>,<span class="number">1609061</span>,<span class="number">1611161,1616161</span>,<span class="number">1628261</span>,<span class="number">1630361</span>,<span class="number">1633361</span>,<span class="number">1640461</span>,<span class="number">1643461</span>,<span class="number">1646461</span>,<span class="number">1654561</span>,<span class="number">1657561</span>,</span><br><span class="line"><span class="number">1658561</span>,<span class="number">1660661</span>,<span class="number">1670761</span>,<span class="number">1684861</span>,<span class="number">1685861</span>,<span class="number">1688861</span>,<span class="number">1695961</span>,<span class="number">1703071</span>,<span class="number">1707071</span>,<span class="number">1712171,1714171</span>,<span class="number">1730371</span>,<span class="number">1734371</span>,<span class="number">1737371</span>,</span><br><span class="line"><span class="number">1748471</span>,<span class="number">1755571</span>,<span class="number">1761671</span>,<span class="number">1764671</span>,<span class="number">1777771</span>,<span class="number">1793971</span>,<span class="number">1802081</span>,<span class="number">1805081</span>,<span class="number">1820281</span>,<span class="number">1823281</span>,<span class="number">1824281</span>,<span class="number">1826281</span>,<span class="number">1829281</span>,<span class="number">1831381</span>,</span><br><span class="line"><span class="number">1832381</span>,<span class="number">1842481</span>,<span class="number">1851581</span>,<span class="number">1853581</span>,<span class="number">1856581</span>,<span class="number">1865681</span>,<span class="number">1876781</span>,<span class="number">1878781</span>,<span class="number">1879781</span>,<span class="number">1880881</span>,<span class="number">1881881</span>,<span class="number">1883881</span>,<span class="number">1884881</span>,<span class="number">1895981</span>,</span><br><span class="line"><span class="number">1903091</span>,<span class="number">1908091</span>,<span class="number">1909091</span>,<span class="number">1917191</span>,<span class="number">1924291</span>,<span class="number">1930391</span>,<span class="number">1936391</span>,<span class="number">1941491</span>,<span class="number">1951591</span>,<span class="number">1952591</span>,<span class="number">1957591</span>,<span class="number">1958591</span>,<span class="number">1963691</span>,<span class="number">1968691</span>,</span><br><span class="line"><span class="number">1969691</span>,<span class="number">1970791</span>,<span class="number">1976791</span>,<span class="number">1981891</span>,<span class="number">1982891</span>,<span class="number">1984891</span>,<span class="number">1987891</span>,<span class="number">1988891</span>,<span class="number">1993991</span>,<span class="number">1995991</span>,<span class="number">1998991</span>,<span class="number">3001003</span>,<span class="number">3002003</span>,<span class="number">3007003</span>,</span><br><span class="line"><span class="number">3016103</span>,<span class="number">3026203</span>,<span class="number">3064603</span>,<span class="number">3065603</span>,<span class="number">3072703</span>,<span class="number">3073703</span>,<span class="number">3075703</span>,<span class="number">3083803</span>,<span class="number">3089803</span>,<span class="number">3091903</span>,<span class="number">3095903</span>,<span class="number">3103013</span>,<span class="number">3106013</span>,<span class="number">3127213</span>,</span><br><span class="line"><span class="number">3135313</span>,<span class="number">3140413</span>,<span class="number">3155513</span>,<span class="number">3158513</span>,<span class="number">3160613</span>,<span class="number">3166613</span>,<span class="number">3181813</span>,<span class="number">3187813</span>,<span class="number">3193913</span>,<span class="number">3196913</span>,<span class="number">3198913</span>,<span class="number">3211123</span>,<span class="number">3212123</span>,<span class="number">3218123</span>,</span><br><span class="line"><span class="number">3222223</span>,<span class="number">3223223</span>,<span class="number">3228223</span>,<span class="number">3233323</span>,<span class="number">3236323</span>,<span class="number">3241423</span>,<span class="number">3245423</span>,<span class="number">3252523</span>,<span class="number">3256523</span>,<span class="number">3258523</span>,<span class="number">3260623</span>,<span class="number">3267623</span>,<span class="number">3272723</span>,<span class="number">3283823</span>,</span><br><span class="line"><span class="number">3285823</span>,<span class="number">3286823</span>,<span class="number">3288823</span>,<span class="number">3291923</span>,<span class="number">3293923</span>,<span class="number">3304033</span>,<span class="number">3305033</span>,<span class="number">3307033</span>,<span class="number">3310133</span>,<span class="number">3315133</span>,<span class="number">3319133</span>,<span class="number">3321233</span>,<span class="number">3329233</span>,<span class="number">3331333</span>,</span><br><span class="line"><span class="number">3337333</span>,<span class="number">3343433</span>,<span class="number">3353533</span>,<span class="number">3362633</span>,<span class="number">3364633</span>,<span class="number">3365633</span>,<span class="number">3368633</span>,<span class="number">3380833</span>,<span class="number">3391933</span>,<span class="number">3392933</span>,<span class="number">3400043</span>,<span class="number">3411143</span>,<span class="number">3417143</span>,<span class="number">3424243</span>,</span><br><span class="line"><span class="number">3425243</span>,<span class="number">3427243</span>,<span class="number">3439343</span>,<span class="number">3441443</span>,<span class="number">3443443</span>,<span class="number">3444443</span>,<span class="number">3447443</span>,<span class="number">3449443</span>,<span class="number">3452543</span>,<span class="number">3460643</span>,<span class="number">3466643</span>,<span class="number">3470743</span>,<span class="number">3479743</span>,<span class="number">3485843</span>,</span><br><span class="line"><span class="number">3487843</span>,<span class="number">3503053</span>,<span class="number">3515153</span>,<span class="number">3517153</span>,<span class="number">3528253</span>,<span class="number">3541453</span>,<span class="number">3553553</span>,<span class="number">3558553</span>,<span class="number">3563653</span>,<span class="number">3569653</span>,<span class="number">3586853</span>,<span class="number">3589853</span>,<span class="number">3590953</span>,<span class="number">3591953</span>,</span><br><span class="line"><span class="number">3594953</span>,<span class="number">3601063</span>,<span class="number">3607063</span>,<span class="number">3618163</span>,<span class="number">3621263</span>,<span class="number">3627263</span>,<span class="number">3635363</span>,<span class="number">3643463</span>,<span class="number">3646463</span>,<span class="number">3670763</span>,<span class="number">3673763</span>,<span class="number">3680863</span>,<span class="number">3689863</span>,<span class="number">3698963</span>,</span><br><span class="line"><span class="number">3708073</span>,<span class="number">3709073</span>,<span class="number">3716173</span>,<span class="number">3717173</span>,<span class="number">3721273</span>,<span class="number">3722273</span>,<span class="number">3728273</span>,<span class="number">3732373</span>,<span class="number">3743473</span>,<span class="number">3746473</span>,<span class="number">3762673</span>,<span class="number">3763673</span>,<span class="number">3765673</span>,<span class="number">3768673</span>,</span><br><span class="line"><span class="number">3769673</span>,<span class="number">3773773</span>,<span class="number">3774773</span>,<span class="number">3781873</span>,<span class="number">3784873</span>,<span class="number">3792973</span>,<span class="number">3793973</span>,<span class="number">3799973</span>,<span class="number">3804083</span>,<span class="number">3806083</span>,<span class="number">3812183</span>,<span class="number">3814183</span>,<span class="number">3826283</span>,<span class="number">3829283</span>,</span><br><span class="line"><span class="number">3836383</span>,<span class="number">3842483</span>,<span class="number">3853583</span>,<span class="number">3858583</span>,<span class="number">3863683</span>,<span class="number">3864683</span>,<span class="number">3867683</span>,<span class="number">3869683</span>,<span class="number">3871783</span>,<span class="number">3878783</span>,<span class="number">3893983</span>,<span class="number">3899983</span>,<span class="number">3913193</span>,<span class="number">3916193</span>,</span><br><span class="line"><span class="number">3918193</span>,<span class="number">3924293</span>,<span class="number">3927293</span>,<span class="number">3931393</span>,<span class="number">3938393</span>,<span class="number">3942493</span>,<span class="number">3946493</span>,<span class="number">3948493</span>,<span class="number">3964693</span>,<span class="number">3970793</span>,<span class="number">3983893</span>,<span class="number">3991993</span>,<span class="number">3994993</span>,<span class="number">3997993</span>,</span><br><span class="line"><span class="number">3998993</span>,<span class="number">7014107</span>,<span class="number">7035307</span>,<span class="number">7036307</span>,<span class="number">7041407</span>,<span class="number">7046407</span>,<span class="number">7057507</span>,<span class="number">7065607</span>,<span class="number">7069607</span>,<span class="number">7073707</span>,<span class="number">7079707</span>,<span class="number">7082807</span>,<span class="number">7084807</span>,<span class="number">7087807</span>,</span><br><span class="line"><span class="number">7093907</span>,<span class="number">7096907</span>,<span class="number">7100017</span>,<span class="number">7114117</span>,<span class="number">7115117</span>,<span class="number">7118117</span>,<span class="number">7129217</span>,<span class="number">7134317</span>,<span class="number">7136317</span>,<span class="number">7141417</span>,<span class="number">7145417</span>,<span class="number">7155517</span>,<span class="number">7156517</span>,<span class="number">7158517</span>,</span><br><span class="line"><span class="number">7159517</span>,<span class="number">7177717</span>,<span class="number">7190917</span>,<span class="number">7194917</span>,<span class="number">7215127</span>,<span class="number">7226227</span>,<span class="number">7246427</span>,<span class="number">7249427</span>,<span class="number">7250527</span>,<span class="number">7256527</span>,<span class="number">7257527</span>,<span class="number">7261627</span>,<span class="number">7267627</span>,<span class="number">7276727</span>,</span><br><span class="line"><span class="number">7278727</span>,<span class="number">7291927</span>,<span class="number">7300037</span>,<span class="number">7302037</span>,<span class="number">7310137</span>,<span class="number">7314137</span>,<span class="number">7324237</span>,<span class="number">7327237</span>,<span class="number">7347437</span>,<span class="number">7352537</span>,<span class="number">7354537</span>,<span class="number">7362637</span>,<span class="number">7365637</span>,<span class="number">7381837</span>,</span><br><span class="line"><span class="number">7388837</span>,<span class="number">7392937</span>,<span class="number">7401047</span>,<span class="number">7403047</span>,<span class="number">7409047</span>,<span class="number">7415147</span>,<span class="number">7434347</span>,<span class="number">7436347</span>,<span class="number">7439347</span>,<span class="number">7452547</span>,<span class="number">7461647</span>,<span class="number">7466647</span>,<span class="number">7472747</span>,<span class="number">7475747</span>,</span><br><span class="line"><span class="number">7485847</span>,<span class="number">7486847</span>,<span class="number">7489847</span>,<span class="number">7493947</span>,<span class="number">7507057</span>,<span class="number">7508057</span>,<span class="number">7518157</span>,<span class="number">7519157</span>,<span class="number">7521257</span>,<span class="number">7527257</span>,<span class="number">7540457</span>,<span class="number">7562657</span>,<span class="number">7564657</span>,<span class="number">7576757</span>,</span><br><span class="line"><span class="number">7586857</span>,<span class="number">7592957</span>,<span class="number">7594957</span>,<span class="number">7600067</span>,<span class="number">7611167</span>,<span class="number">7619167</span>,<span class="number">7622267</span>,<span class="number">7630367</span>,<span class="number">7632367</span>,<span class="number">7644467</span>,<span class="number">7654567</span>,<span class="number">7662667</span>,<span class="number">7665667</span>,<span class="number">7666667</span>,</span><br><span class="line"><span class="number">7668667</span>,<span class="number">7669667</span>,<span class="number">7674767</span>,<span class="number">7681867</span>,<span class="number">7690967</span>,<span class="number">7693967</span>,<span class="number">7696967</span>,<span class="number">7715177</span>,<span class="number">7718177</span>,<span class="number">7722277</span>,<span class="number">7729277</span>,<span class="number">7733377</span>,<span class="number">7742477</span>,<span class="number">7747477</span>,</span><br><span class="line"><span class="number">7750577</span>,<span class="number">7758577</span>,<span class="number">7764677</span>,<span class="number">7772777</span>,<span class="number">7774777</span>,<span class="number">7778777</span>,<span class="number">7782877</span>,<span class="number">7783877</span>,<span class="number">7791977</span>,<span class="number">7794977</span>,<span class="number">7807087</span>,<span class="number">7819187</span>,<span class="number">7820287</span>,<span class="number">7821287</span>,</span><br><span class="line"><span class="number">7831387</span>,<span class="number">7832387</span>,<span class="number">7838387</span>,<span class="number">7843487</span>,<span class="number">7850587</span>,<span class="number">7856587</span>,<span class="number">7865687</span>,<span class="number">7867687</span>,<span class="number">7868687</span>,<span class="number">7873787</span>,<span class="number">7884887</span>,<span class="number">7891987</span>,<span class="number">7897987</span>,<span class="number">7913197</span>,</span><br><span class="line"><span class="number">7916197</span>,<span class="number">7930397</span>,<span class="number">7933397</span>,<span class="number">7935397</span>,<span class="number">7938397</span>,<span class="number">7941497</span>,<span class="number">7943497</span>,<span class="number">7949497</span>,<span class="number">7957597</span>,<span class="number">7958597</span>,<span class="number">7960697</span>,<span class="number">7977797</span>,<span class="number">7984897</span>,<span class="number">7985897</span>,</span><br><span class="line"><span class="number">7987897</span>,<span class="number">7996997</span>,<span class="number">9002009</span>,<span class="number">9015109</span>,<span class="number">9024209</span>,<span class="number">9037309</span>,<span class="number">9042409</span>,<span class="number">9043409</span>,<span class="number">9045409</span>,<span class="number">9046409</span>,<span class="number">9049409</span>,<span class="number">9067609</span>,<span class="number">9073709</span>,<span class="number">9076709</span>,</span><br><span class="line"><span class="number">9078709</span>,<span class="number">9091909</span>,<span class="number">9095909</span>,<span class="number">9103019</span>,<span class="number">9109019</span>,<span class="number">9110119</span>,<span class="number">9127219</span>,<span class="number">9128219</span>,<span class="number">9136319</span>,<span class="number">9149419</span>,<span class="number">9169619</span>,<span class="number">9173719</span>,<span class="number">9174719</span>,<span class="number">9179719</span>,</span><br><span class="line"><span class="number">9185819</span>,<span class="number">9196919</span>,<span class="number">9199919</span>,<span class="number">9200029</span>,<span class="number">9209029</span>,<span class="number">9212129</span>,<span class="number">9217129</span>,<span class="number">9222229</span>,<span class="number">9223229</span>,<span class="number">9230329</span>,<span class="number">9231329</span>,<span class="number">9255529</span>,<span class="number">9269629</span>,<span class="number">9271729</span>,</span><br><span class="line"><span class="number">9277729</span>,<span class="number">9280829</span>,<span class="number">9286829</span>,<span class="number">9289829</span>,<span class="number">9318139</span>,<span class="number">9320239</span>,<span class="number">9324239</span>,<span class="number">9329239</span>,<span class="number">9332339</span>,<span class="number">9338339</span>,<span class="number">9351539</span>,<span class="number">9357539</span>,<span class="number">9375739</span>,<span class="number">9384839</span>,</span><br><span class="line"><span class="number">9397939</span>,<span class="number">9400049</span>,<span class="number">9414149</span>,<span class="number">9419149</span>,<span class="number">9433349</span>,<span class="number">9439349</span>,<span class="number">9440449</span>,<span class="number">9446449</span>,<span class="number">9451549</span>,<span class="number">9470749</span>,<span class="number">9477749</span>,<span class="number">9492949</span>,<span class="number">9493949</span>,<span class="number">9495949</span>,</span><br><span class="line"><span class="number">9504059</span>,<span class="number">9514159</span>,<span class="number">9526259</span>,<span class="number">9529259</span>,<span class="number">9547459</span>,<span class="number">9556559</span>,<span class="number">9558559</span>,<span class="number">9561659</span>,<span class="number">9577759</span>,<span class="number">9583859</span>,<span class="number">9585859</span>,<span class="number">9586859</span>,<span class="number">9601069</span>,<span class="number">9602069</span>,</span><br><span class="line"><span class="number">9604069</span>,<span class="number">9610169</span>,<span class="number">9620269</span>,<span class="number">9624269</span>,<span class="number">9626269</span>,<span class="number">9632369</span>,<span class="number">9634369</span>,<span class="number">9645469</span>,<span class="number">9650569</span>,<span class="number">9657569</span>,<span class="number">9670769</span>,<span class="number">9686869</span>,<span class="number">9700079</span>,<span class="number">9709079</span>,</span><br><span class="line"><span class="number">9711179</span>,<span class="number">9714179</span>,<span class="number">9724279</span>,<span class="number">9727279</span>,<span class="number">9732379</span>,<span class="number">9733379</span>,<span class="number">9743479</span>,<span class="number">9749479</span>,<span class="number">9752579</span>,<span class="number">9754579</span>,<span class="number">9758579</span>,<span class="number">9762679</span>,<span class="number">9770779</span>,<span class="number">9776779</span>,</span><br><span class="line"><span class="number">9779779</span>,<span class="number">9781879</span>,<span class="number">9782879</span>,<span class="number">9787879</span>,<span class="number">9788879</span>,<span class="number">9795979</span>,<span class="number">9801089</span>,<span class="number">9807089</span>,<span class="number">9809089</span>,<span class="number">9817189</span>,<span class="number">9818189</span>,<span class="number">9820289</span>,<span class="number">9822289</span>,<span class="number">9836389</span>,</span><br><span class="line"><span class="number">9837389</span>,<span class="number">9845489</span>,<span class="number">9852589</span>,<span class="number">9871789</span>,<span class="number">9888889</span>,<span class="number">9889889</span>,<span class="number">9896989</span>,<span class="number">9902099</span>,<span class="number">9907099</span>,<span class="number">9908099</span>,<span class="number">9916199</span>,<span class="number">9918199</span>,<span class="number">9919199</span>,<span class="number">9921299</span>,</span><br><span class="line"><span class="number">9923299</span>,<span class="number">9926299</span>,<span class="number">9927299</span>,<span class="number">9931399</span>,<span class="number">9932399</span>,<span class="number">9935399</span>,<span class="number">9938399</span>,<span class="number">9957599</span>,<span class="number">9965699</span>,<span class="number">9978799</span>,<span class="number">9980899</span>,<span class="number">9981899</span>,<span class="number">9989899</span>&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">bool isprime(ll N)&#123;</span><br><span class="line">string str = std::to_string(N)<span class="comment">;</span></span><br><span class="line">ll n = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">for(int i = <span class="number">0</span><span class="comment">;i&lt;str.size()/2;i++)&#123;</span></span><br><span class="line">n = n*<span class="number">10</span>+(str[i]-'<span class="number">0</span>')<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">if(n == <span class="number">1</span>||n ==<span class="number">0</span>) return false<span class="comment">;</span></span><br><span class="line">int t = lower_bound(prime,prime+NN,n)-prime<span class="comment">;</span></span><br><span class="line">if(t == NN) return false<span class="comment">;</span></span><br><span class="line">if(prime[t] == n) return true<span class="comment">;</span></span><br><span class="line">return false<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ll ksm(ll a,ll b)&#123;</span><br><span class="line">ll res = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">while(b)&#123;</span><br><span class="line">if(b&amp;<span class="number">1</span>) res = res*a<span class="comment">;</span></span><br><span class="line">a = a*a<span class="comment">;</span></span><br><span class="line">b&lt;&lt;=<span class="number">1</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">return res<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bool divide(ll x)&#123;</span><br><span class="line">int coun = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">for(int i = <span class="number">2</span><span class="comment">;i&lt;=x/i &amp;&amp; i&lt;=100;i++)&#123;</span></span><br><span class="line">if(x%i ==<span class="number">0</span> )&#123;</span><br><span class="line">while(x%i ==<span class="number">0</span>) x/=i<span class="comment">;</span></span><br><span class="line">coun++<span class="comment">;</span></span><br><span class="line">if(coun&gt;<span class="number">13</span>) return false<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return true<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">ll T,N<span class="comment">;</span></span><br><span class="line">cin&gt;&gt;T<span class="comment">;</span></span><br><span class="line">while(T--)&#123;</span><br><span class="line">scanf("%lld",&amp;N)<span class="comment">;</span></span><br><span class="line">if(!isprime(N))&#123;</span><br><span class="line">cout&lt;&lt;"NO"&lt;&lt;endl<span class="comment">;</span></span><br><span class="line">continue<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">if(!divide(N))&#123;</span><br><span class="line">cout&lt;&lt;"NO"&lt;&lt;endl<span class="comment">;</span></span><br><span class="line">continue<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;"YES"&lt;&lt;endl<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//非打表做法</span><br><span class="line">//#pragma GCC optimize(<span class="number">3</span>)</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#define INF <span class="number">0</span>x3f3f3f3f</span><br><span class="line">using namespace std<span class="comment">;</span></span><br><span class="line">typedef long long ll<span class="comment">;</span></span><br><span class="line">typedef unsigned long long ull<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">const int MAXN = <span class="number">1</span>e7+<span class="number">7</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">int prime[MAXN]<span class="comment">;</span></span><br><span class="line">int visit[MAXN]<span class="comment">;</span></span><br><span class="line">void Prime()&#123;   //网上随便找了个素筛板子，好像visit[i]==<span class="number">0</span>表示素数（为什么两个数组不反过来用</span><br><span class="line">    memset(visit,<span class="number">0</span>, sizeof(visit))<span class="comment">;</span></span><br><span class="line">    memset(prime, <span class="number">0</span>, sizeof(prime))<span class="comment">;</span></span><br><span class="line">    for (int i = <span class="number">2</span><span class="comment">;i &lt;= MAXN; i++) &#123;</span></span><br><span class="line">        // cout&lt;&lt;" i = "&lt;&lt;i&lt;&lt;endl<span class="comment">;</span></span><br><span class="line">        if (!visit[i]) &#123;</span><br><span class="line">            prime[++prime[<span class="number">0</span>]] = i<span class="comment">;      //纪录素数， 这个prime[0] 相当于 cnt，用来计数</span></span><br><span class="line">        &#125;</span><br><span class="line">        for (int j = <span class="number">1</span><span class="comment">; j &lt;=prime[0] &amp;&amp; i*prime[j] &lt;= MAXN; j++) &#123;</span></span><br><span class="line">            visit[i*prime[j]] = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">            if (i % prime[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                break<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">char s[<span class="number">20</span>]<span class="comment">;</span></span><br><span class="line">char w[<span class="number">20</span>]<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    // ll q<span class="comment">;</span></span><br><span class="line">    // q = <span class="number">2*3*5*7</span>*<span class="number">11</span>*<span class="number">13</span><span class="comment">;</span></span><br><span class="line">    // q = q*<span class="number">17</span>* <span class="number">19</span>* <span class="number">23*29*31*37</span>*<span class="number">41</span><span class="comment">; //13:304250263527210  14:13082761331670030</span></span><br><span class="line">    Prime()<span class="comment">;</span></span><br><span class="line">    int i, k, flag, n<span class="comment">;</span></span><br><span class="line">    ll a, b<span class="comment">;</span></span><br><span class="line">    int t<span class="comment">;</span></span><br><span class="line">    cin&gt;&gt;t<span class="comment">;</span></span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf("%lld", &amp;a)<span class="comment">;</span></span><br><span class="line">        if(a&lt;=<span class="number">1000</span>) //食蚁数长度在两位及以上，所以a的长度在四位及以上</span><br><span class="line">        &#123;</span><br><span class="line">            printf("NO\n")<span class="comment">;</span></span><br><span class="line">            continue<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        b = a<span class="comment">;</span></span><br><span class="line">        k = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">        flag = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">        while(b)  //统计a的长度并且转换为字符串</span><br><span class="line">        &#123;</span><br><span class="line">            s[k++] = b%<span class="number">10</span><span class="comment">;</span></span><br><span class="line">            b/=<span class="number">10</span><span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        n = k<span class="comment">;  //长度</span></span><br><span class="line">        if(n&gt;=<span class="number">16</span>)   //a长度为<span class="number">16</span>、<span class="number">17</span>位，食蚁数长度为<span class="number">8</span>位；或者a==<span class="number">100000000000000000</span>，食蚁数==<span class="number">100000000</span></span><br><span class="line">        &#123;</span><br><span class="line">            printf("NO\n")<span class="comment">;</span></span><br><span class="line">            continue<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        for(i=<span class="number">0</span><span class="comment">; i&lt;k/2; i++)  //取食蚁数字符串</span></span><br><span class="line">            w[i] = s[k-i-<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">        k/=<span class="number">2</span><span class="comment">;   //k为食蚁数位数</span></span><br><span class="line">        if(!(k%<span class="number">2</span>))   //一个回文数如果位数为偶数位那么它一定不是素数（<span class="number">11</span>除外）</span><br><span class="line">        &#123;</span><br><span class="line">            if(a/<span class="number">100</span>==<span class="number">11</span> || a/<span class="number">1000</span>==<span class="number">11</span>) printf("YES\n")<span class="comment">;</span></span><br><span class="line">            else printf("NO\n")<span class="comment">;</span></span><br><span class="line">            continue<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        for(i=<span class="number">0</span><span class="comment">; i&lt;k/2; i++)  //检查回文串</span></span><br><span class="line">        &#123;</span><br><span class="line">            if(w[i] != w[k-i-<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">                break<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n = a/pow(<span class="number">10</span>, n-k)<span class="comment">;</span></span><br><span class="line">        if(flag &amp;&amp; !visit[n]) printf("YES\n")<span class="comment">;</span></span><br><span class="line">        else printf("NO\n")<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="wzy的大冒险——出发咯QAQ"><a href="#wzy的大冒险——出发咯QAQ" class="headerlink" title="wzy的大冒险——出发咯QAQ"></a>wzy的大冒险——出发咯QAQ</h2><p>Description:<br>wzy踏上了冒险的旅程。<br>现在他从地精手里买了一份地图，地图上有n个城镇。<br>他从第一个城镇出发，走向（没钱只能走）第n个城镇，现在，请你帮wzy找到一条最短的路径，并倒序（从n到1）输出一条最短路径。<br>举个栗子:如果有两条路径6 4 3 1和6 5 2 1，我们选择6 4 3 1这条。<br>地精小提示：路是单向的QAQ。</p><p><code>输入格式</code><br>第一行两个数n,m ，(1≤n≤10^3,1≤m≤10^3)</p><p>接下来m行，每行三个数x,y,z，表示点 x 与点 y 之间有一条权值为 z 的有向边 (1≤x,y,z≤10^3).</p><p><code>输出格式</code><br>第一行一个整数表示 1 到 n 的最短距离；<br>第二行倒序输出这条路径。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">69</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">87</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">79</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">94</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">10</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">79</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">43</span></span><br><span class="line">output</span><br><span class="line"><span class="number">122</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn],dis[maxn],f[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,u,v,w;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> d,id;</span><br><span class="line">    <span class="keyword">bool</span>  <span class="keyword">friend</span> <span class="keyword">operator</span> &lt; (node a,node b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a.d &gt; b.d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    dis[i]=INF;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    q.push(node&#123;dis[<span class="number">1</span>],<span class="number">1</span>&#125;);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node p=q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> mid=p.id;</span><br><span class="line">        <span class="keyword">if</span>(vis[mid]==<span class="number">1</span>)    <span class="keyword">continue</span>;</span><br><span class="line">        vis[mid]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[i]&gt;dis[mid]+a[mid][i])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[i]=dis[mid]+a[mid][i];</span><br><span class="line">                f[i]=mid;<span class="comment">//这就是记录路径所用到的数组</span></span><br><span class="line">                q.push(node&#123;dis[i],i&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dis[n]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)    a[i][j]=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        a[u][v]=w;</span><br><span class="line">    &#125;</span><br><span class="line">    solve();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">while</span>(f[n]!=n)<span class="comment">//输出最短路径所用到的查找</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;f[n]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        n=f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="wzy的大冒险——数学王国"><a href="#wzy的大冒险——数学王国" class="headerlink" title="wzy的大冒险——数学王国"></a>wzy的大冒险——数学王国</h2><p>Description:<br>wzy这一次来到了数学王国，加号国王为了考验他，找来了一个数字n，告诉了wzy这个数字的阶乘的末尾零的个数Q，猜错的话就要把wzy赶出去。现在请你帮帮wzy求这个数最小为多少。<br>若不存在输出”impossible”(输出不带引号)。</p><p><code>输入格式</code><br>输入数据包含T组(1≤T≤10000)<br>每一组数据包含一个数字Q (0≤Q≤10^8)</p><p><code>输出格式</code><br>对于每一组数据请输出这个数字n,否则输出”impossible”(输出不带引号)。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">output</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">impossible</span><br><span class="line">input</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10000000</span></span><br><span class="line">output</span><br><span class="line"><span class="number">40000010</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">ans = ans + (x / <span class="number">5</span>);</span><br><span class="line">x = x / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">er_fen</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll l = <span class="number">0</span>, r = maxx;</span><br><span class="line">ll mid;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">mid = l + r;</span><br><span class="line"><span class="keyword">if</span>(solve(mid / <span class="number">2</span>) &gt;= n)</span><br><span class="line">r = mid / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l = mid / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line">ll x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">y = er_fen(x) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(solve(y) == x)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"impossible"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="wzy的大冒险——a-b问题"><a href="#wzy的大冒险——a-b问题" class="headerlink" title="wzy的大冒险——a+b问题"></a>wzy的大冒险——a+b问题</h2><p>Description:<br>每个ACMer都是从a+b问题开始的，今天wzy翻到了他的第一个a+b程序，并想让你来输出它</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>int a,b;<br>scanf(“%d %d”,&amp;a,&amp;b);<br>int c=a+b;<br>printf(“%d\n”,c);<br>return 0;<br>}<br><code>输入格式</code><br>本题无输入</p><p><code>输出格式</code><br>将上面代码输出<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line">output</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">int</span> c=a+b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"#include&lt;stdio.h&gt;\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"int main()\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#123;\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"int a,b;\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"scanf(\""</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"%d "</span> &lt;&lt; <span class="string">"%d"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\",&amp;a,&amp;b);\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"int c=a+b;\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"printf(\""</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"%d\\n"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\",c);\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"return 0;\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&#125;\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="wzy的大冒险——炉石传说"><a href="#wzy的大冒险——炉石传说" class="headerlink" title="wzy的大冒险——炉石传说"></a>wzy的大冒险——炉石传说</h2><p>Description:<br>wzy来到了炉石传说的世界。<br>他发现他现在有n个攻击力为ai的随从，每个随从只能攻击一次。<br>对面的boss有m个血量为bi的具有嘲讽的随从（嘲讽即为你必须先把这些怪物击败才可攻击boss）。<br>当我方随从攻击力大于等于敌方随从血量时，敌方随从死亡。<br>由于boss的强力技能，对方的随从只能受到一次攻击，受到攻击后无法再一次受到攻击。(你无法使两个随从都攻击对方的同一个的随从)。<br>wzy必须先干掉对方的所有随从才能使用剩下的随从攻击boss本身。<br>对方boss有k的血量，现在请问wzy能否干掉敌方boss回归现实世界？</p><p><code>输入格式</code><br>第一行为三个数n，m，k。n 为wzy拥有的随从数量，m为boss拥有的随从数量，k为boss血量。<br>第二行为n个数，分别是wzy随从的攻击力;<br>第三行为m个数，分别是boss随从的血量。<br>以上数据范围均在[1,100]范围内</p><p><code>输出格式</code><br>如果胜利输出Win，否则输出Lose<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line">output</span><br><span class="line">Win</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[maxx], b[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">sort(b + <span class="number">1</span>, b + m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n &lt;= m) <span class="built_in">puts</span>(<span class="string">"Lose"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[n] &gt;= b[m])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; b[i])</span><br><span class="line">&#123;</span><br><span class="line">ans += a[j];</span><br><span class="line">a[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a[j] = <span class="number">0</span>;</span><br><span class="line">b[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) ans += a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line"><span class="keyword">if</span>(b[i] != <span class="number">0</span>)</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ans &gt;= k &amp;&amp; flag == <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"Win"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Lose"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Lose"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="wzy的大冒险——接龙红包"><a href="#wzy的大冒险——接龙红包" class="headerlink" title="wzy的大冒险——接龙红包"></a>wzy的大冒险——接龙红包</h2><p>Description:<br>最近QQ更新了一个新的功能–“接龙红包”，会长作为算协的土豪，便开始在群里发红包,wzy总是抢的又快又准，现在他开始研究成语接龙的奥秘。<br>现在QQ的词库里面有n种成语，每种成语由一个只由小写字母组成的字符串表示，现在wzy发现了一个问题，如果有个同学说了一个成语，但是在词库里找不到可以接在它后面的成语（即找不到一个成语的首字母和该成语的尾字母相同），这样的成语被称为死局成语，现在zy想知道在词库里面有多少这样的死局成语。</p><p><code>输入格式</code><br>第一行输入n，接下来n行每行输入一个字符串代表一个成语s。<br>(1≤n≤100,1≤|s|≤20)</p><p><code>输出格式</code><br>第一行输出死局成语的个数m。<br>接下来m行每行输出一个死局成语，输出顺序应和输入顺序保持一致。<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line">3</span><br><span class="line">aaa</span><br><span class="line">bab</span><br><span class="line">abc</span><br><span class="line">output</span><br><span class="line">1</span><br><span class="line">abc</span><br><span class="line">input</span><br><span class="line">3</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">output</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx=<span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str[maxx], str2[maxx];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, len = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//if(str[i][0] == str[i][str[i].size() - 1]) continue;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(str[j][<span class="number">0</span>] == str[i][str[i].size() - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">continue</span>;</span><br><span class="line">ans ++;</span><br><span class="line">str2[len ++] = str[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i ++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str2[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="大树的水塘"><a href="#大树的水塘" class="headerlink" title="大树的水塘"></a>大树的水塘</h2><p>Description:<br>那一天，世界上所有的人类都……变成了石头！</p><p>3700年后，千空和大树从石头中苏醒过来，但是世界发生了翻天覆地的变化，人类文明已经不复存在</p><p>天才少年千空立志用自己的科学知识在这个「石之世界」中重建文明</p><p>为了生存，淡水是必不可少的，每次都用海水进行蒸馏会比较麻烦，所以千空决定让大树建造一个水塘来存储雨水</p><p>水塘建造在一个无限长，高度不超过100，宽度为1的峡谷里，所以只需要往里面填石头，即可达到蓄水的目的</p><p>当大树建造好水塘让千空去检查的时候，千空一口老血喷了出来：因为大树是一个体力笨蛋，所以建造的水塘底部是参差不齐的，这使得建造蓄水相同体积的水塘，大树多用了好多石头</p><p>已知每块石头中的规格是1×1×1，水塘的长度为N，宽度为1，在第i位置，大树放了ai个石头</p><p>设大树建造的水塘蓄水量为V</p><p>请你求出在长度和宽度不变的情况下，建造一个蓄水量不小于V的水塘最多可以节约多少石头</p><p><code>输入格式</code><br>单组输入</p><p>第一行一个数N (1≤N≤10^7)表示水塘的长度</p><p>第二行有N个非负数xi (0≤xi≤100)，表示第i个位置上放的石头数</p><p><code>输出格式</code><br>输出有两行</p><p>第一行输出大树建造的水塘的蓄水量V</p><p>第二行输出最多可以节约多少石头</p><p>提示：<br><img src="https://i.loli.net/2019/08/12/QEaeDWHc3n6N5U4.png" alt="water.7mDyN9DT.png"><br><img src="https://i.loli.net/2019/08/12/N3wqmRapOiJcSFr.png" alt="water_new.pQvfFov7.png"><br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line">output</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"><span class="keyword">int</span> l[maxx], r[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> max_left, max_right;</span><br><span class="line"><span class="keyword">int</span> cnt_left, cnt_right;</span><br><span class="line">ll v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">ll sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="comment">//输入每个石块，算出总石头个数</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i], sum += <span class="number">1L</span>L * a[i];</span><br><span class="line">max_left = max_right = <span class="number">0</span>;</span><br><span class="line">v = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//前后缀</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">max_left = max(max_left, a[i]), l[i] += max_left;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">max_right = max(max_right, a[i]), r[i] += max_right;</span><br><span class="line"><span class="comment">//利用前后缀和的优势找出来，算出储水体积</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++)</span><br><span class="line">v += <span class="number">1L</span>L * min(l[i], r[i]) - a[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="comment">//除去两边的石块(因为两边都是石头)</span></span><br><span class="line"><span class="keyword">int</span> height = <span class="built_in">ceil</span>(<span class="number">1.0</span> * v / (n - <span class="number">2</span>));</span><br><span class="line"><span class="comment">//保证储水不溢出，两边都要有防护</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum - height * <span class="number">2</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="幸运素数"><a href="#幸运素数" class="headerlink" title="幸运素数"></a>幸运素数</h2><p>Description:<br>跳皮筋 我第一，马兰开花二十一；</p><p>二五六 二五七，二八二九三十一；</p><p>三五六 三五七，三八三九四十一；</p><p>……</p><p>童谣《马兰花》作为建国以来最大的数学难题，里面数字的含义困扰了全国人民几十年，并且一直未解</p><p>难道这些数字真的只是为了押韵生搬硬凑的数字吗？</p><p>并！不！是！</p><p>经过wzy的多年研究，他发现了里面潜藏的惊天大秘密（并没有）：</p><p>28=256，而257是离256最近的素数</p><p>28是第二个完美数，29是离28最近的素数</p><p>31是第四个幸运素数</p><p>仅仅这一句话中，就出现了二进制、素数、完美数、幸运数！</p><p>这哪里是童谣？这分明就是中国版的达芬奇密码！</p><p>今天wzy就来考考你《马兰花》里出现的数学知识：</p><p>幸运数是经由类似埃拉托斯特尼筛法的演算法后留下的整数集合，是在1955年波兰数学家乌拉姆提出。</p><p>由一组由1开始的数列为例：</p><p>1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25, …<br>先将所有偶数删去，只留下奇数：</p><p>1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25,…<br>然后把数列中的第 2 个数字(设该数字为 x )的倍数对应的数删除，即把所有第 nx,x∈Z+ 个数删除，例如上述例子中，第 2 数字是 3 ，所以删去所有第 3n 个数：</p><p>1, 3, 7, 9, 13, 15, 19, 21, 25,…<br>新数列的第 3 项(每次都加上 1 )为 7 ，因此将新数列的第 7n 个数删除：</p><p>1, 3, 7, 9, 13, 15, 21, 25,…<br>若一直重复上述的步骤，最后剩下的数就是幸运数</p><p>（以上内容来自维基百科幸运数）</p><p>我们将既是幸运数又是素数的数叫做幸运素数</p><p>现在给你一个数N，请判断N是否是一个幸运素数</p><p><code>输入格式</code><br>第一行一个数T，代表有T个数(1≤T≤2×10^5)</p><p>第1∼T行，每行一个正整数N(1≤N≤2×10^5)</p><p><code>输出格式</code><br>对于每个输入的数N，如果N是幸运素数，输出Yes，否则输出No<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">样例</span></span><br><span class="line"><span class="string">input</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="string">output</span></span><br><span class="line"><span class="literal">No</span></span><br><span class="line"><span class="literal">No</span></span><br><span class="line"><span class="literal">Yes</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">2e5</span> + <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> prime[maxx], luck[maxx];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">200010</span>; i ++)</span><br><span class="line">prime[i] = <span class="number">1</span>;</span><br><span class="line">prime[<span class="number">0</span>] = prime[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">200010</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j * i &lt; <span class="number">200010</span>; j ++)</span><br><span class="line">prime[i * j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_luck</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v.push_back(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">200010</span>; i += <span class="number">2</span>)</span><br><span class="line">v.push_back(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">200010</span>; i ++)</span><br><span class="line">luck[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ti = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len = v.size();</span><br><span class="line"><span class="keyword">int</span> s = v[ti];</span><br><span class="line"><span class="keyword">if</span>(s &gt; len - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = s; i &lt; len; i += s)</span><br><span class="line">v[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = v.begin() + <span class="number">1</span>; it &lt; v.end(); it ++)</span><br><span class="line"><span class="keyword">if</span>(*it == <span class="number">0</span>)</span><br><span class="line">v.erase(it);</span><br><span class="line">ti ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v.size(); i ++)</span><br><span class="line">luck[v[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">get_prime();</span><br><span class="line">get_luck();</span><br><span class="line"><span class="keyword">int</span> t , n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(luck[n] &amp;&amp; prime[n])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="NO-GAME-NO-LIFE"><a href="#NO-GAME-NO-LIFE" class="headerlink" title="NO GAME NO LIFE"></a>NO GAME NO LIFE</h2><p>Description:<br>空白，永不败北！</p><p>作为世界的唯一神灵，游戏之神特图的日常就是改变自己的外表，在世界各地游荡</p><p>在被空和白在一次网上的国际象棋比赛击败后，他以拯救人类种的名义将兄妹二人召唤到迪斯博德</p><p>来到迪斯博德的空白，常常因为在游戏上找不到对手而感到无聊</p><p>在风和日丽的一个下午，空白出门视察国情，在路上偶遇了扮成人类种闲逛的特图，特图为了打发时间，决定向空白发起挑战，游戏内容如下：</p><p>在一棵有着N个节点的树上，第i个节点上有xi颗钻石，由最先开始的一方选择一个节点进行标记，标记完成后，双方轮流进行如下操作：拿走标记节点的一颗钻石，并将标记移至与当前节点直接相连的节点，至到出现无法拿石子的一方停止。</p><p>空白兄妹听完游戏规则后，立刻做出了回应，但前提是空白作为先手选择节点</p><p>特图自认为这是一个特别公平的游戏，所以就答应了这个要求</p><p>每当一棵树出现后，空白凭借超人的数学能力，能够在一秒内快速判断出能否获胜</p><p><code>输入格式</code><br>单组输入，第一行一个正整数N (2≤N≤10^6)，表示这棵树有N个节点</p><p>第二行有N个正整数xi (1≤xi≤100)，表示i节点上有xi颗钻石</p><p>接下来N−1行，每行两个整数x,y (1≤x,y≤N)，表示节点x与节点y相连</p><p><code>输出格式</code><br>如果空白可以获胜，输出Blank</p><p>否则输出Teto<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">output</span><br><span class="line">Teto</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">output</span><br><span class="line">Blank</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">sort(a, a + n);</span><br><span class="line">n = unique(a, a + n) - a;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Teto"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Blank"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*不要直接用cin,cout，会超时*/</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day22&quot;&gt;&lt;a href=&quot;#Day22&quot; class=&quot;headerlink&quot; title=&quot;Day22&quot;&gt;&lt;/a&gt;Day22&lt;/h1&gt;&lt;p&gt;有是一次&lt;code&gt;积分赛&lt;/code&gt;&lt;br&gt;有是自闭的一天&lt;br&gt;&lt;code&gt;补题&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="算法集训" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E9%9B%86%E8%AE%AD/"/>
    
  </entry>
  
  <entry>
    <title>Day21比赛题解</title>
    <link href="http://yoursite.com/2019/08/09/Day21%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/09/Day21题解/</id>
    <published>2019-08-08T16:00:00.000Z</published>
    <updated>2019-08-09T13:33:38.196Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --><h1 id="Day21"><a href="#Day21" class="headerlink" title="Day21"></a>Day21</h1><p><code>比赛题解</code><br><code>补题</code><br><a id="more"></a></p><blockquote><p>PS:只要能看得懂题意，就是水题了</p></blockquote><p><a href="https://vjudge.net/contest/318470#overview" target="_blank" rel="noopener">链接</a></p><h2 id="MaratonIME-helps-Pablito"><a href="#MaratonIME-helps-Pablito" class="headerlink" title="MaratonIME helps Pablito"></a>MaratonIME helps Pablito</h2><p>Description:<br>♬ Caloventor tiene miedo… ♬<br>Benedetto, Nathan<br>As is well known by any cultured person, rats are the smartest beings on earth. Followed directly by dolphins.</p><p>MaratonIME knows about the species hierarchy and uses this knowledge in it’s regard. Usually, when they need some resource, they know it’s always useful to have a smart rat available. Unfortunately, rats are not very fond of us, primates, and will only help us if they owe us some favour.</p><p>With that in mind, MaratonIME decided to help a little rat called Pablito. Pablito is studying rat’s genealogy, to help with cloning and genetic mapping. luckily, the way rats identify themselves make the job much easier.</p><p>The rat society is, historically, matriarchal. At first, there were little families, each of which had it’s own leading matriarch. At that time, it was decided that rats would organize themselves according to the following rules:</p><p>Each martiarch had an id number greater than one.<br>Each of these ids were chosen in a way such that they would have the least amount of divisors possible.<br>Each family member had the same id as the matriarch.<br>The id of any newborn rat would be the product of its parents id’s.<br>For instance, the offspring of a rat with id 6 and another with id 7 is 42.</p><p>Pablito needs to know if two given rats have a common ancestor, but his only tool is the id number of each of the two rats, which is always a positive integer greater than 1 with no more than 16 digits. Can you help him?</p><p>Create a program that decides if a pair of rats have some common ancestor.</p><p><code>Input</code><br>The input begins with a positive integer t ≤ 105, the number of test cases.</p><p>After that, follows t lines, each with two integers ai e bi identifying two rats.</p><p>Every rat’s id is a positive integer greater than 1 and with no more than 16 digits.</p><p><code>Output</code><br>For each test case, print “Sim” if the rats ai and bi share a common ancestor and “Nao” otherwise.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line">Output</span><br><span class="line">Sim</span><br><span class="line">Nao</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t, n, m;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;n, &amp;m);</span><br><span class="line"><span class="keyword">int</span> ans = __gcd(n, m);</span><br><span class="line"><span class="keyword">if</span>(ans != <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"Sim"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Nao"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-plays-Cirokime"><a href="#MaratonIME-plays-Cirokime" class="headerlink" title="MaratonIME plays Cîrokime"></a>MaratonIME plays Cîrokime</h2><p>Description:<br>Have you ever seen flavored vodka?<br>Everaldo, Glauber<br>The MaratonIME members like to have fun. As they enjoy having fun so much, they have invented a game named “Cîrokime”. The game works as follows:</p><p>First, n cups with Cîroc1 are lined up. In front of the i-th cup a number ai is written. It is guaranteed that ai &lt; ai + 1, for all 1 ≤ i &lt; n. Then, the numbers are covered and the game starts.</p><p>The player must then find the cup that has a certain number x. It is guaranteed that this cup exists. For this, he has to choose a cup i and drink the beverage. Then, the cup’s number ai is revealed and if this number is equal to x the game finished. Otherwise, the player has to choose another cup and so on.</p><p>“Cîrokime” is a traditional game among MaratonIME members, they play it every party. At the last party, Sussu had to drink all of the n cups because he found the right cup only at the end. He got sick for drinking so much and had to be carried home3</p><p>However, the DESMAME4 is scheduled for May 13 and Sussu wants to restore his dignity. For this, he wants to know, in the worst case, what is the maximum number of cups that he will have to drink if he plays in the optimal way.</p><p><code>Input</code><br>The first line has a single integer n, the number of cups. The second line has n integers ai, the values hidden in each cup.</p><p>1 ≤ n ≤ 105<br>For all i, 1 ≤ ai ≤ 109<br>For i &lt; n, ai &lt; ai + 1<br><code>Output</code><br>The output has a single line with a single integer: the minimum number of cups that Sussu should drink, in the worst case, if he plays in the optimal way.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">7</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">2</span></span><br><span class="line">Input</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, ans;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i ++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span>(t)</span><br><span class="line">&#123;</span><br><span class="line">t /= <span class="number">2</span>;</span><br><span class="line">ans ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-plays-Nim"><a href="#MaratonIME-plays-Nim" class="headerlink" title="MaratonIME plays Nim"></a>MaratonIME plays Nim</h2><p>Description:<br>Ai Fox!<br>UnionFind, Germano<br>You open your eyes, but everything remains dark. The world is dark, and everything shakes. You realize you are locked in, but before desperation takes hold, you hear the door opening and the light invades your sight and blinds you for a few moments.</p><p>They help you out, you had been locked inside a trunk. You don’t know the masked faces before you, but remember that in the last competitive programming practice they told you that “the beginning is yet to come”. “So this is the fabled MaratonIME’s initiation challenge”, you had heard rumors of this event, and you feel honored to be chosen.</p><p>After walking into and abandoned building, they sit you on an old chair. The first test is to watch a soccer game without any show of excitement. Easy. The second is to install Linux on a notebook in less than 5 minutes. You were prepared, carrying the Arch Linux pendrive as usual, just in case. You face more tests, and manage to pass all of them despite a few difficulties.</p><p>Hours go by, the members remove their masks, and each take a coin out of their pocket. “I won! And I even got rich” you think, but realize they place the coins in a table in front of you, divided in two piles. Renzo, MaratonIME’s great boss, takes a chair and sits in front of you. You will play a match of Nim, and if you win you will become an honorary member of MaratonIME, that is, you win a balloon.</p><p>Nim is a game of two players, alternating their turns. Two piles of coins are placed on a table and in each turn you can remove any non zero quantity of coins from one of the piles. The last player to take their turn (leaving both piles empty) wins.</p><p>You start the game. So it would not be unfair, it is guaranteed that it is possible for you to win. Write a program than beats Renzo 100% of the time.</p><p><code>Input</code><br>In the first line, two integers, x and y, the size of the piles, such that 0 ≤ x, y ≤ 104. It is guaranteed that you can win the game.</p><p><code>Interaction</code><br>In your turn, print two integers, i and x, where i is the number of the pile from which you will remove the coins (i 属于 {1, 2}), and x is the number of coins you will remove (x ≥ 1, such that i has at least x coins).</p><p>In Renzo’s turn, read two integers, in the same format as in your turn.<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line">2 1</span><br><span class="line">1 1</span><br><span class="line">Output</span><br><span class="line">1 1</span><br><span class="line">2 1</span><br><span class="line">Note</span><br><span class="line">Of course we <span class="keyword">do</span> <span class="keyword">not</span> <span class="keyword">do</span> an initiation challenge like this :P</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> the example, we have a pile with 2 coins <span class="keyword">and</span> another with 1. You <span class="builtin-name">remove</span> 1 coin <span class="keyword">from</span> the first pile, <span class="keyword">and</span> now <span class="literal">no</span> matter what coin Renzo removes, you can <span class="builtin-name">remove</span> the other <span class="keyword">and</span> win.</span><br><span class="line"></span><br><span class="line">Remember, after printing your play, flush the output, like: fflush(stdout); <span class="keyword">in</span> C, cout.flush(); <span class="keyword">in</span> C++, <span class="keyword">or</span> sys.stdout.flush() <span class="keyword">in</span> Python.</span><br></pre></td></tr></table></figure><p></p><blockquote><p>关于flush()<br>flush() 是把缓冲区的数据强行输出，(注意不要和frush()刷新混淆了)<br>主要用在IO中，即清空缓冲区数据，一般在读写流(stream)的时候，数据是先被读到了内存中，再把数据写到文件中，当你数据读完的时候不代表你的数据已经写完了，因为还有一部分有可能会留在内存这个缓冲区中。这时候如果你调用了close()方法关闭了读写流，那么这部分数据就会丢失，所以应该在关闭读写流之前先flush()。<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>.flush();</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>) </span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>.flush();</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"1"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;a-b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&lt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"2"</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;b-a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">3</span>-x&lt;&lt;<span class="string">" "</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>.flush();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="MaratonIME-plays-Chess"><a href="#MaratonIME-plays-Chess" class="headerlink" title="MaratonIME plays Chess"></a>MaratonIME plays Chess</h2><p>Description:<br>This problem is boring as duck.<br>Kawakami, Marcos<br>Our dear Nathan, when a little child, used to like chess a lot, but this was a long time ago. One of these days he was challenged by @luisgust to a chess match and, as he is a guy that likes hard challenges, he accepted it. The problem is that Nathan keeps forgetting the rules of the game, so he asked you to help him determine if a given opponent’s piece can be captured in one move.</p><p>Chess, in MaratonIME, is represented as a matrix of characters. Instead of playing with black and white pieces, they play with uppercase and lowercase letters. Nathan has chosen to play with the lowercase letters.</p><p>Besides that, as usual, the positions on the matrix are given in the following coordinates system: Each position is a pair with a character between a and h (inclusive), representing the column, and an integer between 1 and 8 (inclusive), representing the row. For exemple, the position d2 refers to the fourth column (from left to right) and second row (from bottom to top), and the position f6 refers to the sixth column and sixth row. Lowercase letters start on the bottom of the grid, on lines 1 and 2.</p><p>Here position A is adjacent position B if A shares a vertex with B, that is, if the distance between their rows is at most one and the distance between their columns is at most one. For example, the position c4 is adjacent to 8 positions: b3, b4, b5, c3, c5, d3, d4 and d5.</p><p>They decided to play a simplified version of chess. To help you, they gave you the following manual on how to play it:</p><p>The pawn, represented by p or P, can capture pieces that share a diagonal and is in front of it, that is, the lowercase pawn on c4 can capture pieces at b5 or d5.<br>The knight, represented by c or C, makes L-shaped moves in any of the 8 possible directions, that is, it moves two positions in any direction and after that one position in a direction that is perpenticular to the first one. A knight on c4 can capture, in one move, pieces on positions a3, a5, b2, b6, d2, d6, e3 and e5.<br>The rook, represented by t or T, can capture pieces that are on the same row or the same column as it, as long as no other piece lies between them. For example, a rook on c4 can capture any piece on column c or row 4, as long as there is no other piece in between. If the rook is on c4 and there is another piece on c6, the rook can’t capture pieces on c7 and c8.<br>The bishop, represented by b or B, can capture any piece on one of its diagonals as long as there are no piece between them (diagonaly). For example, the bishop on c4 can capture a piece on f7 as long as there are no piece on d5 and e6.<br>The queen, represented by r or R, can capture any piece that lies on the same row, column or diagonal, given there are no pieces in between, as if it were a bishop and a rook at the same time.<br>The king, represented by k or K, can capture any piece that is adjacent to it.<br>The character . represents an empty position.<br>Given a matrix representing a chess board and an opponent’s piece, your program needs to determine whether you can capture it with one of your pieces. It is guaranteed that each player has at most two bishops, two rooks, two knights, eight pawns, one king and one queen.</p><p><code>Input</code><br>The input begins with 8 lines with 8 characters each, representing the chess board. The first line contains the characters on the positions a8, b8, … , h8. The second line contains the characters on positions a7, b7, … , h7, and so on. After that follows a line containing the position of the opponent’s piece you wish to capture.</p><p><code>Output</code><br>Print a single line containing the word Sim if it is possible to capture the piece or Nao otherwise.<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line">TCBRKBCT</span><br><span class="line">PPPPPPPP</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">pppppppp</span><br><span class="line">tcbrkbct</span><br><span class="line">d8</span><br><span class="line">Output</span><br><span class="line">Nao</span><br><span class="line">Input</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span>R<span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line"><span class="built_in">..</span>.p<span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">c5</span><br><span class="line">Output</span><br><span class="line">Sim</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不会，，，</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-rides-the-university-bus"><a href="#MaratonIME-rides-the-university-bus" class="headerlink" title="MaratonIME rides the university bus"></a>MaratonIME rides the university bus</h2><p>Description:<br>If we organize it correctly, …<br>Unknown<br>To make the trip to the subway less boring and tiring, the SPSU, Sao Paulo State University, tried one of its most famous inventions: buses with Infinite Inner Length! In such a modern engineering wonder, there’s always a couple of empty seats for the students to sit and chat during the trip.</p><p>MaratonIME crew is very popular, so popular that they have friends at every SPSU institute. Like everyone else from this university, they need to take the bus after a long day learning how to fix the Wi-Fi network. Because they don’t practice sports like rowing, every SPSU student sits right after entering the bus, making pairs whenever possible. Thinking about that, Gi, an ICPC expert, comes with a problem to think on the way to the subway: given a number n which indicates the number of institutes at SPSU and n integers ai representing the amount of people waiting for the bus at the institute i, Gi wants to know for m pairs lj, rj (lj ≤ rj) if all the people waiting for the bus at any point between lj e rj (inclusive) took an empty bus, they could sit together in pairs (nobody would sit alone).</p><p><code>Input</code><br>The input consist in one line with two integers n and m, the number of institutes and the number of Gi’s questions. In the second line there are n integers ai, the number of people waiting for the bus at the ith institute. Then follows m lines with two integers each, li and ri, the first and last institute of Gi’s question.</p><p>1 ≤ n, m ≤ 105<br>0 ≤ ai ≤ 105<br>1 ≤ li ≤ ri ≤ n<br><code>Output</code><br>Output “Sim” if it is possible to organize all the pairs in a way nobody sits alone or “Nao” otherwise.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">10</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line">Output</span><br><span class="line">Nao</span><br><span class="line">Sim</span><br><span class="line">Note</span><br><span class="line">In the first sample we have <span class="number">5</span> institutes with <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">3</span> and <span class="number">2</span> students. Gi asks if it is possible to form only couples if the ones between the <span class="number">3</span>rd and the <span class="number">5</span>th institutes takes an empty bus and the ones between the <span class="number">2</span>nd and the <span class="number">3</span>rd. For the first we have <span class="number">15</span> so we can't and for the second we have <span class="number">14</span> so we can.</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> sum[maxx];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">sum[i] += sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span>((sum[y] - sum[x - <span class="number">1</span>]) &amp; <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"Nao"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Sim"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-attends-the-lecture-or-not"><a href="#MaratonIME-attends-the-lecture-or-not" class="headerlink" title="MaratonIME attends the lecture (or not)"></a>MaratonIME attends the lecture (or not)</h2><p>Description:<br>Has the prof taken attendance yet?<br>Student, IME’s<br>In MaratonIME, as many other groups, some students want to attend lectures just enough to not be flunked by frequency (as we know, in USP, University of Sao Paulo, it is necessary to have 70 percent frequency), however some others are dedicated and try to accomplish the most frequency percent possible, going to school even when they are ill or tired. Curiously, there is not any other kind of students in MaratonIME.</p><p>Wood, an old MaratonIME’s member, needs help. He is taking the course MAC4815162342, and attended k of m lectures that were given. Consider that MAC4815162342 has n lectures in total per semester. He ask you to help finding the best way to accomplish his objectives, but, as you are new in MaratonIME, you don’t know the kind of student that he is. Embarassed to ask more, you decide to solve two problems, so there is not way to go wrong.</p><p><code>Input</code><br>The input consists of a just one line. In this line, you are given three integers n, m and k, with 1 ≤ n ≤ 107 and 0 ≤ k ≤ m ≤ n.</p><p>n is the number of lectures of MAC4815162342 per semester, m is the quantity of lectures that were given and k is the number of lectures attended by Wood.</p><p><code>Output</code><br>In the first line, print the minimum number of lectures that Wood needs to attend to accomplish at least 70% frequency, or  - 1 if it is impossible to accomplish 70% frequency.</p><p>In the second line, print the maximum frequency percent that Wood can accomplish, if he goes to all of the lectures from the next lecture. This value has to be rounded down to the closest integer. Don’t print ‘%’.<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line">10 5 2</span><br><span class="line">Output</span><br><span class="line">5</span><br><span class="line">70</span><br><span class="line">Input</span><br><span class="line">11 2 1</span><br><span class="line">Output</span><br><span class="line">7</span><br><span class="line">90</span><br><span class="line">Note</span><br><span class="line">On the second example, the maximum percentage that Wood can <span class="builtin-name">get</span> is 90.9090.</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k, ans;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;n, &amp;m, &amp;k))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = (<span class="built_in">ceil</span>)(<span class="number">0.7</span> * n);</span><br><span class="line"><span class="keyword">if</span>(x &gt; k) x -= k;</span><br><span class="line"><span class="keyword">else</span> x = <span class="number">0</span>;</span><br><span class="line">ans = (k + n - m) * <span class="number">100.0</span> / n;</span><br><span class="line"><span class="keyword">if</span>(ans &lt; <span class="number">70</span>)x = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>,x, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-goes-rowing"><a href="#MaratonIME-goes-rowing" class="headerlink" title="MaratonIME goes rowing"></a>MaratonIME goes rowing</h2><p>Description:<br>Speed down, Colombooo!!!<br>rowing coach, Gabi<br>As common sense tells us, competitive programmers excel at rowing. The olympic lane is a wonderful place to row, run and work out. What few take their time to appreciate are the capybaras that inhabit the region. Capybaras are fascinating animals! Aside from their beauty, they possess many interesting behaviours. Did you know that capybaras can live in packs as big as 100 individuals?</p><p>In a pleasant sunny morning, Yan was running, as usual. Watching the capybaras, he noticed that they would line up to sunbath. Each capybara was paired with another one, and only another one. Two capybaras can be paired if and only if both see each other. A capybara sees everything in the direction it is looking.</p><p>Curious, Yan decided to represent the capybaras by the letters A and B, where A indicates that the capybara is looking right, and B indicates that the capybara is looking left.</p><p>For example, the sequence AABABB accurately represents capybaras sunbathing, because it is possible to pair every capybara according to the rules above. Yan was so fascinate by this that he slipped and felt into the water, messing his representations. He was able to recover some, but now they are all messed up with each other. Can you help him and find out if a given sequence represent capybaras sunbathing?</p><p><code>Input</code><br>Every instance contains a sequence S of characters, composed only of ‘A’ and ‘B’ – Yan’s representation. You may assume that 1 ≤ |S| ≤ 105.</p><p><code>Output</code><br>The output should contain a single line. Print “Sim” if the sequence represents capybaras sunbathing, or “Nao” otherwise.<br></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Example</span></span><br><span class="line">Input</span><br><span class="line">AABABB</span><br><span class="line">Output</span><br><span class="line">Sim</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std<span class="comment">;</span></span><br><span class="line">const <span class="keyword">int</span> maxx = <span class="number">1</span>e5<span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">string <span class="keyword">str</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; <span class="keyword">str</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>, <span class="keyword">cnt</span> = <span class="number">0</span>, ans = <span class="number">0</span>, L = <span class="number">0</span>, R = <span class="number">0</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">int</span> len = str.size() - <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">if</span>((len + <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span><span class="comment">; i &lt;= len; i ++)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">str</span>[i] == <span class="string">'A'</span>) L ++<span class="comment">;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">str</span>[i] == <span class="string">'B'</span>) R ++<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(L != R)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span><span class="comment">; i &lt; str.size() / 2; i ++)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">str</span>[<span class="number">0</span>] == <span class="string">'B'</span> || <span class="keyword">str</span>[len] == <span class="string">'A'</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">break</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">str</span>[i] == <span class="string">'A'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">cnt</span> ++<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">str</span>[i] == <span class="string">'B'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans ++<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">cnt</span> &lt; ans)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">break</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) puts(<span class="string">"Nao"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">else</span> puts(<span class="string">"Sim"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-goes-to-the-movies"><a href="#MaratonIME-goes-to-the-movies" class="headerlink" title="MaratonIME goes to the movies"></a>MaratonIME goes to the movies</h2><p>Description:<br>Better than “Fifth Wave”<br>in the World, Everyone<br>Believe it if you can, studies show that we in MaratonIME live not only out of competitive programming.</p><p>In a saturday, after taking part in a virtual contest, our heroes decide to enjoy the afternoon watching a movie session. But they didn’t choose any movie, but an n-D movie, that is, a movie with n dimensions.</p><p>During a chase scene, the main character jumps over a chain in the parking lot. Of course this was done in a very athletic way, and for some reason that drove Yan, one of the competitive programmers, mad.</p><p>“Hollywood makes everything seem easy, but jumping over a chain is really hard!”</p><p>The rest of the crowd, after the movie, argued with Yan that the actor surely jumped over the chain, but Yan disagreed, saying that it was done by some camera trick or by special effects.</p><p>To prove his point, he bought another ticket for the movie and this time he took highly precise measuring instruments to the session. Yan’s plan was to show that the distance from the actor’s foot to the floor was smaller than the distance from the chain to the floor, and that would prove that the actor didn’t actually jump over the chain.</p><p>But math in n dimensions is hard. Everyone knows that distance in the 2D plane between two points (x0, y0) and (x1, y1) is given by the formula</p><p><img src="https://i.loli.net/2019/08/09/4XuphOamQiYGUxL.png" alt="295dd04b27b7b5637a67ede5b392f213.png"><br>Most people also know that distance between two points (x0, y0, z0) e (x1, y1, z1) in 3D space is given by the formula</p><p><img src="https://i.loli.net/2019/08/09/hwosDCR4IOptQAg.png" alt="35843a412017eff7d5c7dc53a6ff1d61.png"><br>Both formulas describe the euclidean distance, in the 2 and 3 dimensional case. Your task is, given three points in an n dimensional space, tell if the the closest ones are the foot and the floor or the chain and the flooor, according to euclidean distance.</p><p><code>Input</code><br>The input begins with an integer n, followed by three lines, each with the representation of a point in an n-dimensional space.</p><p>Dimensions confuse us, humans, so you can assume that 1 ≤ n ≤ 105.</p><p>The second line represents the coordinates of the floor, and contains n integers a1, …, an.</p><p>The third line represents the coordinates of the foot of the main character, and contains n integers b1, …, bn.</p><p>The fourth line represents the coordinates of the chain, and contains n integers c1, …, cn.</p><p>The movie theather is not arbitrarily large, so you can assume that the absolute value of these coordinates are not greater than 104.</p><p><code>Output</code><br>Print who wins the argument, that is, print “Yan” if the distance between the floor and the foot is not greater than the distance between the floor and the chain, or “MaratonIME” otherwise.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line">Output</span><br><span class="line">Yan</span><br><span class="line">Input</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">Output</span><br><span class="line">MaratonIME</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>][maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">ans2 += <span class="built_in">pow</span>(a[<span class="number">3</span>][i] - a[<span class="number">1</span>][i], <span class="number">2</span>);</span><br><span class="line">ans1 += <span class="built_in">pow</span>(a[<span class="number">2</span>][i] - a[<span class="number">1</span>][i], <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sqrt</span>(ans1) &lt;= <span class="built_in">sqrt</span>(ans2)) <span class="built_in">puts</span>(<span class="string">"Yan"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"MaratonIME"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-goes-to-a-japanese-restaurant"><a href="#MaratonIME-goes-to-a-japanese-restaurant" class="headerlink" title="MaratonIME goes to a japanese restaurant"></a>MaratonIME goes to a japanese restaurant</h2><p>Description:<br>Matsu?<br>Member, MaratonIME’s<br>Nathan and Yan are very dedicated programmers. They apply their knowledge in algorithms in problems beyond the programming competitions themselves, optimizing even the most trivial every day things.</p><p>Some question if they aren’t just crazy, and if it wouldn’t be better to just do what has to be done.</p><p>Anyhow, eventually some conflicts happen when their approaches differ about what has to be done. That always happens when they decide to go to japanese restaurants.</p><p>Everybody knows that the objective in an all-you-can eat it to try to eat many distinct kinds of food. Nathan and Yan differ in opinions on how to achieve that. Both competitors, when sitting to eat an asian delicacy, eat until nothing is left on their plates.</p><p>The difference is that Yan, respecting the wisdom of the nipponic masters, eats in the order the food arrives, whereas Nathan claims that the food is better the latter it arrives, to spare the most expensive ingredients, and so asks that his plates come in inverted order.</p><p>Given the default order the dishes will arrive and the time Nathan and Yan will stay at the restaurant, determine who is going to eat the most different kinds of food, or if both ate the same number of different kinds of food, given that Yan eats the food in order and Nathan in inverted order.</p><p><code>Input</code><br>The first line of input has two integers: 0 &lt; n ≤ 105, how many plates will be served and 0 &lt; T ≤ 106, how long (in minutes) Yan and Nathan will stay at the restaurant.</p><p>In the following line, n integers 0 &lt; ti ≤ 103, ti is how long it takes to eat the i-th dish (in minutes).</p><p>The restaurants are very well administrated, so you can assume that when one of the competitors finishes his dish, the following dish is already on the table.</p><p><code>Output</code><br>If Yan is going to taste more dishes than Nathan, print “Yan”. If Nathan is going to taste more dishes than Yan, print “Nathan”. Otherwise, if we have a tie, print “Empate”.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line"><span class="number">10</span> <span class="number">45</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line">Output</span><br><span class="line">Yan</span><br><span class="line">Input</span><br><span class="line"><span class="number">10</span> <span class="number">45</span></span><br><span class="line"><span class="number">10</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">1</span></span><br><span class="line">Output</span><br><span class="line">Nathan</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxx];</span><br><span class="line"><span class="keyword">int</span> b[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, t;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;t))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">sum += a[i];</span><br><span class="line">b[m --] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans1 = <span class="number">0</span>, ans2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> t1, t2;</span><br><span class="line">t1 = t2 = t;</span><br><span class="line"><span class="keyword">if</span>(sum &gt;= t)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; t1 &gt;= <span class="number">0</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line">t1 -= a[i];</span><br><span class="line">ans1 ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; t2 &gt;= <span class="number">0</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line">t2 -= b[i];</span><br><span class="line">ans2 ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans1 &gt; ans2) <span class="built_in">puts</span>(<span class="string">"Yan"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans1 &lt; ans2) <span class="built_in">puts</span>(<span class="string">"Nathan"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Empate"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Empate"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-goes-to-the-japanese-restaurant-again"><a href="#MaratonIME-goes-to-the-japanese-restaurant-again" class="headerlink" title="MaratonIME goes to the japanese restaurant (again)"></a>MaratonIME goes to the japanese restaurant (again)</h2><p>Description:<br>Nakato?<br>from MaratonIME, Members<br>After a long day of hard training, MaratonIME (マラトニメ) members decided to go to a Japanese restaurant. Yeah, we love Japanese food.</p><p>After a lot of sushi boats, when everyone was more than satisfied, they asked the sushi-man Sussushi (ススシ) for the last boat. Sussushi felt challenged and answered:</p><p>– You want one more boat? You shall have one more boat…</p><p>The sushi boat that he brought was the biggest that any contestant had ever seen. Some contestants even dare saying that was the biggest sushi boat that ever existed, exceeding the previous limit of 105 sushis made by the suhiwoman Gioza (ジョザ) in 742, in a festival for the king that year, Carlos-sama (カーロス様).</p><p>Besides that the contestants accepted the challenge, and together they managed to eat all the sushis. After that, the contestants we’re so full that they couldn’t touch each other. They couldn’t even think about programming problems. Help them find what pair of friends are touching themselves, so they can move away from each other.</p><p>The contestant are represented as circles in plane, and two contestants touch each other if the circles touch each other. It’s guaranteed that the intersection area of any two circles is null.</p><p><code>Input</code><br>In the first line there is a single integer, n indicating the number of contestants (2 ≤ n ≤ 1000).</p><p>Each one of the next n lines has 3 integers xi, yi e ri, the (i + 1)-th line describes the ith contestant. (xi, yi) are the coordinates of the center of the circle, and ri is the radius. ( - 104 ≤ xi, yi ≤ 104, 1 ≤ ri ≤ 2·104)</p><p>It is guaranteed that the intersection area of any two circles is null.</p><p><code>Output</code><br>For each pair of circles that touch each other, print in one line the indexes of these circles. The collisions can be printed in any order, the indexes of both circles can also be printed in any order.</p><p>Don’t print the collisions more than once, that means, if i intersects with j, print i j or j i, but not both.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">10</span> <span class="number">1</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxx], b[maxx], c[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="built_in">pow</span>(a[i] - a[j], <span class="number">2</span>);</span><br><span class="line">y = <span class="built_in">pow</span>(b[i] - b[j], <span class="number">2</span>);</span><br><span class="line">z = <span class="built_in">pow</span>(c[i] + c[j], <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(x + y &lt;= z)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-goes-to-the-karaoke"><a href="#MaratonIME-goes-to-the-karaoke" class="headerlink" title="MaratonIME goes to the karaoke"></a>MaratonIME goes to the karaoke</h2><p>Description:<br>♬ Hit me, lock me up, do anything with me, … ♬<br>and Marrone, Bruno<br>After thousands of years repeating the title of this problem statement, always with an excited and inviting tone, Nathan finally persuaded his colleagues to go to the karaoke. He is feeling radiant with this achievement.</p><p>But there is a problem. After so much time trying to make his friends go to the karaoke, Nathan is afraid of embarrassing himself when he goes to sing the following classics of Brazilian music:</p><p>Waitress – Reginaldo Rossi<br>Blue Nightclub – Joaquim and Manuel<br>Paper Heart – Sérgio Kings<br>Love Bubble – Fagner<br>You did not teach me to forget – Fernando Mendes<br>To avoid the humiliation, and to not discourage his fellows in future hang outs at the karaoke, Nathan decided to print all the song’s ciphers that are available in the karaoke, to check while he sings. However, this resulted in a colossal amount of paper, that he is not able to carry.</p><p>But the perseverance and ingenuity of an envious programmer is not something you should underestimate.</p><p>Nathan realized that, after all, there were only 7 musical notes. The specialists in this matter used to represent this notes with the letters A, B, C, D, E, F and G. Even more, it’s common that the same note appears several times in sequence. He decided then, to compress the songs, changing every occurrence of repeated notes with the note followed by how many times it occurs.</p><p>For instance, given the sequence</p><p>[(A,A,A,B,B,B,C,G,G,G,G,G,G,G,G,G,G,G)] the compressed version is [A3B3C1G11]</p><p>Unfortunately, Nathan also needs to pack his floral suit and to comb his beard – two homeric jobs – and he is out of time to compress the notes. Help him to not embarrass himself by writing a program that can solve this task.</p><p><code>Input</code><br>Each input consist of a single line, a sequence of caracteres S such as |S| ≤ 105, formed only by the letters A, B, C, D, E, F and G.</p><p><code>Output</code><br>For each input, print in a single line, such as each sequence of similar notes are replaced by the note that occurs and how many times it occurs, as showed in the example.<br></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Examples</span><br><span class="line">Input</span><br><span class="line">ABBGA</span><br><span class="line">Output</span><br><span class="line"><span class="keyword">A</span><span class="number">1B2G1A1</span></span><br><span class="line">Input</span><br><span class="line">AAABBBCGGGGGGGGGGG</span><br><span class="line">Output</span><br><span class="line"><span class="keyword">A</span><span class="number">3B3C1G11</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">mp[str[i]] ++;</span><br><span class="line"><span class="keyword">if</span>(str[i + <span class="number">1</span>] != str[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%d"</span>,str[i], mp[str[i]]);</span><br><span class="line">mp[str[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-goes-karting"><a href="#MaratonIME-goes-karting" class="headerlink" title="MaratonIME goes karting"></a>MaratonIME goes karting</h2><p>Description:<br>Yan, it’s red!!!<br>desperate, Passengers<br>Once after a contest, the competitive programmers were sad because of bad results. Seeing the situation, Renzo, MaratonIME’s coach, suggested they should do something fun to relax. After a big discussion, they decided to go karting. Looking for a place that was viable to all students, they found Kartforces, a kart track near Cidade Universitária. However, the track was too small and only fitted two racers by race. As passionate competitive programmers, they organised a fair tournament where everyone raced against everyone, two by two, only once. In each race, the winner got one point on the scoreboard. Draws were allowed and no one scored in this case. The winner was the biggest scorer. There were N competitive programmers present and:</p><p>Each competitive programmer had a skill hi.<br>If hi &gt; hj where 1 ≤ i, j ≤ N and i ≠ j, then the competitive programmer i won the race against j.<br>You had access to the skills of all competitive programmers and now asks who was the champion.</p><p><code>Input</code><br>The first line consists on a single integer N, the number of competitive programmers. The second line contains N integers hi, the skill of the i - th competitive programmer.</p><p>1 ≤ N ≤ 105<br>0 ≤ hi ≤ 109<br><code>Output</code><br>The output consists in a single integer i, the champion competitive programmer. If it’s not possible to determine the champion, print  - 1.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span></span><br><span class="line">Output</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">ll a[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ans, winner;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">winner = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; winner)</span><br><span class="line">&#123;</span><br><span class="line">winner = a[i];</span><br><span class="line">ans = i;</span><br><span class="line">cnt = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i] == winner)</span><br><span class="line">&#123;</span><br><span class="line">cnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt &gt;= <span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="MaratonIME-returns-home"><a href="#MaratonIME-returns-home" class="headerlink" title="MaratonIME returns home"></a>MaratonIME returns home</h2><p>Description:<br>♬ Renzo, they’re calling. Renzo, pick up the phone ♬<br>Ringtones, Top<br>Popular among the most traditional coders, the Summer Camp is famous for its fancy parties. After each party all attendees must return to their homes, but the way back home is not always easy: mildly drunk coders walk weird and often find or lose money along the way. However, MaratonIME always has a sober member in the group, who assures no one will lose money, except when they are robbed.</p><p>On its way back MaratonIME knows that they can call their coach, Renzo, who will pick them up immediately. Instead of doing that right after the party, they want to know what is the maximum amount of money they can carry back to their homes.</p><p>Your task is to write a program that solves this problem. Consider the following facts:</p><p>The city map can be seen as an N by M grid;<br>Members of MaratonIME are initially at the top left corner, and start walking right, carrying no money;<br>Whenever they reach the end of a row, they walk to the row below and start walking in the opposite direction (if they were walking right, they walk left the next row, and vice-versa);<br>They cannot go past the last row;<br>Whenever they meet a burglar, they lose all their money;<br>They can call Renzo at anytime, and he will pick them up instantly.<br><code>Input</code><br>The first line of the input contains two integers N and M (1 ≤ N, M ≤ 103), respectively, the number of rows and columns of the grid. Then follows N lines, each containing M characters, representing the city map. Each cell of the city map can be either:</p><p>, meaning there is nothing at this cell of the grid;<br>, meaning there is a coin worth 1 unit of money at this cell;<br>, meaning there is a burglar at that cell.<br><code>Output</code><br>The output must contain a single integer: the maximum amount of money MaratonIME can carry back home.<br></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Example</span><br><span class="line">Input</span><br><span class="line">3 3</span><br><span class="line">__.</span><br><span class="line">_._</span><br><span class="line">L._</span><br><span class="line">Output</span><br><span class="line">2</span><br><span class="line">Note</span><br><span class="line"><span class="keyword">In</span> the example above, MaratonIME follows the following path: (1, 1)  (1, 2)  (1, 3)  (2, 3)  (2, 2)  (2, 1)  (3, 1)  (3, 2)  (3, 3). When they reach (2, 2) <span class="keyword">or</span> (2, 1) they will have 2 coins, <span class="keyword">and</span> that is the highest value they can <span class="builtin-name">get</span> before calling Renzo.</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == <span class="string">'L'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = max(ans, tmp);</span><br><span class="line">tmp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i][j] == <span class="string">'.'</span>)</span><br><span class="line">tmp ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == <span class="string">'L'</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = max(ans, tmp);</span><br><span class="line">tmp = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i][j] == <span class="string">'.'</span>)</span><br><span class="line">tmp ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day21&quot;&gt;&lt;a href=&quot;#Day21&quot; class=&quot;headerlink&quot; title=&quot;Day21&quot;&gt;&lt;/a&gt;Day21&lt;/h1&gt;&lt;p&gt;&lt;code&gt;比赛题解&lt;/code&gt;&lt;br&gt;&lt;code&gt;补题&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="算法集训" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E9%9B%86%E8%AE%AD/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Day21</title>
    <link href="http://yoursite.com/2019/08/09/Day21/"/>
    <id>http://yoursite.com/2019/08/09/Day21/</id>
    <published>2019-08-08T16:00:00.000Z</published>
    <updated>2019-08-09T12:48:51.910Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day21"><a href="#Day21" class="headerlink" title="Day21"></a>Day21</h1><p>今天讲的是强连通量<br><code>中间插入了一场比赛</code><br><code>补题</code><br><a id="more"></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>有向图强连通分量：在有向图G中，如果两个顶点vi,vj间（vi&gt;vj）有一条从vi到vj的有向路径，同时还有一条从vj到vi的有向路径，则称两个顶点强连通(strongly connected)。如果有向图G的每两个顶点都强连通，称G是一个强连通图。有向图的极大强连通子图，称为强连通分量(strongly connected components)。</p><p><a href="https://vjudge.net/contest/318470" target="_blank" rel="noopener">比赛链接</a><br><a href>题解</a></p><h2 id="Equivalent-Sets"><a href="#Equivalent-Sets" class="headerlink" title="Equivalent Sets"></a>Equivalent Sets</h2><p>Description:<br>To prove two sets A and B are equivalent, we can first prove A is a subset of B, and then prove B is a subset of A, so finally we got that these two sets are equivalent.<br>You are to prove N sets are equivalent, using the method above: in each step you can prove a set X is a subset of another set Y, and there are also some sets that are already proven to be subsets of some other sets.<br>Now you want to know the minimum steps needed to get the problem proved.<br><code>Input</code><br>The input file contains multiple test cases, in each case, the first line contains two integers N &lt;= 20000 and M &lt;= 50000.<br>Next M lines, each line contains two integers X, Y, means set X in a subset of set Y.<br><code>Output</code><br>For each case, output a single integer: the minimum steps needed.<br></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">4</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">Hint</span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>: First prove <span class="keyword">set</span> <span class="number">2</span> <span class="keyword">is</span> a subset <span class="keyword">of</span> <span class="keyword">set</span> <span class="number">1</span> <span class="keyword">and</span> <span class="keyword">then</span> prove <span class="keyword">set</span> <span class="number">3</span> <span class="keyword">is</span> a subset <span class="keyword">of</span> <span class="keyword">set</span> <span class="number">1</span>.</span><br></pre></td></tr></table></figure><p></p><blockquote><p>题解:对于这样一个题目,很容易就可以把子集关系转换成有向图的一条有向边,那么题目就转换为求最少增加多少条有向边使得该图成为一个强连通图.对于一个图来说,他内部可能存在许多强连通分量,对于这些强连通分量之间,他们是不需要再进行建边了,我们可以将一个个强连通分量缩成一个个点,那么我们只需要让这些缩点后的图(有向无环图)是一个强连通图即可.<br>这里用到一点贪心的思想:对于一个有向无环图,若有zin个入度为0的点,我们最多只需要增加zin条有向边,若是有zout个出度为0的点,我只需要增加zout条有向边,那么对于一个有向无环图要成为一个强连通图,我们最少只需要增加max(zin,zout)条有向边即可.<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20005</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tarjan</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n;                       <span class="comment">//点的个数</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;e[maxn];          <span class="comment">//邻接表存图</span></span><br><span class="line"><span class="keyword">int</span> DFN[maxn], LOW[maxn];</span><br><span class="line"><span class="keyword">int</span> index;                   <span class="comment">//编辑计数器</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> stk[maxn];               <span class="comment">//栈</span></span><br><span class="line"><span class="keyword">bool</span> ins[maxn];              <span class="comment">//记录点是否在栈中</span></span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;ans;    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;           <span class="comment">//初始化</span></span><br><span class="line">n = N;</span><br><span class="line"> </span><br><span class="line">ans.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">e[i].clear();</span><br><span class="line">top = <span class="number">0</span>;</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">memset</span>(DFN, <span class="number">-1</span>, <span class="keyword">sizeof</span>(DFN));</span><br><span class="line"><span class="built_in">memset</span>(ins, <span class="number">0</span>, <span class="keyword">sizeof</span>(ins));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;<span class="comment">//添加边</span></span><br><span class="line">e[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;            <span class="comment">//从u点开始搜索</span></span><br><span class="line">DFN[u] = LOW[u] = ++index;</span><br><span class="line">stk[top++] = u;          <span class="comment">//为了记录这个连通分量中的节点</span></span><br><span class="line">ins[u] = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; e[u].size(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> v = e[u][i];</span><br><span class="line"><span class="keyword">if</span> (DFN[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">dfs(v);</span><br><span class="line">LOW[u] = min(LOW[u], LOW[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ins[v])</span><br><span class="line">LOW[u] = min(LOW[u], DFN[v]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (DFN[u] == LOW[u]) &#123;  <span class="comment">//当DFN==LOW时说明stk中点可以形成一个强连通分量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">int</span> v = stk[top - <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (u != v) &#123;</span><br><span class="line">q.push_back(v);</span><br><span class="line">ins[v] = <span class="literal">false</span>;</span><br><span class="line">top--;</span><br><span class="line">v = stk[top - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">q.push_back(u);</span><br><span class="line">ins[u] = <span class="literal">false</span>;</span><br><span class="line">top--;</span><br><span class="line"> </span><br><span class="line">ans.push_back(q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;                 <span class="comment">//运行该函数后产生答案</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (DFN[i] == <span class="number">-1</span>) dfs(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="keyword">int</span> num[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn];               <span class="comment">//存强连通缩点后的得到的新图</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))&#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line">T.init(n);                 <span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">while</span>(m--)&#123;                <span class="comment">//建有向图</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">T.add_edge(v, u);      <span class="comment">//这里是u-&gt;v</span></span><br><span class="line">&#125;</span><br><span class="line">T.solve();                 <span class="comment">//获得该有向图的所有强连通分量</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++) <span class="comment">//清空新图</span></span><br><span class="line">   e[i].clear();</span><br><span class="line">                           <span class="comment">//缩点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; T.ans.size(); i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt; T.ans[i].size(); j++)</span><br><span class="line">        num[T.ans[i][j]] = i + <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=n;i++)      //输出缩点情况</span></span><br><span class="line"><span class="comment">    printf("%d:%d\n",i,num[i]);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">                        </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++) <span class="comment">//建新有向无环图</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; T.e[i].size(); j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (num[i] == num[T.e[i][j]]) <span class="keyword">continue</span>;</span><br><span class="line">e[num[i]].push_back(num[T.e[i][j]]);</span><br><span class="line"><span class="comment">//printf("%d-&gt;%d\n",num[i],num[T.e[i][j]]);输出图</span></span><br><span class="line">&#125;</span><br><span class="line">n = T.ans.size();          <span class="comment">//新图的点数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//以上为Tarjan算法的强连通缩点操作,得到新的有向无环图为e[],点数为n</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">int</span> zin = <span class="number">0</span>, zout = <span class="number">0</span>;     <span class="comment">//分别为入度为0的点数和出度为0的点数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (e[i].size() == <span class="number">0</span>)zout++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; e[i].size(); j++)</span><br><span class="line">vis[e[i][j]] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">   <span class="keyword">if</span> (!vis[i])zin++;</span><br><span class="line"><span class="keyword">if</span> (n != <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(zin, zout));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0\n"</span>);        <span class="comment">//若是只有一点点需要特判结果为0,否则输出1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day21&quot;&gt;&lt;a href=&quot;#Day21&quot; class=&quot;headerlink&quot; title=&quot;Day21&quot;&gt;&lt;/a&gt;Day21&lt;/h1&gt;&lt;p&gt;今天讲的是强连通量&lt;br&gt;&lt;code&gt;中间插入了一场比赛&lt;/code&gt;&lt;br&gt;&lt;code&gt;补题&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="算法集训" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E9%9B%86%E8%AE%AD/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Day20</title>
    <link href="http://yoursite.com/2019/08/08/Day20/"/>
    <id>http://yoursite.com/2019/08/08/Day20/</id>
    <published>2019-08-07T16:00:00.000Z</published>
    <updated>2019-08-08T15:26:54.758Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day20"><a href="#Day20" class="headerlink" title="Day20"></a>Day20</h1><p>今天讲的是LCA(最近公共祖先)<br><code>补题</code><br><a id="more"></a></p><blockquote><p>提醒自己一下，因为今天有事没有写完这些题目，所以大部分的题解和代码都是在网上找到的，希望以后自己可以把这部分题补上</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近公共祖先简称LCA（Lowest Common Ancestor）。两个节点的最近公共祖先，就是这两个点的公共祖先里面，离根最远的那个。<br>为了方便，我们记某点集S = v1, v2, …, vn 的最近公共祖先为LCA (v1, v2, …, vn) 或LCA (S)</p><h2 id="解决算法"><a href="#解决算法" class="headerlink" title="解决算法"></a>解决算法</h2><p>朴素算法<br>倍增算法<br>Tarjan 算法<br>转换成 RMQ 问题求解<br>树链剖分<br>动态树</p><blockquote><p>虽然算法多，但是我现在只学了前三个算法</p></blockquote><p><a href="https://blog.csdn.net/JarjingX/article/details/8180560" target="_blank" rel="noopener">生动的解释</a></p><p><a href="https://blog.csdn.net/qq_28954601/article/details/76856187" target="_blank" rel="noopener">详情链接</a></p><h2 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h2><p>我们首先预处理出来所有节点所在的深度，对于需要查询的两点<br>u, v，我们假设深度较深的点为 u，将 u 上移至与 v 相同深度的<br>位置，然后同时上移节点 u, v，直至两节点相遇，相遇的点即为<br>LCA(u, v)<br>最坏复杂度 O (N)</p><h2 id="倍增算法"><a href="#倍增算法" class="headerlink" title="倍增算法"></a>倍增算法</h2><p>倍增算法求 LCA 就是利用倍增法对朴素算法的一个优化，预处<br>理时间复杂度 O(nlogn)<br>可以将查询的时间复杂度降到 O (logN)<br>总的时间复杂度：O(nlogn + qlogn)</p><h2 id="加一个-假-模板"><a href="#加一个-假-模板" class="headerlink" title="加一个(假)模板"></a>加一个(假)模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)<span class="comment">//O2优化 </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> bit[N];</span><br><span class="line"><span class="keyword">int</span> depth[N],f[N][<span class="number">30</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Scan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="comment">//  输入外挂  </span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, flag = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">char</span> ch;  </span><br><span class="line">    <span class="keyword">if</span> ((ch = getchar()) == <span class="string">'-'</span>) </span><br><span class="line">    &#123;   </span><br><span class="line">        flag = <span class="number">1</span>;  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        res = ch - <span class="string">'0'</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ((ch = getchar()) &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>)  </span><br><span class="line">    &#123;</span><br><span class="line">        res = res * <span class="number">10</span> + (ch - <span class="string">'0'</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag ? -res : res;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">bit[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">29</span>;i++) bit[i]=(bit[i<span class="number">-1</span>]*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> par)</span></span>&#123;</span><br><span class="line">depth[u]=depth[par]+<span class="number">1</span>;</span><br><span class="line">f[u][<span class="number">0</span>]=par;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">29</span>;i++) f[u][i]=f[f[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)G[u].size();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> v=G[u][i];</span><br><span class="line"><span class="keyword">if</span>(v==par) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[a]&lt;depth[b]) swap(a,b);</span><br><span class="line"><span class="keyword">int</span> dif=depth[a]-depth[b];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">29</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(dif&gt;=bit[i])&#123;</span><br><span class="line">a=f[a][i];</span><br><span class="line">dif-=bit[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">29</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[a]&gt;=bit[i]&amp;&amp;f[a][i]!=f[b][i])&#123;</span><br><span class="line">a=f[a][i];b=f[b][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> n,m,s;</span><br><span class="line">n=Scan();m=Scan();s=Scan();</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">u=Scan();v=Scan();</span><br><span class="line">G[u].push_back(v);</span><br><span class="line">G[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(s,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">u=Scan();v=Scan();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lca(u,v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tarjan算法"><a href="#Tarjan算法" class="headerlink" title="Tarjan算法"></a>Tarjan算法</h2><p>Tarjan 算法是一种常见的用于解决 LCA 问题的离线算法，它结<br>合了深度优先搜索与并查集，预处理时间复杂度 O(nlogn), 每次<br>查询时间复杂度 O(1)，总时间复杂度是 O(nlogn + q)。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>若两个结点 u, v 分别分布于某节点 T 的左右子树，那么此节点 t<br>即为 u 和 v 的最近公共祖先。<br>更进一步，考虑到一个节点自己就是 LCA 的情况，得知：<br>若某结点 T 是两结点 u, v 的祖先之一，且这两结点并不分布于<br>该结点 t 同一棵子树中，而是分别在结点 T 的左子树、右子树<br>中，那么该结点 T 即为两结点 u, v 的最近公共祖先</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>任选一个节点为根节点，从根节点开始<br>遍历该点 u 的所有子节点 v 并标记 v 已经被访问过<br>若 v 还有子节点，返回第二步，否则下一步<br>合并 v 到 u 所在集合<br>寻找与当前点 u 有询问关系的点 e<br>若 e 已经被访问过，则可以确定 u, e 的最近公共祖先为 e<br>被合并到的父亲节点</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并查集部分 </span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">find</span>(<span class="keyword">int</span> x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x != f[x])</span><br><span class="line">&#123;</span><br><span class="line">f[x] = <span class="keyword">find</span>(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="keyword">join</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> dx = f[x], dy = f[y];</span><br><span class="line"><span class="keyword">if</span>(dx != dy)</span><br><span class="line">f[dy] = f[dx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储查询关系</span></span><br><span class="line">struct Query</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q, <span class="keyword">next</span>;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line">&#125;Q[maxx * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> h[maxx];</span><br><span class="line"><span class="keyword">int</span> tt;</span><br><span class="line"><span class="keyword">void</span> add_query(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line">Q[tt].q = v;</span><br><span class="line">Q[tt].<span class="keyword">next</span> = h[u];</span><br><span class="line">Q[tt].index = index;</span><br><span class="line">h[u] = tt ++;</span><br><span class="line">Q[tt].q = u;</span><br><span class="line">Q[tt].<span class="keyword">next</span> = h[v];</span><br><span class="line">Q[tt].index = index;</span><br><span class="line">h[v] = tt ++;</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//核心代码</span></span><br><span class="line"><span class="keyword">void</span> lca(<span class="keyword">int</span> u)</span><br><span class="line">&#123;</span><br><span class="line">fa[u] = u; vis[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i != -<span class="number">1</span>; i = edge[i].<span class="keyword">next</span>)<span class="comment">//和顶点u相关的顶点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">lca(v);</span><br><span class="line"><span class="keyword">join</span>(u, v);<span class="comment">//将u的左右孩子的祖先设为u</span></span><br><span class="line">fa[<span class="keyword">find</span>(u)] = u; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//看输入的查询里面有没有和u节点相关的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[u]; i != -<span class="number">1</span>; i = Q[i].<span class="keyword">next</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = Q[i].q;</span><br><span class="line"><span class="keyword">if</span>(vis[v])</span><br><span class="line">ans[Q[i].index] = fa[<span class="keyword">find</span>(v)];</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://vjudge.net/contest/318221#overview" target="_blank" rel="noopener">OJ链接</a></p><h2 id="Nearest-Common-Ancestors"><a href="#Nearest-Common-Ancestors" class="headerlink" title="Nearest Common Ancestors"></a>Nearest Common Ancestors</h2><p>Description:<br>A rooted tree is a well-known data structure in computer science and engineering. An example is shown below:<br><img src="https://i.loli.net/2019/08/08/qKiOSD1WVdbngTj.gif" alt="a4cf40017a91cfbd4f81b13b267ec9ee.png"><br>In the figure, each node is labeled with an integer from {1, 2,…,16}. Node 8 is the root of the tree. Node x is an ancestor of node y if node x is in the path between the root and node y. For example, node 4 is an ancestor of node 16. Node 10 is also an ancestor of node 16. As a matter of fact, nodes 8, 4, 10, and 16 are the ancestors of node 16. Remember that a node is an ancestor of itself. Nodes 8, 4, 6, and 7 are the ancestors of node 7. A node x is called a common ancestor of two different nodes y and z if node x is an ancestor of node y and an ancestor of node z. Thus, nodes 8 and 4 are the common ancestors of nodes 16 and 7. A node x is called the nearest common ancestor of nodes y and z if x is a common ancestor of y and z and nearest to y and z among their common ancestors. Hence, the nearest common ancestor of nodes 16 and 7 is node 4. Node 4 is nearer to nodes 16 and 7 than node 8 is.</p><p>For other examples, the nearest common ancestor of nodes 2 and 3 is node 10, the nearest common ancestor of nodes 6 and 13 is node 8, and the nearest common ancestor of nodes 4 and 12 is node 4. In the last example, if y is an ancestor of z, then the nearest common ancestor of y and z is y.</p><p>Write a program that finds the nearest common ancestor of two distinct nodes in a tree.</p><p><code>Input</code><br>The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case starts with a line containing an integer N , the number of nodes in a tree, 2&lt;=N&lt;=10,000. The nodes are labeled with integers 1, 2,…, N. Each of the next N -1 lines contains a pair of integers that represent an edge –the first integer is the parent node of the second integer. Note that a tree with N nodes has exactly N - 1 edges. The last line of each test case contains two distinct integers whose nearest common ancestor is to be computed.<br><code>Output</code><br>Print exactly one line for each test case. The line should contain the integer that is the nearest common ancestor.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">1</span> <span class="number">14</span></span><br><span class="line"><span class="number">8</span> <span class="number">5</span></span><br><span class="line"><span class="number">10</span> <span class="number">16</span></span><br><span class="line"><span class="number">5</span> <span class="number">9</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="number">8</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">13</span></span><br><span class="line"><span class="number">6</span> <span class="number">15</span></span><br><span class="line"><span class="number">10</span> <span class="number">11</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">16</span> <span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">1</span></span><br><span class="line"><span class="number">16</span> <span class="number">12</span></span><br><span class="line"><span class="number">16</span> <span class="number">7</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line">ll bits[maxx];<span class="comment">//存节点 </span></span><br><span class="line"><span class="keyword">int</span> f[maxx][<span class="number">30</span>];<span class="comment">//存子节点</span></span><br><span class="line"><span class="keyword">int</span> depth[maxx];<span class="comment">//存储深度</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxx];</span><br><span class="line"><span class="keyword">int</span> in[maxx];</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">29</span>; i ++)</span><br><span class="line">bits[i] = bits[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">depth[u] = depth[par] + <span class="number">1</span>;</span><br><span class="line">f[u][<span class="number">0</span>] = par;</span><br><span class="line"><span class="comment">//倍增 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">29</span>; i ++)</span><br><span class="line">f[u][i] = f[f[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[u].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[u][i] == par) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v[u][i], u);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//lca</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[a] &lt; depth[b])</span><br><span class="line">swap(a, b);</span><br><span class="line"><span class="keyword">int</span> dis = depth[a] - depth[b];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis &gt;= bits[i])</span><br><span class="line">&#123;</span><br><span class="line">a = f[a][i];</span><br><span class="line">dis -= bits[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == b)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[a] &gt;= bits[i] &amp;&amp; f[a][i] != f[b][i])</span><br><span class="line">&#123;</span><br><span class="line">a = f[a][i];</span><br><span class="line">b = f[b][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[a][<span class="number">0</span>];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> t, n, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">v[i].clear();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x, &amp;y);</span><br><span class="line">v[x].push_back(y);</span><br><span class="line">v[y].push_back(x);</span><br><span class="line">in[y] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x, &amp;y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!in[i])</span><br><span class="line">&#123;</span><br><span class="line">root = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(root, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lca(x, y));</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Distance-Queries"><a href="#Distance-Queries" class="headerlink" title="Distance Queries"></a>Distance Queries</h2><p>Description:<br>Farmer John’s cows refused to run in his marathon since he chose a path much too long for their leisurely lifestyle. He therefore wants to find a path of a more reasonable length. The input to this problem consists of the same input as in “Navigation Nightmare”,followed by a line containing a single integer K, followed by K “distance queries”. Each distance query is a line of input containing two integers, giving the numbers of two farms between which FJ is interested in computing distance (measured in the length of the roads along the path between the two farms). Please answer FJ’s distance queries as quickly as possible!<br><code>Input</code></p><ul><li><p>Lines 1..1+M: Same format as “Navigation Nightmare”</p></li><li><p>Line 2+M: A single integer, K. 1 &lt;= K &lt;= 10,000</p></li><li><p>Lines 3+M..2+M+K: Each line corresponds to a distance query and contains the indices of two farms.<br><code>Output</code></p></li><li>Lines 1..K: For each distance query, output on a single line an integer giving the appropriate distance.<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">7</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">13</span> E</span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">9</span> E</span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">7</span> S</span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> N</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">20</span> W</span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">2</span> S</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line">Hint</span><br><span class="line">Farms <span class="number">2</span> and <span class="number">6</span> are <span class="number">20</span>+<span class="number">3</span>+<span class="number">13</span>=<span class="number">36</span> apart.</span><br></pre></td></tr></table></figure></li></ul><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line">ll bits[maxx];<span class="comment">//存节点 </span></span><br><span class="line"><span class="keyword">int</span> f[maxx][<span class="number">30</span>];<span class="comment">//存子节点</span></span><br><span class="line"><span class="keyword">int</span> depth[maxx];<span class="comment">//存储深度</span></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; v[maxx];</span><br><span class="line"><span class="keyword">int</span> dis[maxx];</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">29</span>; i ++)</span><br><span class="line">bits[i] = bits[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">depth[u] = depth[par] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">f[u][<span class="number">0</span>] = par;</span><br><span class="line"><span class="comment">//倍增 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">29</span>; i ++)</span><br><span class="line">f[u][i] = f[f[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[u].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[u][i].first == par) <span class="keyword">continue</span>;</span><br><span class="line">dis[v[u][i].first] = dis[u] + v[u][i].second;</span><br><span class="line">dfs(v[u][i].first, u);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//lca</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[a] &lt; depth[b])</span><br><span class="line">swap(a, b);</span><br><span class="line"><span class="keyword">int</span> dis = depth[a] - depth[b];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis &gt;= bits[i])</span><br><span class="line">&#123;</span><br><span class="line">a = f[a][i];</span><br><span class="line">dis -= bits[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == b)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[a] &gt;= bits[i] &amp;&amp; f[a][i] != f[b][i])</span><br><span class="line">&#123;</span><br><span class="line">a = f[a][i];</span><br><span class="line">b = f[b][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[a][<span class="number">0</span>];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> t, n, m, k, x, y;</span><br><span class="line"><span class="keyword">char</span> z[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">v[i].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %s"</span>,&amp;x, &amp;y, &amp;k, &amp;z);</span><br><span class="line">v[x].push_back(make_pair(y, k));</span><br><span class="line">v[y].push_back(make_pair(x, k));</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x, &amp;y);</span><br><span class="line"><span class="keyword">int</span> ans = lca(x, y), cnt = <span class="number">0</span>;</span><br><span class="line">cnt = dis[x] + dis[y] - <span class="number">2</span> * dis[ans];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Closest-Common-Ancestors"><a href="#Closest-Common-Ancestors" class="headerlink" title="Closest Common Ancestors"></a>Closest Common Ancestors</h2><p>Description:<br>Write a program that takes as input a rooted tree and a list of pairs of vertices. For each pair (u,v) the program determines the closest common ancestor of u and v in the tree. The closest common ancestor of two nodes u and v is the node w that is an ancestor of both u and v and has the greatest depth in the tree. A node can be its own ancestor (for example in Figure 1 the ancestors of node 2 are 2 and 5)</p><p>The data set starts with the tree description, in the form:</p><p>nr_of_vertices<br>vertex:(nr_of_successors) successor1 successor2 … successorn<br>……</p><p>where vertices are represented as integers from 1 to n. The tree description is followed by a list of pairs of vertices, in the form:</p><p>nr_of_pairs<br>(u v) (x y) …</p><p>The input contents several data sets (at least one).</p><p>Note that white-spaces (tabs, spaces and line breaks) can be used freely in the input.</p><p>For each common ancestor the program prints the ancestor and the number of pair for which it is an ancestor. The results are printed on the standard output on separate lines, in to the ascending order of the vertices, in the format: ancestor:times</p><p>For example, for the following tree:<br><img src="https://i.loli.net/2019/08/08/apLKrRtk1wMfDj2.gif" alt="d429f0395ea8a6aaa0d514a98146ee82.png"><br>the program input and output is:<br></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">Input</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">5</span></span><br><span class="line"><span class="selector-tag">5</span><span class="selector-pseudo">:(3)</span> <span class="selector-tag">1</span> <span class="selector-tag">4</span> <span class="selector-tag">2</span></span><br><span class="line"><span class="selector-tag">1</span><span class="selector-pseudo">:(0)</span></span><br><span class="line"><span class="selector-tag">4</span><span class="selector-pseudo">:(0)</span></span><br><span class="line"><span class="selector-tag">2</span><span class="selector-pseudo">:(1)</span> <span class="selector-tag">3</span></span><br><span class="line"><span class="selector-tag">3</span><span class="selector-pseudo">:(0)</span></span><br><span class="line"><span class="selector-tag">6</span></span><br><span class="line">(<span class="number">1</span>,<span class="number">5</span>) (<span class="number">1</span>,<span class="number">4</span>) (<span class="number">4</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">3</span>) (<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Output</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">2</span><span class="selector-pseudo">:1</span></span><br><span class="line"><span class="selector-tag">5</span><span class="selector-pseudo">:5</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> depth[N];</span><br><span class="line"><span class="keyword">int</span> sum[N];</span><br><span class="line"><span class="keyword">int</span> in[N];</span><br><span class="line">ll bits[<span class="number">30</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">29</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line">bits[i] = bits[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预处理 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">depth[u] = depth[par] + <span class="number">1</span>;</span><br><span class="line">f[u][<span class="number">0</span>] = par;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">29</span>; i ++)</span><br><span class="line">f[u][i] = f[f[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[u].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> V = v[u][i];</span><br><span class="line"><span class="keyword">if</span>(V == par)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">dfs(V, u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[a] &lt; depth[b])</span><br><span class="line">swap(a, b);</span><br><span class="line"><span class="keyword">int</span> dis = depth[a] - depth[b];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis &gt;= bits[i])</span><br><span class="line">&#123;</span><br><span class="line">a = f[a][i];</span><br><span class="line">dis -= bits[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[a] &gt;= bits[i] &amp;&amp; f[a][i] != f[b][i])</span><br><span class="line">&#123;</span><br><span class="line">a = f[a][i];</span><br><span class="line">b = f[b][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[a][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> a, b, n, m;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">v[i].clear();</span><br><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d:(%d)"</span>,&amp;a,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</span><br><span class="line">v[a].push_back(b);</span><br><span class="line">v[b].push_back(a);</span><br><span class="line">in[b] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!in[i])</span><br><span class="line">&#123;</span><br><span class="line">ans = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">dfs(ans, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="keyword">sizeof</span> sum);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;c) &amp;&amp; c != <span class="string">'('</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>,&amp;a, &amp;b);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;c) &amp;&amp; c != <span class="string">')'</span>);</span><br><span class="line">sum[lca(a, b)] ++;</span><br><span class="line">getchar();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sum[i])</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d:%d\n"</span>, i, sum[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="How-far-away-？"><a href="#How-far-away-？" class="headerlink" title="How far away ？"></a>How far away ？</h2><p>Description:<br>There are n houses in the village and some bidirectional roads connecting them. Every day peole always like to ask like this “How far is it if I want to go from house A to house B”? Usually it hard to answer. But luckily int this village the answer is always unique, since the roads are built in the way that there is a unique simple path(“simple” means you can’t visit a place twice) between every two houses. Yout task is to answer all these curious people.<br><code>Input</code><br>First line is a single integer T(T&lt;=10), indicating the number of test cases.<br>For each test case,in the first line there are two numbers n(2&lt;=n&lt;=40000) and m (1&lt;=m&lt;=200),the number of houses and the number of queries. The following n-1 lines each consisting three numbers i,j,k, separated bu a single space, meaning that there is a road connecting house i and house j,with length k(0&lt;k&lt;=40000).The houses are labeled from 1 to n.<br>Next m lines each has distinct integers i and j, you areato answer the distance between house i and house j.<br><code>Output</code><br>For each test case,output m lines. Each line represents the answer of the query. Output a bland line after each test case.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">10</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">15</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">100</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line">ll bits[maxx];<span class="comment">//存节点 </span></span><br><span class="line"><span class="keyword">int</span> f[maxx][<span class="number">30</span>];<span class="comment">//存子节点</span></span><br><span class="line"><span class="keyword">int</span> depth[maxx];<span class="comment">//存储深度</span></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; v[maxx];</span><br><span class="line"><span class="keyword">int</span> in[maxx];</span><br><span class="line"><span class="keyword">int</span> dis[maxx];</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bits[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">29</span>; i ++)</span><br><span class="line">bits[i] = bits[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//预处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> par)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">depth[u] = depth[par] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">f[u][<span class="number">0</span>] = par;</span><br><span class="line"><span class="comment">//倍增 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">29</span>; i ++)</span><br><span class="line">f[u][i] = f[f[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[u].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v[u][i].first == par) <span class="keyword">continue</span>;</span><br><span class="line">dis[v[u][i].first] = dis[u] + v[u][i].second;</span><br><span class="line">dfs(v[u][i].first, u);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//lca</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[a] &lt; depth[b])</span><br><span class="line">swap(a, b);</span><br><span class="line"><span class="keyword">int</span> dis = depth[a] - depth[b];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis &gt;= bits[i])</span><br><span class="line">&#123;</span><br><span class="line">a = f[a][i];</span><br><span class="line">dis -= bits[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a == b)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(depth[a] &gt;= bits[i] &amp;&amp; f[a][i] != f[b][i])</span><br><span class="line">&#123;</span><br><span class="line">a = f[a][i];</span><br><span class="line">b = f[b][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[a][<span class="number">0</span>];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> t, n, m, k, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">v[i].clear();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x, &amp;y, &amp;k);</span><br><span class="line">v[x].push_back(make_pair(y, k));</span><br><span class="line">v[y].push_back(make_pair(x, k));</span><br><span class="line">in[y] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!in[i])</span><br><span class="line">&#123;</span><br><span class="line">r = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x, &amp;y);</span><br><span class="line">dfs(r, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> ans = lca(x, y), cnt = <span class="number">0</span>;</span><br><span class="line">cnt = dis[x] + dis[y] - <span class="number">2</span> * dis[ans];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t != <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day20&quot;&gt;&lt;a href=&quot;#Day20&quot; class=&quot;headerlink&quot; title=&quot;Day20&quot;&gt;&lt;/a&gt;Day20&lt;/h1&gt;&lt;p&gt;今天讲的是LCA(最近公共祖先)&lt;br&gt;&lt;code&gt;补题&lt;/code&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="算法集训" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E9%9B%86%E8%AE%AD/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Day19</title>
    <link href="http://yoursite.com/2019/08/07/Day19/"/>
    <id>http://yoursite.com/2019/08/07/Day19/</id>
    <published>2019-08-06T16:00:00.000Z</published>
    <updated>2019-08-07T14:30:57.716Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --><h1 id="Day19"><a href="#Day19" class="headerlink" title="Day19"></a>Day19</h1><p>今天讲的是拓扑排序算法<br>努力学习！！<br><a href="https://vjudge.net/contest/317983#overview" target="_blank" rel="noopener">OJ链接</a><br><a id="more"></a></p><h2 id="加一个-假-模板"><a href="#加一个-假-模板" class="headerlink" title="加一个(假)模板"></a>加一个(假)模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> in[<span class="number">10100</span>];<span class="comment">// 存入度</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[<span class="number">10100</span>];<span class="comment">// 存关系 构建图</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)<span class="comment">// 根据题目要求可以改动</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span>(in));<span class="comment">// 清空入度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) v[i].clear() ;<span class="comment">// 清空vector</span></span><br><span class="line"><span class="keyword">while</span>(m--)<span class="comment">// m组数据</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;y&gt;&gt;x;</span><br><span class="line">in[y]++;<span class="comment">// y的关系大于x，x指向y y的入度+1；</span></span><br><span class="line">v[x].push_back(y);<span class="comment">// 就 y 放在 x后面</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;<span class="comment">// 定义一个队列 最为节点的删除</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!in[i]) &#123; <span class="comment">// 入度为零的节点放入 队列</span></span><br><span class="line">q.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty() )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx=q.front() ; <span class="comment">// 如果队列中一次存了大于 2 个节点</span></span><br><span class="line">q.pop() ; <span class="comment">//说明该图有 2-&gt;3 &amp;&amp; 2-&gt;4 这种情况 有点个点之间没有关系</span></span><br><span class="line">n--; <span class="comment">// 总节点数 -1；</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v[xx].size() ;i++) <span class="comment">// 遍历这个节点后面的 点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> yy=v[xx][i];</span><br><span class="line">in[yy]--; <span class="comment">// 删除 x 后 yy 的入度就 -1；</span></span><br><span class="line"><span class="keyword">if</span>(!in[yy]) &#123; <span class="comment">// 如果此时 yy 入度为零放入队列 遍历他的下一个节点</span></span><br><span class="line">q.push(yy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n) <span class="built_in">cout</span>&lt;&lt;<span class="string">"该图有环"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 如果总结点数没减为零 说明有环的存在</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Genealogical-tree"><a href="#Genealogical-tree" class="headerlink" title="Genealogical tree"></a>Genealogical tree</h1><p>Description:<br>The system of Martians’ blood relations is confusing enough. Actually, Martians bud when they want and where they want. They gather together in different groups, so that a Martian can have one parent as well as ten. Nobody will be surprised by a hundred of children. Martians have got used to this and their style of life seems to them natural.<br>And in the Planetary Council the confusing genealogical system leads to some embarrassment. There meet the worthiest of Martians, and therefore in order to offend nobody in all of the discussions it is used first to give the floor to the old Martians, than to the younger ones and only than to the most young childless assessors. However, the maintenance of this order really is not a trivial task. Not always Martian knows all of his parents (and there’s nothing to tell about his grandparents!). But if by a mistake first speak a grandson and only than his young appearing great-grandfather, this is a real scandal.<br>Your task is to write a program, which would define once and for all, an order that would guarantee that every member of the Council takes the floor earlier than each of his descendants.<br><code>Input</code><br>The first line of the standard input contains an only number N, 1 &lt;= N &lt;= 100 — a number of members of the Martian Planetary Council. According to the centuries-old tradition members of the Council are enumerated with the natural numbers from 1 up to N. Further, there are exactly N lines, moreover, the I-th line contains a list of I-th member’s children. The list of children is a sequence of serial numbers of children in a arbitrary order separated by spaces. The list of children may be empty. The list (even if it is empty) ends with 0.<br><code>Output</code><br>The standard output should contain in its only line a sequence of speakers’ numbers, separated by spaces. If several sequences satisfy the conditions of the problem, you are to write to the standard output any of them. At least one such sequence always exists.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> in[maxx];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//清空图 </span></span><br><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">v[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存图，找度数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">v[i].push_back(x);</span><br><span class="line">in[x] ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="comment">//找到0入度，加入队列 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i] == <span class="number">0</span>)</span><br><span class="line">q.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; xx;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; xx;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[xx].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">in[v[xx][i]] --;</span><br><span class="line"><span class="keyword">if</span>(in[v[xx][i]] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.push(v[xx][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Window-Pains"><a href="#Window-Pains" class="headerlink" title="Window Pains"></a>Window Pains</h1><p>Description:<br>Boudreaux likes to multitask, especially when it comes to using his computer. Never satisfied with just running one application at a time, he usually runs nine applications, each in its own window. Due to limited screen real estate, he overlaps these windows and brings whatever window he currently needs to work with to the foreground. If his screen were a 4 x 4 grid of squares, each of Boudreaux’s windows would be represented by the following 2 x 2 windows:</p><p>When Boudreaux brings a window to the foreground, all of its squares come to the top, overlapping any squares it shares with other windows. For example, if window 1 and then window 2 were brought to the foreground, the resulting representation would be:</p><p>If window 4 were then brought to the foreground:</p><p>. . . and so on . . .<br>Unfortunately, Boudreaux’s computer is very unreliable and crashes often. He could easily tell if a crash occurred by looking at the windows and seeing a graphical representation that should not occur if windows were being brought to the foreground correctly. And this is where you come in . . .</p><p><code>Input</code><br>Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.</p><p>A single data set has 3 components:<br>Start line - A single line:<br>START</p><p>Screen Shot - Four lines that represent the current graphical representation of the windows on Boudreaux’s screen. Each position in this 4 x 4 matrix will represent the current piece of window showing in each square. To make input easier, the list of numbers on each line will be delimited by a single space.<br>End line - A single line:<br>END</p><p>After the last data set, there will be a single line:<br>ENDOFINPUT</p><p>Note that each piece of visible window will appear only in screen areas where the window could appear when brought to the front. For instance, a 1 can only appear in the top left quadrant.<br><code>Output</code><br>For each data set, there will be exactly one line of output. If there exists a sequence of bringing windows to the foreground that would result in the graphical representation of the windows on Boudreaux’s screen, the output will be a single line with the statement:</p><p>THESE WINDOWS ARE CLEAN</p><p>Otherwise, the output will be a single line with the statement:<br>THESE WINDOWS ARE BROKEN</p><p>题意：<br>给你一个4<em>4的棋盘窗口,现在电脑上有9个应用,每个应用占用固定的2</em>2正方形网格位置.你通过不同的顺序操作9个应用可以使得4<em>4的窗口当前显示的内容(数字代表)不同,现在给你一个4</em>4棋盘窗口的内容,问你这个内容是否合法.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">START</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">9</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">9</span></span><br><span class="line">END</span><br><span class="line">START</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">7</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span></span><br><span class="line"><span class="number">7</span> <span class="number">7</span> <span class="number">9</span> <span class="number">9</span></span><br><span class="line">END</span><br><span class="line">ENDOFINPUT</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line">THESE WINDOWS ARE CLEAN</span><br><span class="line">THESE WINDOWS ARE BROKEN</span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; value[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dr[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;<span class="comment">//原地,下,右,右下</span></span><br><span class="line"><span class="keyword">int</span> dc[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn]; <span class="comment">//图</span></span><br><span class="line"><span class="keyword">int</span> in[maxn];      <span class="comment">//入度</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(in[i]==<span class="number">0</span>) Q.push(i);</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//记录我们删除的0入度点</span></span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=Q.front(); Q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;<span class="number">9</span>;v++)<span class="keyword">if</span>(G[u][v])</span><br><span class="line">        &#123;</span><br><span class="line">            G[u][v]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(--in[v]==<span class="number">0</span>) Q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">        sum++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum==<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)                <span class="comment">//处理0-8每个应用所在的方格vector</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> r=i/<span class="number">3</span>, c=i%<span class="number">3</span>;               <span class="comment">//i应用左上角的格子所在的(r,c)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> dir=<span class="number">0</span>;dir&lt;<span class="number">4</span>;dir++)      <span class="comment">//i应用所在的其他3个点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> nr=r+dr[dir], nc=c+dc[dir];</span><br><span class="line">            value[nr][nc].push_back(i); <span class="comment">//将i压入对应方格的vector中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,str)==<span class="number">1</span>&amp;&amp;str[<span class="number">0</span>]!=<span class="string">'E'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(G,<span class="number">0</span>,<span class="keyword">sizeof</span>(G));</span><br><span class="line">        <span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span>(in));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v);</span><br><span class="line">            v--;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;value[i][j].size();k++)</span><br><span class="line">            <span class="keyword">if</span>((value[i][j])[k]!=v)<span class="comment">//构造有向边</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x=(value[i][j])[k];</span><br><span class="line">                <span class="keyword">if</span>(G[x][v]==<span class="number">0</span>)<span class="comment">//一定要做这个判断,因为会重复添加有向边</span></span><br><span class="line">                &#123;</span><br><span class="line">                    in[v]++;</span><br><span class="line">                    G[x][v]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//printf("当前格子为:(%d,%d),当前边为:%d v=%d, %d点的入度为%d\n",i,j,x,v,v,in[v]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(topo()) <span class="built_in">printf</span>(<span class="string">"THESE WINDOWS ARE CLEAN\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"THESE WINDOWS ARE BROKEN\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="确定比赛名次（拓扑排序）"><a href="#确定比赛名次（拓扑排序）" class="headerlink" title="确定比赛名次（拓扑排序）"></a>确定比赛名次（拓扑排序）</h1><p>Description:<br>有N个比赛队（1&lt;=N&lt;=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。<br><code>Input</code><br>输入有若干组，每组中的第一行为二个数N（1&lt;=N&lt;=500），M；其中N表示队伍的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即P1队赢了P2队。<br><code>Output</code><br>给出一个符合要求的排名。输出时队伍号之间有空格，最后一名后面没有空格。</p><p>其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> in[maxx];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//清空图 </span></span><br><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">v[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//存图，找度数 </span></span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x, &amp;y);</span><br><span class="line">v[x].push_back(y);</span><br><span class="line">in[y] ++;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"><span class="comment">//找到0入度，加入队列 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i] == <span class="number">0</span>)</span><br><span class="line">q.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; xx;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; xx;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[xx].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">in[v[xx][i]] --;</span><br><span class="line"><span class="keyword">if</span>(in[v[xx][i]] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.push(v[xx][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="产生冠军"><a href="#产生冠军" class="headerlink" title="产生冠军"></a>产生冠军</h1><p>Description:<br>有一群人，打乒乓球比赛，两两捉对撕杀，每两个人之间最多打一场比赛。<br>球赛的规则如下：<br>如果A打败了B，B又打败了C，而A与C之间没有进行过比赛，那么就认定，A一定能打败C。<br>如果A打败了B，B又打败了C，而且，C又打败了A，那么A、B、C三者都不可能成为冠军。<br>根据这个规则，无需循环较量，或许就能确定冠军。你的任务就是面对一群比赛选手，在经过了若干场撕杀之后，确定是否已经实际上产生了冠军。<br><code>Input</code><br>输入含有一些选手群，每群选手都以一个整数n(n&lt;1000)开头，后跟n对选手的比赛结果，比赛结果以一对选手名字（中间隔一空格）表示，前者战胜后者。如果n为0，则表示输入结束。<br><code>Output</code><br>对于每个选手群，若你判断出产生了冠军，则在一行中输出“Yes”，否则在一行中输出“No”。<br></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Sample</span> <span class="keyword">Input</span></span><br><span class="line">3</span><br><span class="line">Alice Bob</span><br><span class="line">Smith John</span><br><span class="line">Alice Smith</span><br><span class="line">5</span><br><span class="line">a c</span><br><span class="line">c <span class="built_in">d</span></span><br><span class="line"><span class="keyword">d</span> <span class="built_in">e</span></span><br><span class="line">b <span class="built_in">e</span></span><br><span class="line">a <span class="built_in">d</span></span><br><span class="line">0</span><br><span class="line"><span class="keyword">Sample</span> Output</span><br><span class="line">Yes</span><br><span class="line"><span class="keyword">No</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line"><span class="comment">//set方法 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; all, loser;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">all.clear();</span><br><span class="line">loser.clear();</span><br><span class="line"><span class="keyword">while</span>(n --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">all.insert(s1);</span><br><span class="line">all.insert(s2);</span><br><span class="line">loser.insert(s2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (all.size() - loser.size() == <span class="number">1</span> ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种：</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> in[maxx];</span><br><span class="line"><span class="comment">//int edge[maxx][maxx];//用于构图但是这一题没有用到 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">slove</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i] == <span class="number">0</span>)</span><br><span class="line">sum ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//清空图 </span></span><br><span class="line">mp.clear();</span><br><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="comment">//memset(edge, 0, sizeof edge);//没用到 </span></span><br><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">1</span>; </span><br><span class="line"><span class="comment">//存图</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"><span class="keyword">if</span>(!mp[s1]) mp[s1] = t ++;</span><br><span class="line"><span class="keyword">if</span>(!mp[s2]) mp[s2] = t ++;</span><br><span class="line"><span class="comment">//edge[mp[s1]][mp[s2]] = 1;//没用到</span></span><br><span class="line">in[mp[s2]] ++; </span><br><span class="line">&#125;</span><br><span class="line">t --;</span><br><span class="line"><span class="keyword">if</span>(slove(t)) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种：</span></span><br><span class="line"><span class="comment">//map的另一种做法 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, cnt;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="built_in">string</span> winner, loser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">mp.clear();</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; winner &gt;&gt; loser;</span><br><span class="line"><span class="keyword">if</span>(mp.find(winner) == mp.end())</span><br><span class="line">mp[winner] = <span class="number">1</span>;</span><br><span class="line">mp[loser] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; :: iterator it;</span><br><span class="line"><span class="keyword">for</span>(it = mp.begin(); it != mp.end(); it ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(it -&gt; second)</span><br><span class="line">cnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt == <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Legal-or-Not"><a href="#Legal-or-Not" class="headerlink" title="Legal or Not"></a>Legal or Not</h1><p>Description:<br>ACM-DIY is a large QQ group where many excellent acmers get together. It is so harmonious that just like a big family. Every day,many “holy cows” like HH, hh, AC, ZT, lcc, BF, Qinz and so on chat on-line to exchange their ideas. When someone has questions, many warm-hearted cows like Lost will come to help. Then the one being helped will call Lost “master”, and Lost will have a nice “prentice”. By and by, there are many pairs of “master and prentice”. But then problem occurs: there are too many masters and too many prentices, how can we know whether it is legal or not?</p><p>We all know a master can have many prentices and a prentice may have a lot of masters too, it’s legal. Nevertheless，some cows are not so honest, they hold illegal relationship. Take HH and 3xian for instant, HH is 3xian’s master and, at the same time, 3xian is HH’s master,which is quite illegal! To avoid this,please help us to judge whether their relationship is legal or not.</p><p>Please note that the “master and prentice” relation is transitive. It means that if A is B’s master ans B is C’s master, then A is C’s master.<br><code>Input</code><br>The input consists of several test cases. For each case, the first line contains two integers, N (members to be tested) and M (relationships to be tested)(2 &lt;= N, M &lt;= 100). Then M lines follow, each contains a pair of (x, y) which means x is y’s master and y is x’s prentice. The input is terminated by N = 0.<br>TO MAKE IT SIMPLE, we give every one a number (0, 1, 2,…, N-1). We use their numbers instead of their names.<br><code>Output</code><br>For each test case, print in one line the judgement of the messy relationship.<br>If it is legal, output “YES”, otherwise “NO”.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> in[maxx];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">v[i].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">v[x].push_back(y);</span><br><span class="line">in[y] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; q;</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = q.front();</span><br><span class="line">q.pop();</span><br><span class="line">n --;</span><br><span class="line"><span class="keyword">if</span>(cnt &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[xx].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">in[v[xx][i]] --;</span><br><span class="line"><span class="keyword">if</span>(in[v[xx][i]] == <span class="number">0</span>)</span><br><span class="line">q.push(v[xx][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n) <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h1 id="Reward"><a href="#Reward" class="headerlink" title="Reward"></a>Reward</h1><p>Description:<br>Dandelion’s uncle is a boss of a factory. As the spring festival is coming , he wants to distribute rewards to his workers. Now he has a trouble about how to distribute the rewards.<br>The workers will compare their rewards ,and some one may have demands of the distributing of rewards ,just like a’s reward should more than b’s.Dandelion’s unclue wants to fulfill all the demands, of course ,he wants to use the least money.Every work’s reward will be at least 888 , because it’s a lucky number.<br><code>Input</code><br>One line with two integers n and m ,stands for the number of works and the number of demands .(n&lt;=10000,m&lt;=20000)<br>then m lines ,each line contains two integers a and b ,stands for a’s reward should be more than b’s.<br><code>Output</code><br>For every case ,print the least money dandelion ‘s uncle needs to distribute .If it’s impossible to fulfill all the works’ demands ,print -1.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">1777</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> in[maxx], sum[maxx];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxx];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">v[i].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; y &gt;&gt; x;</span><br><span class="line">v[x].push_back(y);</span><br><span class="line">in[y] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="keyword">if</span>(in[i] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.push(i);</span><br><span class="line">sum[i] = <span class="number">888</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = q.front();</span><br><span class="line">q.pop();</span><br><span class="line">k ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[xx].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">in[v[xx][i]] --;</span><br><span class="line"><span class="keyword">if</span>(in[v[xx][i]] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">q.push(v[xx][i]);</span><br><span class="line">sum[v[xx][i]] = sum[xx] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">ans += sum[i];</span><br><span class="line"><span class="keyword">if</span>(n != k) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Ordering-Tasks"><a href="#Ordering-Tasks" class="headerlink" title="Ordering Tasks"></a>Ordering Tasks</h2><p>Description:<br>John has n tasks to do. Unfortunately, the tasks are not independent and the execution of one task is<br>only possible if other tasks have already been executed.<br>Input<br>The input will consist of several instances of the problem. Each instance begins with a line containing<br>two integers, 1 ≤ n ≤ 100 and m. n is the number of tasks (numbered from 1 to n) and m is the<br>number of direct precedence relations between tasks. After this, there will be m lines with two integers<br>i and j, representing the fact that task i must be executed before task j.<br>An instance with n = m = 0 will finish the input.<br>Output<br>For each instance, print a line with n integers representing the tasks in a possible order of execution.<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> in[maxx];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, x, y;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n, &amp;m))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span> in);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">v[i].clear();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">v[x].push_back(y);</span><br><span class="line">in[y] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; q;</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i] == <span class="number">0</span>)</span><br><span class="line">q.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; xx;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; xx; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[xx].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">in[v[xx][i]] --;</span><br><span class="line"><span class="keyword">if</span>(in[v[xx][i]] == <span class="number">0</span>)</span><br><span class="line">q.push(v[xx][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Rank-of-Tetris"><a href="#Rank-of-Tetris" class="headerlink" title="Rank of Tetris"></a>Rank of Tetris</h2><p>Description:<br>自从Lele开发了Rating系统，他的Tetris事业更是如虎添翼，不久他遍把这个游戏推向了全球。</p><p>为了更好的符合那些爱好者的喜好，Lele又想了一个新点子：他将制作一个全球Tetris高手排行榜，定时更新，名堂要比福布斯富豪榜还响。关于如何排名，这个不用说都知道是根据Rating从高到低来排，如果两个人具有相同的Rating，那就按这几个人的RP从高到低来排。</p><p>终于，Lele要开始行动了，对N个人进行排名。为了方便起见，每个人都已经被编号，分别从0到N-1,并且编号越大，RP就越高。<br>同时Lele从狗仔队里取得一些（M个）关于Rating的信息。这些信息可能有三种情况，分别是”A &gt; B”,”A = B”,”A &lt; B”，分别表示A的Rating高于B,等于B,小于B。</p><p>现在Lele并不是让你来帮他制作这个高手榜，他只是想知道，根据这些信息是否能够确定出这个高手榜，是的话就输出”OK”。否则就请你判断出错的原因，到底是因为信息不完全（输出”UNCERTAIN”），还是因为这些信息中包含冲突（输出”CONFLICT”）。<br>注意，如果信息中同时包含冲突且信息不完全，就输出”CONFLICT”。<br><code>Input</code><br>本题目包含多组测试，请处理到文件结束。<br>每组测试第一行包含两个整数N,M(0&lt;=N&lt;=10000,0&lt;=M&lt;=20000),分别表示要排名的人数以及得到的关系数。<br>接下来有M行，分别表示这些关系<br><code>Output</code><br>对于每组测试，在一行里按题目要求输出<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> &gt; <span class="number">1</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span></span><br><span class="line"><span class="number">0</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> = <span class="number">2</span></span><br><span class="line"><span class="number">1</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="number">2</span> &gt; <span class="number">0</span></span><br><span class="line"><span class="number">0</span> &gt; <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> &gt; <span class="number">0</span></span><br><span class="line"><span class="number">1</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="number">2</span> &lt; <span class="number">1</span></span><br><span class="line">Sample Output</span><br><span class="line">OK</span><br><span class="line">CONFLICT</span><br><span class="line">UNCERTAIN</span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>//边</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b;<span class="comment">//顶点</span></span><br><span class="line"><span class="keyword">char</span> ch;<span class="comment">//运算符</span></span><br><span class="line">&#125;c[<span class="number">10005</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;<span class="built_in">map</span>[<span class="number">10005</span>];<span class="comment">//map数组存贮邻接表</span></span><br><span class="line"><span class="keyword">int</span> n,m,sum,in[<span class="number">10005</span>],fa[<span class="number">10005</span>];<span class="comment">//in数组表示入度,fa[i]表示顶点i所在集合的根节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//查找根节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[x]!=x) fa[x]=find(fa[x]);</span><br><span class="line"><span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comb</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//合并集合</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x=find(x);</span><br><span class="line">y=find(y);</span><br><span class="line"><span class="keyword">if</span>(x==y)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fa[y]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">fa[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">top_sort</span><span class="params">()</span><span class="comment">//queue实现拓扑排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(in[i]==<span class="number">0</span>&amp;&amp;fa[i]==i)</span><br><span class="line">s.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!s.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s.size()&gt;<span class="number">1</span>)<span class="comment">//即使发现信息不完整也要继续运行下去，因为如果信息同时不完整和冲突都是CONFLICT</span></span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pos=s.front();</span><br><span class="line">s.pop(),sum--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">map</span>[pos].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">in[<span class="built_in">map</span>[pos][i]]--;</span><br><span class="line"><span class="keyword">if</span>(in[<span class="built_in">map</span>[pos][i]]==<span class="number">0</span>)</span><br><span class="line">s.push(<span class="built_in">map</span>[pos][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"CONFLICT\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"UNCERTAIN\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"OK\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">sum=n;</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">memset</span>(<span class="built_in">map</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="built_in">map</span>));</span><br><span class="line"><span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="keyword">sizeof</span>(in));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %c %d"</span>,&amp;c[i].a,&amp;c[i].ch,&amp;c[i].b);</span><br><span class="line"><span class="keyword">if</span>(c[i].ch==<span class="string">'='</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(comb(c[i].a,c[i].b))</span><br><span class="line">sum--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[i].ch==<span class="string">'='</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> x=find(c[i].a);</span><br><span class="line"><span class="keyword">int</span> y=find(c[i].b);</span><br><span class="line"><span class="keyword">if</span>(c[i].ch==<span class="string">'&gt;'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[x].push_back(y);</span><br><span class="line">in[y]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[y].push_back(x);</span><br><span class="line">in[x]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">top_sort();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day19&quot;&gt;&lt;a href=&quot;#Day19&quot; class=&quot;headerlink&quot; title=&quot;Day19&quot;&gt;&lt;/a&gt;Day19&lt;/h1&gt;&lt;p&gt;今天讲的是拓扑排序算法&lt;br&gt;努力学习！！&lt;br&gt;&lt;a href=&quot;https://vjudge.net/contest/317983#overview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OJ链接&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="算法集训" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E9%9B%86%E8%AE%AD/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Day18</title>
    <link href="http://yoursite.com/2019/08/06/Day18/"/>
    <id>http://yoursite.com/2019/08/06/Day18/</id>
    <published>2019-08-05T16:00:00.000Z</published>
    <updated>2019-08-07T14:30:49.761Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --><h1 id="Day18"><a href="#Day18" class="headerlink" title="Day18"></a>Day18</h1><p>今天讲的是最短路算法<br><code>补题</code><br><a href="https://vjudge.net/contest/317592#overview" target="_blank" rel="noopener">OJ链接</a><br><a id="more"></a></p><blockquote><p>提醒自己一下，因为今天有事没有写完这些题目，所以大部分的题解和代码都是在网上找到的，希望以后自己可以把这部分题补上</p></blockquote><h2 id="最短路算法"><a href="#最短路算法" class="headerlink" title="最短路算法"></a>最短路算法</h2><p>详情链接-&gt;<a href="https://cdreamer.cn/2019/06/01/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/" target="_blank" rel="noopener">传送</a></p><h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p>Description:<br>在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？</p><p><code>Input</code><br>输入包括多组数据。每组数据第一行是两个整数N、M（N&lt;=100，M&lt;=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1&lt;=A,B&lt;=N,1&lt;=C&lt;=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。<br>输入保证至少存在1条商店到赛场的路线。<br><code>Output</code><br>对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> dis[maxx];</span><br><span class="line"><span class="keyword">bool</span> vis[maxx];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[maxx][maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dj</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">dis[i] = <span class="built_in">map</span>[<span class="number">1</span>][i];</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n ; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> minn = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[j] &amp;&amp; dis[j] &lt; minn)</span><br><span class="line">&#123;</span><br><span class="line">minn = dis[j];</span><br><span class="line">p = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[p] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[j] &amp;&amp; dis[p] + <span class="built_in">map</span>[p][j] &lt; dis[j])</span><br><span class="line">dis[j] = dis[p] + <span class="built_in">map</span>[p][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">map</span>[i][j] = INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">map</span>[a][b] &gt; c)</span><br><span class="line"><span class="built_in">map</span>[a][b] = <span class="built_in">map</span>[b][a] = c;</span><br><span class="line">&#125;</span><br><span class="line">dj(<span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dis[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Frogger"><a href="#Frogger" class="headerlink" title="Frogger"></a>Frogger</h2><p>Description:<br>Freddy Frog is sitting on a stone in the middle of a lake. Suddenly he notices Fiona Frog who is sitting on another stone. He plans to visit her, but since the water is dirty and full of tourists’ sunscreen, he wants to avoid swimming and instead reach her by jumping.<br>Unfortunately Fiona’s stone is out of his jump range. Therefore Freddy considers to use other stones as intermediate stops and reach her by a sequence of several small jumps.<br>To execute a given sequence of jumps, a frog’s jump range obviously must be at least as long as the longest jump occuring in the sequence.<br>The frog distance (humans also call it minimax distance) between two stones therefore is defined as the minimum necessary jump range over all possible paths between the two stones.</p><p>You are given the coordinates of Freddy’s stone, Fiona’s stone and all other stones in the lake. Your job is to compute the frog distance between Freddy’s and Fiona’s stone.<br><code>Input</code><br>The input will contain one or more test cases. The first line of each test case will contain the number of stones n (2&lt;=n&lt;=200). The next n lines each contain two integers xi,yi (0 &lt;= xi,yi &lt;= 1000) representing the coordinates of stone #i. Stone #1 is Freddy’s stone, stone #2 is Fiona’s stone, the other n-2 stones are unoccupied. There’s a blank line following each test case. Input is terminated by a value of zero (0) for n.<br><code>Output</code><br>For each test case, print a line saying “Scenario #x” and a line saying “Frog Distance = y” where x is replaced by the test case number (they are numbered from 1) and y is replaced by the appropriate real number, printed to three decimals. Put a blank line after each test case, even after the last one.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">17</span> <span class="number">4</span></span><br><span class="line"><span class="number">19</span> <span class="number">4</span></span><br><span class="line"><span class="number">18</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line">Scenario #<span class="number">1</span></span><br><span class="line">Frog Distance = <span class="number">5.000</span></span><br><span class="line"></span><br><span class="line">Scenario #<span class="number">2</span></span><br><span class="line">Frog Distance = <span class="number">1.414</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Floyd解法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxnum 300</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxnum],y[maxnum],n;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">map</span>[maxnum][maxnum];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                <span class="built_in">map</span>[i][j]=min(<span class="built_in">map</span>[i][j],max(<span class="built_in">map</span>[i][k],<span class="built_in">map</span>[k][j]));<span class="comment">//许多通路中最长边中的最小边</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        mem(<span class="built_in">map</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                <span class="built_in">map</span>[i][j]=<span class="built_in">map</span>[j][i]=<span class="built_in">sqrt</span>(<span class="keyword">double</span>(x[i]-x[j])*(x[i]-x[j])+<span class="keyword">double</span>(y[i]-y[j])*(y[i]-y[j]));</span><br><span class="line">        floyd();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d\nFrog Distance = %.3lf\n\n"</span>,q++,<span class="built_in">map</span>[<span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dijkstra解法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxnum 300</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxnum],y[maxnum],n;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">map</span>[maxnum][maxnum];</span><br><span class="line"><span class="keyword">double</span> dis[maxnum];</span><br><span class="line"><span class="keyword">int</span> vis[maxnum];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dj</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mem(vis,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        dis[i]=inf;<span class="comment">//这里最好别用memset</span></span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minn=inf,k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            <span class="keyword">if</span>(vis[j]==<span class="number">0</span>&amp;&amp;dis[j]&lt;minn)</span><br><span class="line">            &#123;</span><br><span class="line">                k=j;</span><br><span class="line">                minn=dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        vis[k]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            dis[j]=min(dis[j],max(dis[k],<span class="built_in">map</span>[k][j]));<span class="comment">//dis[j]为从一号石头到第j号石头所有通路中最长边中的最小边</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        mem(<span class="built_in">map</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                <span class="built_in">map</span>[i][j]=<span class="built_in">map</span>[j][i]=<span class="built_in">sqrt</span>(<span class="keyword">double</span>(x[i]-x[j])*(x[i]-x[j])+<span class="keyword">double</span>(y[i]-y[j])*(y[i]-y[j]));</span><br><span class="line">        dj(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d\nFrog Distance = %.3lf\n\n"</span>,q++,dis[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SPFA解法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxnum 300</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxnum],y[maxnum],n;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">map</span>[maxnum][maxnum];</span><br><span class="line"><span class="keyword">double</span> dis[maxnum];</span><br><span class="line"><span class="keyword">int</span> vis[maxnum];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        dis[i]=inf;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        vis[i]=<span class="number">0</span>;</span><br><span class="line">    vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k=q.front();</span><br><span class="line">        vis[k]=<span class="number">0</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            <span class="keyword">if</span>(max(dis[k],<span class="built_in">map</span>[k][j])&lt;dis[j])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[j]=max(dis[k],<span class="built_in">map</span>[k][j]);</span><br><span class="line">                <span class="keyword">if</span>(vis[j]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(j);</span><br><span class="line">                    vis[j]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        mem(<span class="built_in">map</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                <span class="built_in">map</span>[i][j]=<span class="built_in">map</span>[j][i]=<span class="built_in">sqrt</span>(<span class="keyword">double</span>(x[i]-x[j])*(x[i]-x[j])+<span class="keyword">double</span>(y[i]-y[j])*(y[i]-y[j]));</span><br><span class="line">        spfa();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d\nFrog Distance = %.3lf\n\n"</span>,q++,dis[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Stockbroker-Grapevine"><a href="#Stockbroker-Grapevine" class="headerlink" title="Stockbroker Grapevine"></a>Stockbroker Grapevine</h2><p>Description:<br>Stockbrokers are known to overreact to rumours. You have been contracted to develop a method of spreading disinformation amongst the stockbrokers to give your employer the tactical edge in the stock market. For maximum effect, you have to spread the rumours in the fastest possible way.</p><p>Unfortunately for you, stockbrokers only trust information coming from their “Trusted sources” This means you have to take into account the structure of their contacts when starting a rumour. It takes a certain amount of time for a specific stockbroker to pass the rumour on to each of his colleagues. Your task will be to write a program that tells you which stockbroker to choose as your starting point for the rumour, as well as the time it will take for the rumour to spread throughout the stockbroker community. This duration is measured as the time needed for the last person to receive the information.<br><code>Input</code><br>Your program will input data for different sets of stockbrokers. Each set starts with a line with the number of stockbrokers. Following this is a line for each stockbroker which contains the number of people who they have contact with, who these people are, and the time taken for them to pass the message to each person. The format of each stockbroker line is as follows: The line starts with the number of contacts (n), followed by n pairs of integers, one pair for each contact. Each pair lists first a number referring to the contact (e.g. a ‘1’ means person number one in the set), followed by the time in minutes taken to pass a message to that person. There are no special punctuation symbols or spacing rules.</p><p>Each person is numbered 1 through to the number of stockbrokers. The time taken to pass the message on will be between 1 and 10 minutes (inclusive), and the number of contacts will range between 0 and one less than the number of stockbrokers. The number of stockbrokers will range from 1 to 100. The input is terminated by a set of stockbrokers containing 0 (zero) people.</p><p><code>Output</code><br>For each set of data, your program must output a single line containing the person who results in the fastest message transmission, and how long before the last person will receive any given message after you give it to this person, measured in integer minutes.<br>It is possible that your program will receive a network of connections that excludes some persons, i.e. some people may be unreachable. If your program detects such a broken network, simply output the message “disjoint”. Note that the time taken to pass the message from person A to person B is not necessarily the same as the time taken to pass it from B to A, if such transmission is possible at all.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">8</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> <span class="number">10</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">经典水题floyd这道题重点在于找到从某一个源点出发的最短路</span></span><br><span class="line"><span class="comment">怎么找？可以找到从一个源点出发最长的时间，即是传递结束，</span></span><br><span class="line"><span class="comment">然后找最长的最短。当然会出现有些人没有传递到，但是这道</span></span><br><span class="line"><span class="comment">题的bug在于此，不会出现disjoint的情况。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 210</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> dist[M][M];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= n; k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">if</span>(i != j &amp;&amp; dist[i][j] &gt; dist[i][k] + dist[k][j])</span><br><span class="line">                    dist[i][j] = dist[i][k] + dist[k][j];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> minlength = inf;</span><br><span class="line">    <span class="keyword">int</span> maxlength,pos;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">        maxlength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(i != j &amp;&amp; maxlength &lt; dist[i][j])</span><br><span class="line">                maxlength = dist[i][j];</span><br><span class="line">        <span class="keyword">if</span>(minlength &gt; maxlength)&#123;</span><br><span class="line">            minlength = maxlength;</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;pos&lt;&lt;<span class="string">" "</span>&lt;&lt;minlength&lt;&lt;<span class="built_in">endl</span>;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dist,inf,<span class="keyword">sizeof</span>(dist));</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(!n)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> n1;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;n1;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n1; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> p,t;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;p&gt;&gt;t;</span><br><span class="line">                dist[i][p] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        floyd();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Invitation-Cards"><a href="#Invitation-Cards" class="headerlink" title="Invitation Cards"></a>Invitation Cards</h2><p>Description:<br>In the age of television, not many people attend theater performances. Antique Comedians of Malidinesia are aware of this fact. They want to propagate theater and, most of all, Antique Comedies. They have printed invitation cards with all the necessary information and with the programme. A lot of students were hired to distribute these invitations among the people. Each student volunteer has assigned exactly one bus stop and he or she stays there the whole day and gives invitation to people travelling by bus. A special course was taken where students learned how to influence people and what is the difference between influencing and robbery.</p><p>The transport system is very special: all lines are unidirectional and connect exactly two stops. Buses leave the originating stop with passangers each half an hour. After reaching the destination stop they return empty to the originating stop, where they wait until the next full half an hour, e.g. X:00 or X:30, where ‘X’ denotes the hour. The fee for transport between two stops is given by special tables and is payable on the spot. The lines are planned in such a way, that each round trip (i.e. a journey starting and finishing at the same stop) passes through a Central Checkpoint Stop (CCS) where each passenger has to pass a thorough check including body scan.</p><p>All the ACM student members leave the CCS each morning. Each volunteer is to move to one predetermined stop to invite passengers. There are as many volunteers as stops. At the end of the day, all students travel back to CCS. You are to write a computer program that helps ACM to minimize the amount of money to pay every day for the transport of their employees.<br><code>Input</code><br>The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case begins with a line containing exactly two integers P and Q, 1 &lt;= P,Q &lt;= 1000000. P is the number of stops including CCS and Q the number of bus lines. Then there are Q lines, each describing one bus line. Each of the lines contains exactly three numbers - the originating stop, the destination stop and the price. The CCS is designated by number 1. Prices are positive integers the sum of which is smaller than 1000000000. You can also assume it is always possible to get from any stop to any other stop.<br><code>Output</code><br>For each case, print one line containing the minimum amount of money to be paid each day by ACM for the travel costs of its volunteers.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">13</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">33</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">10</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">60</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">20</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">10</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">50</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">46</span></span><br><span class="line"><span class="number">210</span></span><br></pre></td></tr></table></figure><p><code>题意</code><br>求1到各个顶点和各个定点到1的路线总长最短。有向图。<br>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//各个点到1顶点的总和最短可以反向建图来实现。而不是反复最短路</span></span><br><span class="line"><span class="comment">//因为有1000000的顶点所以采用了邻接表。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000000</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> b[N],w[N],e[N];</span><br><span class="line"><span class="keyword">int</span> fir[N],nxt[N];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> &amp;ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i]=i==<span class="number">1</span>?<span class="number">0</span>:inf;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now=q.front();</span><br><span class="line">        <span class="keyword">int</span> k=fir[now];</span><br><span class="line">        q.pop();</span><br><span class="line">        vis[now]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k!=<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[e[k]]&gt;dis[b[k]]+w[k])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[e[k]]=dis[b[k]]+w[k];</span><br><span class="line">                <span class="keyword">if</span>(!vis[e[k]]) q.push(e[k]),vis[e[k]]=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            k=nxt[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=dis[i];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            fir[i]=<span class="number">-1</span>;</span><br><span class="line">            nxt[i]=<span class="number">-1</span>;</span><br><span class="line">            dis[i]=inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;b[i],&amp;e[i],&amp;w[i]);</span><br><span class="line">            nxt[i]=fir[b[i]];</span><br><span class="line">            fir[b[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        spfa(ans);</span><br><span class="line">        <span class="built_in">memset</span>(nxt,<span class="number">-1</span>,<span class="keyword">sizeof</span> nxt);</span><br><span class="line">        <span class="built_in">memset</span>(fir,<span class="number">-1</span>,<span class="keyword">sizeof</span> fir);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=b[i];</span><br><span class="line">            b[i]=e[i];</span><br><span class="line">            e[i]=t;</span><br><span class="line">            nxt[i]=fir[b[i]];</span><br><span class="line">            fir[b[i]]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        spfa(ans);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Skiing"><a href="#Skiing" class="headerlink" title="Skiing"></a>Skiing</h2><p>Description:<br>Bessie and the rest of Farmer John’s cows are taking a trip this winter to go skiing. One day Bessie finds herself at the top left corner of an R (1 &lt;= R &lt;= 100) by C (1 &lt;= C &lt;= 100) grid of elevations E (-25 &lt;= E &lt;= 25). In order to join FJ and the other cows at a discow party, she must get down to the bottom right corner as quickly as she can by travelling only north, south, east, and west.</p><p>Bessie starts out travelling at a initial speed V (1 &lt;= V &lt;= 1,000,000). She has discovered a remarkable relationship between her speed and her elevation change. When Bessie moves from a location of height A to an adjacent location of eight B, her speed is multiplied by the number 2^(A-B). The time it takes Bessie to travel from a location to an adjacent location is the reciprocal of her speed when she is at the first location.</p><p>Find the both smallest amount of time it will take Bessie to join her cow friends.<br><code>Input</code></p><ul><li><p>Line 1: Three space-separated integers: V, R, and C, which respectively represent Bessie’s initial velocity and the number of rows and columns in the grid.</p></li><li><p>Lines 2..R+1: C integers representing the elevation E of the corresponding location on the grid.<br><code>Output</code><br>A single number value, printed to two exactly decimal places: the minimum amount of time that Bessie can take to reach the bottom right corner of the grid.</p></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">29.00</span></span><br><span class="line">Hint</span><br><span class="line">Bessie's best route <span class="keyword">is</span>: </span><br><span class="line">Start <span class="keyword">at</span> <span class="number">1</span>,<span class="number">1</span> <span class="built_in">time</span> <span class="number">0</span> speed <span class="number">1</span> </span><br><span class="line">East <span class="keyword">to</span> <span class="number">1</span>,<span class="number">2</span> <span class="built_in">time</span> <span class="number">1</span> speed <span class="number">1</span>/<span class="number">16</span> </span><br><span class="line">South <span class="keyword">to</span> <span class="number">2</span>,<span class="number">2</span> <span class="built_in">time</span> <span class="number">17</span> speed <span class="number">1</span>/<span class="number">4</span> </span><br><span class="line">South <span class="keyword">to</span> <span class="number">3</span>,<span class="number">2</span> <span class="built_in">time</span> <span class="number">21</span> speed <span class="number">1</span>/<span class="number">8</span> </span><br><span class="line">East <span class="keyword">to</span> <span class="number">3</span>,<span class="number">3</span> <span class="built_in">time</span> <span class="number">29</span> speed <span class="number">1</span>/<span class="number">4</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dijkstra解法</span></span><br><span class="line"><span class="comment">/*dijkstra解法题解：每个节点的耗时就是从左上角（1，1）点到（i,j)点的2^高度差,而速度是其倒数，需输出的啦~，先把节点存储成耗时的静态邻接表，然后利用dijkstra的堆优化进行（nlogn)的求解。*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 111</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 999999999999</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">double</span> dis;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a) <span class="keyword">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;a.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> dic[<span class="number">4</span>][<span class="number">2</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> at[maxn][maxn];</span><br><span class="line"><span class="keyword">double</span> mp[maxn][maxn];</span><br><span class="line"><span class="keyword">double</span> dis[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> v,r,c;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line">dis[i][j]=inf;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_cost</span><span class="params">(<span class="keyword">int</span> h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v*<span class="number">1.0</span>*<span class="built_in">pow</span>(<span class="number">2</span>*<span class="number">1.0</span>,at[<span class="number">1</span>][<span class="number">1</span>]-h);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">0</span>&amp;&amp;x&lt;=r&amp;&amp;y&gt;<span class="number">0</span>&amp;&amp;y&lt;=c)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line">node now,next;</span><br><span class="line">now.x=<span class="number">1</span>;</span><br><span class="line">now.y=<span class="number">1</span>;</span><br><span class="line">now.dis=<span class="number">0</span>;</span><br><span class="line">dis[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">q.push(now);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">now=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[now.x][now.y]) <span class="keyword">continue</span>;</span><br><span class="line">vis[now.x][now.y]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(now.x==r&amp;&amp;now.y==c)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> x;<span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">x=now.x+dic[i][<span class="number">0</span>];</span><br><span class="line">y=now.y+dic[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(!ok(x,y)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[x][y]&amp;&amp;dis[x][y]&gt;now.dis+<span class="number">1.0</span>/mp[now.x][now.y])</span><br><span class="line">&#123;</span><br><span class="line">dis[x][y]=now.dis+<span class="number">1.0</span>/mp[now.x][now.y];</span><br><span class="line">next.x=x;</span><br><span class="line">next.y=y;</span><br><span class="line">next.dis=dis[x][y];</span><br><span class="line">q.push(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;v,&amp;r,&amp;c);</span><br><span class="line">init();</span><br><span class="line"><span class="comment">//printf("%lf\n",dis[1][1]);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;at[i][j]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;j++)</span><br><span class="line">mp[i][j]=get_cost(at[i][j]);</span><br><span class="line">dijkstra();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,dis[r][c]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SPFA解法</span></span><br><span class="line"><span class="comment">/*题解：可以看出每个点的速度都与第一个点有关，因为V*2^(A-B)*2^(B-C)它就等于V*2^(A-C)，所以每个点的速度都可以用第一个点算出来。然后把每个点对应到下一个点的时间存到这个点的位置上。*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> v,r,c;</span><br><span class="line"><span class="keyword">int</span> vis[MAX][MAX];</span><br><span class="line"><span class="keyword">double</span> mp[MAX][MAX],t[MAX][MAX],dis[MAX][MAX];<span class="comment">// mp要用double 待会用到pow函数要不然报错</span></span><br><span class="line"><span class="keyword">int</span> mv[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hh</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r;i++)&#123;<span class="comment">// 赋一个很大的值给double类型的数组，要用这种形式，要不然用下面那种形式，不对。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=c;j++)&#123;</span><br><span class="line">dis[i][j] = DBL_MAX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//memset(dis,inf,sizeof(dis));</span></span><br><span class="line"><span class="built_in">queue</span>&lt;hh&gt; q;</span><br><span class="line">hh tmp,nex;</span><br><span class="line"><span class="keyword">int</span> xx,yy;</span><br><span class="line">tmp.x=<span class="number">1</span>;</span><br><span class="line">tmp.y=<span class="number">1</span>;</span><br><span class="line">dis[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//注意赋值为0，dis数组表示别的点到这个点需要的时间，不包括这个点到别的点的时间，也就是不包括这个点所存的时间</span></span><br><span class="line">q.push(tmp);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">tmp=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">vis[tmp.x][tmp.y]=<span class="number">0</span>;<span class="comment">// 注意要赋值0，要不然会错，因为这个点我们可能需要重新走</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>;i++)&#123;</span><br><span class="line">xx=tmp.x+mv[i][<span class="number">0</span>];</span><br><span class="line">yy=tmp.y+mv[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(xx&lt;<span class="number">1</span>|yy&lt;<span class="number">1</span>||xx&gt;r||yy&gt;c) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(dis[xx][yy]&gt;t[tmp.x][tmp.y]+dis[tmp.x][tmp.y])&#123;</span><br><span class="line">dis[xx][yy]=t[tmp.x][tmp.y]+dis[tmp.x][tmp.y];</span><br><span class="line"><span class="keyword">if</span>(!vis[xx][yy])&#123;</span><br><span class="line">vis[xx][yy]=<span class="number">1</span>;</span><br><span class="line">nex.x=xx;</span><br><span class="line">nex.y=yy;</span><br><span class="line">q.push(nex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v &gt;&gt; r &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= r;i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= c;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mp[i][j];</span><br><span class="line">t[i][j]=<span class="number">1</span>/(v*(<span class="built_in">pow</span>(<span class="number">2</span>,mp[<span class="number">1</span>][<span class="number">1</span>]-mp[i][j])));<span class="comment">//计算每个点到下一个点所需要的时间，存到这个点上</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">spfa();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,dis[r][c]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Cow-Hurdles"><a href="#Cow-Hurdles" class="headerlink" title="Cow Hurdles"></a>Cow Hurdles</h2><p>Description:<br>Farmer John wants the cows to prepare for the county jumping competition, so Bessie and the gang are practicing jumping over hurdles. They are getting tired, though, so they want to be able to use as little energy as possible to jump over the hurdles.</p><p>Obviously, it is not very difficult for a cow to jump over several very short hurdles, but one tall hurdle can be very stressful. Thus, the cows are only concerned about the height of the tallest hurdle they have to jump over.</p><p>The cows’ practice room has N (1 ≤ N ≤ 300) stations, conveniently labeled 1..N. A set of M (1 ≤ M ≤ 25,000) one-way paths connects pairs of stations; the paths are also conveniently labeled 1..M. Path i travels from station Si to station Ei and contains exactly one hurdle of height Hi (1 ≤ Hi ≤ 1,000,000). Cows must jump hurdles in any path they traverse.</p><p>The cows have T (1 ≤ T ≤ 40,000) tasks to complete. Task i comprises two distinct numbers, Ai and Bi (1 ≤ Ai ≤ N; 1 ≤ Bi ≤ N), which connote that a cow has to travel from station Ai to station Bi (by traversing over one or more paths over some route). The cows want to take a path the minimizes the height of the tallest hurdle they jump over when traveling from Ai to Bi . Your job is to write a program that determines the path whose tallest hurdle is smallest and report that height.</p><p><code>Input</code></p><ul><li>Line 1: Three space-separated integers: N, M, and T</li><li>Lines 2..M+1: Line i+1 contains three space-separated integers: Si , Ei , and Hi</li><li>Lines M+2..M+T+1: Line i+M+1 contains two space-separated integers that describe task i: Ai and Bi</li></ul><p><code>Output</code></p><ul><li>Lines 1..T: Line i contains the result for task i and tells the smallest possible maximum height necessary to travel between the stations. Output -1 if it is impossible to travel between the two stations.</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ample Input</span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">12</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure><blockquote><p>题意：有一头牛，要进行跳木桩训练，已知有n个木桩，而且知道m对木桩之间的高度差。但是它很懒，它想尽可能的跳最小的高度就完成从任意一个木桩到任意一个木桩的跳跃，给m对点，问是否存在最小的跳跃高度使得其能够完成跳跃，如果有就输出最小高度；否则输出-1。</p></blockquote><blockquote><p>解析：对于每一次询问，求的是每条路径上边权值的最大值（该路径所经过的相邻两木桩之间的差值的最大值），然后取其中的最小值即可。因为只要能跳过这个高度差最大的，高度差小的当然能跳过去了。由于是求任意两木桩之间的所有路径上最大高度差值的最小值，所以我们可以用Floyd算法，对其进行处理，处理之后得到的最终结果即为所求了。</p></blockquote><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 123456789</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">302</span>][<span class="number">302</span>];        <span class="comment">//最大高度的最小值矩阵</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, t;</span><br><span class="line">    <span class="keyword">int</span> x, y, w;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;t)!=EOF)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)                 <span class="comment">//初始化</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) a[i][j] = i==j ? <span class="number">0</span> : INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)&#123;                <span class="comment">//读入高度差</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;w);</span><br><span class="line">            a[x][y] = min(a[x][y], w);          <span class="comment">//更新最大高度差</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)                 <span class="comment">//Floyd</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)&#123;</span><br><span class="line">                    a[i][j] = min(a[i][j], max(a[i][k], a[k][j]));      </span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=t; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[x][y]==INF ? <span class="number">-1</span> : a[x][y]);       <span class="comment">//输出，如果还是INF，那就代表不可达，两者时之间没有路径满足要求</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:03 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day18&quot;&gt;&lt;a href=&quot;#Day18&quot; class=&quot;headerlink&quot; title=&quot;Day18&quot;&gt;&lt;/a&gt;Day18&lt;/h1&gt;&lt;p&gt;今天讲的是最短路算法&lt;br&gt;&lt;code&gt;补题&lt;/code&gt;&lt;br&gt;&lt;a href=&quot;https://vjudge.net/contest/317592#overview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OJ链接&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="算法集训" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E9%9B%86%E8%AE%AD/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Day17</title>
    <link href="http://yoursite.com/2019/08/05/Day17/"/>
    <id>http://yoursite.com/2019/08/05/Day17/</id>
    <published>2019-08-04T16:00:00.000Z</published>
    <updated>2019-08-05T14:17:27.973Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day17"><a href="#Day17" class="headerlink" title="Day17"></a>Day17</h1><p>今天讲的是并查集和最小生成树<br><a href="https://vjudge.net/contest/317297#overview" target="_blank" rel="noopener">OJ链接</a><br><a id="more"></a></p><h2 id="并查集-最小生成树"><a href="#并查集-最小生成树" class="headerlink" title="并查集+最小生成树"></a>并查集+最小生成树</h2><p>具体内容点这里-&gt;<a href="https://cdreamer.cn/2019/06/02/%E5%B9%B6%E6%9F%A5%E9%9B%86+%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/" target="_blank" rel="noopener">链接</a></p><h2 id="The-Suspects"><a href="#The-Suspects" class="headerlink" title="The Suspects"></a>The Suspects</h2><p>Description:<br>Severe acute respiratory syndrome (SARS), an atypical pneumonia of unknown aetiology, was recognized as a global threat in mid-March 2003. To minimize transmission to others, the best strategy is to separate the suspects from others.<br>In the Not-Spreading-Your-Sickness University (NSYSU), there are many student groups. Students in the same group intercommunicate with each other frequently, and a student may join several groups. To prevent the possible transmissions of SARS, the NSYSU collects the member lists of all student groups, and makes the following rule in their standard operation procedure (SOP).<br>Once a member in a group is a suspect, all members in the group are suspects.<br>However, they find that it is not easy to identify all the suspects when a student is recognized as a suspect. Your job is to write a program which finds all the suspects.<br><code>Input</code><br>The input file contains several cases. Each test case begins with two integers n and m in a line, where n is the number of students, and m is the number of groups. You may assume that 0 &lt; n &lt;= 30000 and 0 &lt;= m &lt;= 500. Every student is numbered by a unique integer between 0 and n−1, and initially student 0 is recognized as a suspect in all the cases. This line is followed by m member lists of the groups, one line per group. Each line begins with an integer k by itself representing the number of members in the group. Following the number of members, there are k integers representing the students in this group. All the integers in a line are separated by at least one space.<br>A case with n = 0 and m = 0 indicates the end of the input, and need not be processed.<br><code>Output</code><br>For each case, output the number of suspects in one line.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">100</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">10</span> <span class="number">13</span> <span class="number">11</span> <span class="number">12</span> <span class="number">14</span></span><br><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">99</span> <span class="number">2</span></span><br><span class="line"><span class="number">200</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxx];</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = x;</span><br><span class="line"><span class="keyword">while</span>(pre[r] != r)</span><br><span class="line">&#123;</span><br><span class="line">r = pre[r];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//路径压缩算法</span></span><br><span class="line"><span class="keyword">int</span> i = x, j;</span><br><span class="line"><span class="keyword">while</span>(pre[i] != r)</span><br><span class="line">&#123;</span><br><span class="line">j = pre[r];</span><br><span class="line">pre[i] = r;</span><br><span class="line">i = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> xx = find(x), yy = find(y);</span><br><span class="line"><span class="keyword">if</span>(xx != yy)</span><br><span class="line">pre[xx] = yy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m))</span><br><span class="line">&#123;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) pre[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line"><span class="keyword">int</span> num1, num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num1);</span><br><span class="line">k --;</span><br><span class="line"><span class="keyword">while</span>(k --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">join(num1, num);</span><br><span class="line">num1 = num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line"><span class="keyword">if</span>(find(i) == pre[<span class="number">0</span>]) sum ++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="畅通工程"><a href="#畅通工程" class="headerlink" title="畅通工程"></a>畅通工程</h2><p>Description:<br>某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？<br><code>Input</code><br>测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。<br>注意:两个城市之间可以有多条道路相通,也就是说<br>3 3<br>1 2<br>1 2<br>2 1<br>这种输入也是合法的<br>当N为0时，输入结束，该用例不被处理。<br><code>Output</code><br>对每个测试用例，在1行里输出最少还需要建设的道路数目。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">999</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">998</span></span><br><span class="line"></span><br><span class="line">Huge input, scanf is recommended.</span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = x;</span><br><span class="line"><span class="keyword">while</span>(pre[r] != r)</span><br><span class="line">&#123;</span><br><span class="line">r = pre[r];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> xx = find(x), yy = find(y);</span><br><span class="line"><span class="keyword">if</span>(xx != yy)</span><br><span class="line">pre[xx] = yy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) pre[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x, &amp;y);</span><br><span class="line">join(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="keyword">if</span>(pre[i] == i)</span><br><span class="line">ans ++; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="还是畅通工程"><a href="#还是畅通工程" class="headerlink" title="还是畅通工程"></a>还是畅通工程</h2><p>Description:<br>某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。<br><code>Input</code><br>测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。<br>当N为0时，输入结束，该用例不被处理。<br><code>Output</code><br>对每个测试用例，在1行里输出最小的公路总长度。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">Huge input, scanf is recommended.</span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxx];</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s, e, w;</span><br><span class="line">&#125;e_e[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(node x, node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.w &lt; y.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = x;</span><br><span class="line"><span class="keyword">while</span>(pre[r] != r)</span><br><span class="line">&#123;</span><br><span class="line">r = pre[r];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kru</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = t * (t - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i ++)</span><br><span class="line">pre[i] = i;</span><br><span class="line">sort(e_e + <span class="number">1</span>, e_e + len + <span class="number">1</span>, cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = find(e_e[i].s);</span><br><span class="line"><span class="keyword">int</span> yy = find(e_e[i].e);</span><br><span class="line"><span class="keyword">if</span>(xx != yy)</span><br><span class="line">&#123;</span><br><span class="line">ans += e_e[i].w;</span><br><span class="line">pre[xx] = yy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> len = t * (t - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;e_e[i].s, &amp;e_e[i].e, &amp;e_e[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = kru();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Ubiquitous-Religions"><a href="#Ubiquitous-Religions" class="headerlink" title="Ubiquitous Religions"></a>Ubiquitous Religions</h2><p>Description:<br>There are so many different religions in the world today that it is difficult to keep track of them all. You are interested in finding out how many different religions students in your university believe in.</p><p>You know that there are n students in your university (0 &lt; n &lt;= 50000). It is infeasible for you to ask every student their religious beliefs. Furthermore, many students are not comfortable expressing their beliefs. One way to avoid these problems is to ask m (0 &lt;= m &lt;= n(n-1)/2) pairs of students and ask them whether they believe in the same religion (e.g. they may know if they both attend the same church). From this data, you may not know what each person believes in, but you can get an idea of the upper bound of how many different religions can be possibly represented on campus. You may assume that each student subscribes to at most one religion.<br><code>Input</code><br>The input consists of a number of cases. Each case starts with a line specifying the integers n and m. The next m lines each consists of two integers i and j, specifying that students i and j believe in the same religion. The students are numbered 1 to n. The end of input is specified by a line in which n = m = 0.<br><code>Output</code><br>For each test case, print on a single line the case number (starting with 1) followed by the maximum number of different religions that the students in the university believe in.</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Sample <span class="keyword">Input</span></span><br><span class="line"><span class="number">10</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="keyword">Case</span> <span class="number">1</span>: <span class="number">1</span></span><br><span class="line"><span class="keyword">Case</span> <span class="number">2</span>: <span class="number">7</span></span><br><span class="line">Hint</span><br><span class="line">Huge <span class="keyword">input</span>, scanf is recommended.</span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = x;</span><br><span class="line"><span class="keyword">while</span>(pre[r] != r)</span><br><span class="line">&#123;</span><br><span class="line">r = pre[r];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> xx = find(x), yy = find(y);</span><br><span class="line"><span class="keyword">if</span>(xx != yy)</span><br><span class="line">pre[xx] = yy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) pre[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x, &amp;y);</span><br><span class="line">join(y, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="keyword">if</span>(pre[i] == i)</span><br><span class="line">ans ++; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,k ++, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Cube-Stacking"><a href="#Cube-Stacking" class="headerlink" title="Cube Stacking"></a>Cube Stacking</h2><p>Description:<br>Farmer John and Betsy are playing a game with N (1 &lt;= N &lt;= 30,000)identical cubes labeled 1 through N. They start with N stacks, each containing a single cube. Farmer John asks Betsy to perform P (1&lt;= P &lt;= 100,000) operation. There are two types of operations:<br>moves and counts.</p><ul><li>In a move operation, Farmer John asks Bessie to move the stack containing cube X on top of the stack containing cube Y.</li><li>In a count operation, Farmer John asks Bessie to count the number of cubes on the stack with cube X that are under the cube X and report that value.</li></ul><p>Write a program that can verify the results of the game.<br><code>Input</code></p><ul><li><p>Line 1: A single integer, P</p></li><li><p>Lines 2..P+1: Each of these lines describes a legal operation. Line 2 describes the first operation, etc. Each line begins with a ‘M’ for a move operation or a ‘C’ for a count operation. For move operations, the line also contains two integers: X and Y.For count operations, the line also contains a single integer: X.</p></li></ul><p>Note that the value for N does not appear in the input file. No move operation will request a move a stack onto itself.<br><code>Output</code><br>Print the output from each of the count operations in the same order as the input file.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">6</span></span><br><span class="line">M <span class="number">1</span> <span class="number">6</span></span><br><span class="line">C <span class="number">1</span></span><br><span class="line">M <span class="number">2</span> <span class="number">4</span></span><br><span class="line">M <span class="number">2</span> <span class="number">6</span></span><br><span class="line">C <span class="number">3</span></span><br><span class="line">C <span class="number">4</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxx], dis[maxx], cnt[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pre[x] != x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = pre[x];</span><br><span class="line">pre[x] = find(pre[x]);</span><br><span class="line">dis[x] += dis[tmp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pre[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pre[x] = y;</span><br><span class="line">dis[x] += cnt[y];</span><br><span class="line">cnt[y] += cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">31000</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line">pre[i] = i;</span><br><span class="line">cnt[i] = <span class="number">1</span>;</span><br><span class="line">dis[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(n --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">'M'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span>(find(a) != find(b))</span><br><span class="line">join(find(a), find(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">find(x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dis[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Dragon-Balls"><a href="#Dragon-Balls" class="headerlink" title="Dragon Balls"></a>Dragon Balls</h2><p>Description:<br>Five hundred years later, the number of dragon balls will increase unexpectedly, so it’s too difficult for Monkey King(WuKong) to gather all of the dragon balls together.<br>His country has N cities and there are exactly N dragon balls in the world. At first, for the ith dragon ball, the sacred dragon will puts it in the ith city. Through long years, some cities’ dragon ball(s) would be transported to other cities. To save physical strength WuKong plans to take Flying Nimbus Cloud, a magical flying cloud to gather dragon balls.<br>Every time WuKong will collect the information of one dragon ball, he will ask you the information of that ball. You must tell him which city the ball is located and how many dragon balls are there in that city, you also need to tell him how many times the ball has been transported so far.<br><code>Input</code><br>The first line of the input is a single positive integer T(0 &lt; T &lt;= 100).<br>For each case, the first line contains two integers: N and Q (2 &lt; N &lt;= 10000 , 2 &lt; Q &lt;= 10000).<br>Each of the following Q lines contains either a fact or a question as the follow format:<br>T A B : All the dragon balls which are in the same city with A have been transported to the city the Bth ball in. You can assume that the two cities are different.<br>Q A : WuKong want to know X (the id of the city Ath ball is in), Y (the count of balls in Xth city) and Z (the tranporting times of the Ath ball). (1 &lt;= A, B &lt;= N)<br><code>Output</code><br>For each test case, output the test case number formated as sample output. Then for each query, output a line with three integers X Y Z saparated by a blank space.</p><p><code>题目大意</code>：<br>有标号为1到n的n个龙珠，分别放在对应标号为1到n的n个城市里。<br>下面有两种操作:<br>T A B表示把A龙珠所在城市的所有龙珠都转移到B龙珠所在的城市中<br>Q A 表示查询A，需要知道A龙珠现在所在的城市，A所在的城市有几颗龙珠，A转移到这个城市移动了多少次,分别输出3个整数，表示上述信息。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">2</span><br><span class="line">3 3</span><br><span class="line">T<span class="number"> 1 </span>2</span><br><span class="line">T<span class="number"> 3 </span>2</span><br><span class="line">Q 2</span><br><span class="line">3 4</span><br><span class="line">T<span class="number"> 1 </span>2</span><br><span class="line">Q 1</span><br><span class="line">T<span class="number"> 1 </span>3</span><br><span class="line">Q 1</span><br><span class="line">Sample Output</span><br><span class="line">Case 1:</span><br><span class="line">2<span class="number"> 3 </span>0</span><br><span class="line">Case 2:</span><br><span class="line">2<span class="number"> 2 </span>1</span><br><span class="line">3<span class="number"> 3 </span>2</span><br></pre></td></tr></table></figure><blockquote><p>没写出来，先看着别人的代码和详解吧<br>code:<br><a href="https://blog.csdn.net/CSDN___CSDN/article/details/89424711" target="_blank" rel="noopener">详细链接</a><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10005</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> pre[maxn];<span class="comment">//pre[i]表示第i个球所在的城市</span></span><br><span class="line"><span class="keyword">int</span> sum[maxn];<span class="comment">//sum[i]表示第i个城市所拥有的球的个数</span></span><br><span class="line"><span class="keyword">int</span> cnt[maxn];<span class="comment">//cnt[i]表示第i个球移动了几次</span></span><br><span class="line"><span class="keyword">int</span> n,m,root;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//初始化，每一个球原来都呆在自己的城市，所以每一个城市里都只有1个球，每一个球的移动次数都是0。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;i++)</span><br><span class="line">&#123;</span><br><span class="line">pre[i] = i;</span><br><span class="line">sum[i] = <span class="number">1</span>;</span><br><span class="line">cnt[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==pre[x])</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">int</span> fx = find(pre[x]);</span><br><span class="line">cnt[x] += cnt[pre[x]];</span><br><span class="line">pre[x] = fx;</span><br><span class="line"><span class="keyword">return</span> fx;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx = find(x);</span><br><span class="line"><span class="keyword">int</span> fy = find(y);</span><br><span class="line"><span class="keyword">if</span>(fy==fx)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">pre[fx] = fy;</span><br><span class="line">sum[fy] += sum[fx];</span><br><span class="line">sum[fx] = <span class="number">0</span>;</span><br><span class="line">cnt[fx] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T,k=<span class="number">1</span>,i;</span><br><span class="line"><span class="keyword">int</span> x,y,a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,k++);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'T'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">join(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'Q'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line">root = find(a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,root,sum[root],cnt[a]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><h2 id="Zjnu-Stadium"><a href="#Zjnu-Stadium" class="headerlink" title="Zjnu Stadium"></a>Zjnu Stadium</h2><p>Description:<br>In 12th Zhejiang College Students Games 2007, there was a new stadium built in Zhejiang Normal University. It was a modern stadium which could hold thousands of people. The audience Seats made a circle. The total number of columns were 300 numbered 1–300, counted clockwise, we assume the number of rows were infinite.<br>These days, Busoniya want to hold a large-scale theatrical performance in this stadium. There will be N people go there numbered 1–N. Busoniya has Reserved several seats. To make it funny, he makes M requests for these seats: A B X, which means people numbered B must seat clockwise X distance from people numbered A. For example: A is in column 4th and X is 2, then B must in column 6th (6=4+2).<br>Now your task is to judge weather the request is correct or not. The rule of your judgement is easy: when a new request has conflicts against the foregoing ones then we define it as incorrect, otherwise it is correct. Please find out all the incorrect requests and count them as R.<br><code>Input</code><br>There are many test cases:<br>For every case:<br>The first line has two integer N(1&lt;=N&lt;=50,000), M(0&lt;=M&lt;=100,000),separated by a space.<br>Then M lines follow, each line has 3 integer A(1&lt;=A&lt;=N), B(1&lt;=B&lt;=N), X(0&lt;=X&lt;300) (A!=B), separated by a space.</p><p><code>Output</code><br>For every case:<br>Output R, represents the number of incorrect request.</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line">10 10</span><br><span class="line">1<span class="number"> 2 </span>150</span><br><span class="line">3<span class="number"> 4 </span>200</span><br><span class="line">1<span class="number"> 5 </span>270</span><br><span class="line">2<span class="number"> 6 </span>200</span><br><span class="line">6<span class="number"> 5 </span>80</span><br><span class="line">4<span class="number"> 7 </span>150</span><br><span class="line">8<span class="number"> 9 </span>100</span><br><span class="line">4<span class="number"> 8 </span>50</span><br><span class="line">1<span class="number"> 7 </span>100</span><br><span class="line">9<span class="number"> 2 </span>100</span><br><span class="line">Sample Output</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">Hint:</span><br><span class="line">（PS： the 5th and 10th requests are incorrect）</span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//题目大意：给你n个人，m个关系，关系表示b在距离a顺时针方向的X距离的地、询问有哪些信息需要改正（也就是错的）。</span></span><br><span class="line"><span class="comment">/*其中A表示a的祖先，B表示b的祖先，suma表示a到A的权值 ，sumb表示b到B的权值，我们已知a，b间距离，那么x也是可求距离。</span></span><br><span class="line"><span class="comment">那么如果两个节点已经连接了，那么如何判断这两个节点之间的距离确实是w呢？直接用sum【b】-sum【a】就能得到a，b之间真实距离，如果和w不等，那么说明这条边需要更改消息。</span></span><br><span class="line"><span class="comment">也就是说output要加1了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1000010</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">1000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=f[x])</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//pre是x的一个父节点。</span></span><br><span class="line">        <span class="keyword">int</span> pre=f[x];</span><br><span class="line"><span class="comment">//递归找祖先。</span></span><br><span class="line">        f[x]=find(f[x]);</span><br><span class="line">        sum[x]+=sum[pre];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> output=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i]=i;</span><br><span class="line">            sum[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x,y,w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;w);</span><br><span class="line">            <span class="keyword">int</span> xx=find(x);</span><br><span class="line">            <span class="keyword">int</span> yy=find(y);</span><br><span class="line">            <span class="keyword">if</span>(xx==yy)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(sum[y]-sum[x]!=w)</span><br><span class="line">                &#123;</span><br><span class="line">                    output++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sum[yy]=w-sum[y]+sum[x];</span><br><span class="line">                f[yy]=xx;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="How-Many-Tables"><a href="#How-Many-Tables" class="headerlink" title="How Many Tables"></a>How Many Tables</h2><p>Description:<br>Today is Ignatius’ birthday. He invites a lot of friends. Now it’s dinner time. Ignatius wants to know how many tables he needs at least. You have to notice that not all the friends know each other, and all the friends do not want to stay with strangers.</p><p>One important rule for this problem is that if I tell you A knows B, and B knows C, that means A, B, C know each other, so they can stay in one table.</p><p>For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least.<br><code>Input</code><br>The input starts with an integer T(1&lt;=T&lt;=25) which indicate the number of test cases. Then T test cases follow. Each test case starts with two integers N and M(1&lt;=N,M&lt;=1000). N indicates the number of friends, the friends are marked from 1 to N. Then M lines follow. Each line consists of two integers A and B(A!=B), that means friend A and friend B know each other. There will be a blank line between two cases.<br><code>Output</code><br>For each test case, just output how many tables Ignatius needs at least. Do NOT print any blanks.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = x;</span><br><span class="line"><span class="keyword">while</span>(pre[r] != r)</span><br><span class="line">&#123;</span><br><span class="line">r = pre[r];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> xx = find(x), yy = find(y);</span><br><span class="line"><span class="keyword">if</span>(xx != yy)</span><br><span class="line">pre[xx] = yy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) pre[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;x, &amp;y);</span><br><span class="line">join(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line"><span class="keyword">if</span>(pre[i] == i)</span><br><span class="line">ans ++; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day17&quot;&gt;&lt;a href=&quot;#Day17&quot; class=&quot;headerlink&quot; title=&quot;Day17&quot;&gt;&lt;/a&gt;Day17&lt;/h1&gt;&lt;p&gt;今天讲的是并查集和最小生成树&lt;br&gt;&lt;a href=&quot;https://vjudge.net/contest/317297#overview&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OJ链接&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="算法集训" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E9%9B%86%E8%AE%AD/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Day16</title>
    <link href="http://yoursite.com/2019/08/03/Day16/"/>
    <id>http://yoursite.com/2019/08/03/Day16/</id>
    <published>2019-08-02T16:00:00.000Z</published>
    <updated>2019-08-04T14:03:47.639Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --><h1 id="Day16"><a href="#Day16" class="headerlink" title="Day16"></a>Day16</h1><p>今天是一场积分赛，还行~~<br><a href="https://hpuoj.com/contest/25/" target="_blank" rel="noopener">OJ链接</a><br><a id="more"></a></p><h2 id="蚂蚁觅食（一）"><a href="#蚂蚁觅食（一）" class="headerlink" title="蚂蚁觅食（一）"></a>蚂蚁觅食（一）</h2><p>Description:<br>一只饥饿的小蚂蚁外出觅食，幸运的小蚂蚁发现了好多食物，但是它只有一次搬食物的机会。<br>可因为力气太小了，它不能搬走重量超过自己体重的食物,且只能搬走位置相邻的两个食物，或者只搬走其中一个。<br>食物的位置不会改变。<br>这可难住了这只蚂蚁，它不知道它最多能搬走多重的食物。请帮小蚂蚁计算。<br><code>输入格式</code><br>第一行一个正整数n，(n&gt;=0并且n&lt;=1000)</p><p>第二行n个正整数 A[1]…..A[n]，A[i] 表示在第i 个位置上食物的重量。A[i]&lt;=1e9.</p><p>第三行一个正整数m，表示蚂蚁的体重。(m&lt;=1e9).</p><p><code>输出格式</code><br>一个整数表示小蚂蚁能带走的食物的重量。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">output</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxx], v[maxx], dp[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N, V;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i ++) <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; V;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = V; j &gt;= v[i]; j --)</span><br><span class="line">dp[j] = max(dp[j], dp[j - v[i]] + v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[V] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="蚂蚁觅食（二）"><a href="#蚂蚁觅食（二）" class="headerlink" title="蚂蚁觅食（二）"></a>蚂蚁觅食（二）</h2><p>Description:<br>一只饥饿的小蚂蚁外出觅食，幸运的的小蚂蚁发现了好多食物。<br>但是这些食物位于一个N∗M的方格魔法阵的右下角，而小蚂蚁位于方格法阵的左上角。<br>并且小蚂蚁被施展了魔法，它只能向下或者向右走。<br>请你帮助小蚂蚁计算一下，它一共有多少条路可以走到有食物的方格。</p><p><code>输入格式</code><br>多组输入，</p><p>每一组两个正整数N， M （N,M≤30）。表示一个方格魔法阵。</p><p><code>输出格式</code><br>一个整数表示一共有多少条路。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line">output</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//dfs般写法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll dp[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">2</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[x][y]) <span class="keyword">return</span> dp[x][y];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> xx = x + d[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> yy = y + d[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(xx &gt;= <span class="number">1</span> &amp;&amp; yy &gt;= <span class="number">1</span> &amp;&amp; xx &lt;= n &amp;&amp; yy &lt;= m)</span><br><span class="line">dp[x][y] += dfs(xx, yy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">dp[n][m] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dfs(<span class="number">1</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//dp般写法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">ll dp[<span class="number">1234</span>][<span class="number">1234</span>];</span><br><span class="line">ll n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1009</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">dp[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= m; j ++)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j] = (dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[n][m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="蚂蚁觅食（三）"><a href="#蚂蚁觅食（三）" class="headerlink" title="蚂蚁觅食（三）"></a>蚂蚁觅食（三）</h2><p>Description:<br>马上就要冬天了，勤劳的小蚂蚁需要储存足够多的食物才能安全过冬。<br>今天，这只小蚂蚁走出巢穴寻找食物，但是这次蚁巢周围只有很少的食物，它需要去别的地方。<br>不幸的是小蚂蚁的体力很有限，而且每走一个单位长度就要消耗一点体力，不能找的时间太久，所以想让你帮忙计算一下它是否能用剩下的体力把足够多的食物搬回蚁巢。<br>由于蚂蚁的嘴太小，每次最多只能衔起一个食物。</p><p>输入格式<br>输入t组, t≤20<br>第一行三个数n,E,V表示食物的个数，蚂蚁剩余的体力，安全过冬需要的最少食物体积, 0&lt;n≤200,0&lt;E,V≤10000。<br>接下来n行，每行两个数pi,vi,表示第i个食物的位置和体积,0&lt;p[i],v[i]≤1000。<br>初始蚂蚁和蚁巢均在坐标轴原点。</p><p>输出格式<br>每个输出占一行。<br>如果蚂蚁能安全过冬，输出 “YES”,否则输出”NO”。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line">output</span><br><span class="line">YES</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> w[maxx], v[maxx], dp[maxx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, n, E, V;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; E &gt;&gt; V;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">cin</span> &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = E / <span class="number">2</span>; j &gt;= w[i]; j --)</span><br><span class="line">dp[j] = max(dp[j], dp[j - w[i]] + v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[E / <span class="number">2</span>] &gt;= V) <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>##<br>Description:<br>平面上有 n只蚂蚁，它走过的路径可以看作一条直线</p><p>由这n 条直线定义的某些区域是无界的，而另一些区域则是有界的。</p><p>有界区域的最大个数是多少？</p><p>比如现在有4条直线，只有下面最左边的图中直线定义的有界区域是最多的<br><img src="https://i.loli.net/2019/08/04/nNgw1ZJHtWMsipD.png" alt="jay.VpPvtTX2.png"><br><code>输入格式</code><br>T 组输入, (1≤T≤100)</p><p>每组一个数 n ，(1≤n≤109)</p><p><code>输出格式</code><br>对于每组数据，输出一个整数表示有界区域的最大个数。<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">output</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p></p><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">ll n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">3</span>) ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans = (n - <span class="number">1</span>) * (n - <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="蚂蚁和斐波那契"><a href="#蚂蚁和斐波那契" class="headerlink" title="蚂蚁和斐波那契"></a>蚂蚁和斐波那契</h2><p>Description:<br>聪明的小蚂蚁最近学习了斐波那契数列,但是它想到了一个问题：<br>从L到R之间斐波那契数列和的奇偶是什么呢？<br>其中Fib[1]=1,Fib[2]=1 .</p><p><code>输入格式</code><br>单组输入:<br>每组输入两个以空格隔开的数字 L 和 R<br>其中 (0&lt;L&lt;=R&lt;1018)</p><p><code>输出格式</code><br>从 L 到 R 斐波那契数列和的奇偶，如果是奇数输出 “1” (不带引号) ，否则输出 “0” (不带引号)</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line">output</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll ans[<span class="number">55</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll mid,miid,l,r;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">mid=l%<span class="number">3</span>,miid=r%<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(mid==<span class="number">0</span>&amp;&amp;miid==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mid==miid)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mid==<span class="number">0</span>&amp;&amp;miid==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mid==<span class="number">0</span>&amp;&amp;miid==<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mid==<span class="number">1</span>&amp;&amp;miid==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mid==<span class="number">2</span>&amp;&amp;miid==<span class="number">0</span>)<span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mid==<span class="number">2</span>&amp;&amp;miid==<span class="number">1</span>)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mid==<span class="number">1</span>&amp;&amp;miid==<span class="number">2</span>)<span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="蚂蚁装修"><a href="#蚂蚁装修" class="headerlink" title="蚂蚁装修"></a>蚂蚁装修</h2><p>Description:<br>还有一个月就开学了，爱学习的小蚂蚁想庆祝一下！于是它要把它的“家”装修一下。<br>首先要做的就是贴地板。<br>小蚂蚁“家”的地面可以看成一个2∗N 的方格 ，它拥有无数块1∗2 和 2∗1的地板。<br>请你帮下蚂蚁计算一下一共有多少种方法能把地面给放满 。<br>地板不能切割，也不能重叠。</p><p><code>输入格式</code><br>单组输入：<br>只有一个数字 N<br>其中 (0&lt;N&lt;1018)</p><p><code>输出格式</code><br>输出放法数对109+7取模的结果</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line">output</span><br><span class="line"><span class="number">2</span></span><br><span class="line">input</span><br><span class="line"><span class="number">1</span></span><br><span class="line">output</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std<span class="comment">;</span></span><br><span class="line">typedef long long <span class="keyword">ll;</span></span><br><span class="line"><span class="keyword">const </span>int mod = <span class="number">1</span>e9 + <span class="number">7</span><span class="comment">;</span></span><br><span class="line">const int maxx = <span class="number">4</span><span class="comment">;</span></span><br><span class="line">struct node&#123;</span><br><span class="line"><span class="keyword">ll </span>m[maxx][maxx]<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">node <span class="keyword">mul(node </span>a, node <span class="keyword">b)</span></span><br><span class="line"><span class="keyword">&#123;</span></span><br><span class="line"><span class="keyword"></span>node ans<span class="comment">;</span></span><br><span class="line">memset(ans.m, <span class="number">0</span>, sizeof ans.m)<span class="comment">;</span></span><br><span class="line">for(int i = <span class="number">0</span><span class="comment">; i &lt; 2; i ++)</span></span><br><span class="line">&#123;</span><br><span class="line">for(int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j &lt; 2; j ++)</span></span><br><span class="line">&#123;</span><br><span class="line">for(int k = <span class="number">0</span><span class="comment">; k &lt; 2; k ++)</span></span><br><span class="line">ans.m[i][<span class="keyword">j] </span>= (ans.m[i][<span class="keyword">j] </span>+ a.m[i][k] * <span class="keyword">b.m[k][j] </span>% mod + mod) % mod<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return ans<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node kpow(node a, <span class="keyword">ll </span><span class="keyword">b)</span></span><br><span class="line"><span class="keyword">&#123;</span></span><br><span class="line"><span class="keyword"></span>node res<span class="comment">;</span></span><br><span class="line">memset(res.m, <span class="number">0</span>, sizeof res.m)<span class="comment">;</span></span><br><span class="line">for(int i = <span class="number">0</span><span class="comment">; i &lt; 2; i ++)</span></span><br><span class="line">&#123;</span><br><span class="line">res.m[i][i] = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">while(<span class="keyword">b)</span></span><br><span class="line"><span class="keyword"></span>&#123;</span><br><span class="line">if(<span class="keyword">b </span>&amp; <span class="number">1</span>) res = <span class="keyword">mul(res, </span>a)<span class="comment">;</span></span><br><span class="line"><span class="keyword">b </span>&gt;&gt;= <span class="number">1</span><span class="comment">;</span></span><br><span class="line">a = <span class="keyword">mul(a, </span>a)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">return res<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">ll </span>n<span class="comment">;</span></span><br><span class="line">cin &gt;&gt; n<span class="comment">;</span></span><br><span class="line">node a, <span class="keyword">b, </span>ans<span class="comment">;</span></span><br><span class="line">a.m[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">2</span><span class="comment">; a.m[0][1] = 0;</span></span><br><span class="line">a.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span><span class="comment">; a.m[1][1] = 0;</span></span><br><span class="line"><span class="keyword">b.m[0][0] </span>= <span class="number">1</span><span class="comment">; b.m[0][1] = 1;</span></span><br><span class="line"><span class="keyword">b.m[1][0] </span>= <span class="number">1</span><span class="comment">; b.m[1][1] = 0;</span></span><br><span class="line">if(n == <span class="number">1</span>) ans.m[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">ans = kpow(<span class="keyword">b, </span>n - <span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">ans = <span class="keyword">mul(ans, </span>a)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans.m[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; endl<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="蚂蚁的镜像串"><a href="#蚂蚁的镜像串" class="headerlink" title="蚂蚁的镜像串"></a>蚂蚁的镜像串</h2><p>Description:<br>一只聪明的蚂蚁在学习了回文串之后，一直觉得回文串不够优美，所以它决定自己定义一种新的字符串——镜像串</p><p>所谓镜像串，就是对一个字符串进行一整个完全的翻转后，得到的新字符串与原字符串相同，也就是说左右镜像之后的字符串和原串相同。例如：AA就是一个镜像串,bb不是镜像串</p><p>现在给你一个字符串S，请你快速的判断字符串S是不是一个镜像串</p><p>字符串中出现的字母字体如下表</p><p><code>输入格式</code><br>第一行一个整数T (1≤T≤100)代表有T组输入</p><p>接下来T行，每行输入一个长度小于等于105的字符串S<br>保证每个字符串只包含大小写字母</p><p><code>输出格式</code><br>对于每组输入，判断S是否为镜像串</p><p>如果是，输出”YES”。否则输出”NO”。</p><p>每组输出占一行</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">样例</span></span><br><span class="line"><span class="string">input</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="string">QAQ</span></span><br><span class="line"><span class="string">TAT</span></span><br><span class="line"><span class="string">oUo</span></span><br><span class="line"><span class="string">oVo</span></span><br><span class="line"><span class="string">XoX</span></span><br><span class="line"><span class="string">output</span></span><br><span class="line"><span class="literal">NO</span></span><br><span class="line"><span class="literal">YES</span></span><br><span class="line"><span class="literal">YES</span></span><br><span class="line"><span class="literal">YES</span></span><br><span class="line"><span class="literal">YES</span></span><br><span class="line"><span class="string">提示</span></span><br><span class="line"><span class="string">mm,nn,uu也是镜像串</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">string s;</span><br><span class="line">cin<span class="meta">&gt;&gt;</span>t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">cin<span class="meta">&gt;&gt;</span>s;</span><br><span class="line">int flag=<span class="number">1</span>;</span><br><span class="line"> string mid=s;</span><br><span class="line"> reverse(mid.<span class="keyword">begin</span>(),mid.<span class="keyword">end</span>());</span><br><span class="line"><span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((s[i]==<span class="string">'b'</span>&amp;&amp;mid[i]==<span class="string">'d'</span>)<span class="params">||</span>(s[i]==<span class="string">'d'</span>&amp;&amp;mid[i]==<span class="string">'b'</span>)<span class="params">||</span>(s[i]==<span class="string">'p'</span>&amp;&amp;mid[i]==<span class="string">'q'</span>)<span class="params">||</span>(s[i]==<span class="string">'q'</span>&amp;&amp;mid[i]==<span class="string">'p'</span>)<span class="params">||</span>(s[i]==mid[i]&amp;&amp;(s[i]==<span class="string">'A'</span><span class="params">||</span>s[i]==<span class="string">'H'</span><span class="params">||</span>s[i]==<span class="string">'I'</span><span class="params">||</span>s[i]==<span class="string">'i'</span><span class="params">||</span>s[i]==<span class="string">'l'</span><span class="params">||</span>s[i]==<span class="string">'M'</span><span class="params">||</span>s[i]==<span class="string">'m'</span><span class="params">||</span>s[i]==<span class="string">'n'</span><span class="params">||</span>s[i]==<span class="string">'O'</span><span class="params">||</span>s[i]==<span class="string">'o'</span><span class="params">||</span>s[i]==<span class="string">'T'</span><span class="params">||</span>s[i]==<span class="string">'U'</span><span class="params">||</span>s[i]==<span class="string">'u'</span><span class="params">||</span>s[i]==<span class="string">'V'</span><span class="params">||</span>s[i]==<span class="string">'v'</span><span class="params">||</span>s[i]==<span class="string">'W'</span><span class="params">||</span>s[i]==<span class="string">'w'</span><span class="params">||</span>s[i]==<span class="string">'X'</span><span class="params">||</span>s[i]==<span class="string">'x'</span><span class="params">||</span>s[i]==<span class="string">'Y'</span>)))</span><br><span class="line">&#123;</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)puts(<span class="string">"YES"</span>);</span><br><span class="line"><span class="keyword">else</span>puts(<span class="string">"NO"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="蚂蚁赛跑"><a href="#蚂蚁赛跑" class="headerlink" title="蚂蚁赛跑"></a>蚂蚁赛跑</h2><p>Description:<br>小白和小黑非常喜欢养蚂蚁，他们每个人都养了n只蚂蚁。<br>有一天，他们想比一比谁养蚂蚁的本领更强，于是就举办了一场蚂蚁赛跑比赛。假设蚂蚁都是匀速直线奔跑。<br>比赛的规则是这样的：每只蚂蚁必须且最多比一场，赢一场得10分，输一场扣10分。平局都不得分也不扣分。<br>狡猾的小黑同学为了赢得比赛，提前偷到了小白所有蚂蚁得速度，请你帮小黑算一算，他在比赛中最多得多少分。</p><p><code>输入格式</code><br>有多组测试案例，最多有100组，对于每一组案例：<br>第一行以正整数n ,（n≤1000），即每个人的蚂蚁数量。<br>第二行的n个整数是小黑的蚂蚁的速度。<br>第三行的n整数是小白的蚂蚁速度。<br>蚂蚁的速度小于100</p><p><code>输出格式</code><br>对于每个输入案例，输出一个整数，这是小黑能够获得的最大分数。</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">100</span> <span class="number">8</span></span><br><span class="line">output</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">待补</span><br></pre></td></tr></table></figure><p></p><h2 id="蚂蚁上树"><a href="#蚂蚁上树" class="headerlink" title="蚂蚁上树"></a>蚂蚁上树</h2><p>Description:<br>蚂蚁想知道这棵树上距离最远的两个点之间的距离</p><p>给你一个具有 n 个节点的树</p><p>求这棵树上距离最远的两个点之间的距离</p><p>输入格式<br>第一行一个整数 n ，(1≤n≤104)</p><p>接下来 n−1 行，每行三个整数 x,y,z 表示 x 与 y 之间有一条长度为 z 的边 (1≤x,y≤n,1≤z≤104)</p><p>输出格式<br>一个整数表示树上距离最远的两个点之间的距离</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">10</span></span><br><span class="line">output</span><br><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; v[maxx];</span><br><span class="line"><span class="keyword">bool</span> vis[maxx];</span><br><span class="line"><span class="keyword">int</span> dis[maxx];</span><br><span class="line"><span class="keyword">int</span> ans, point;</span><br><span class="line"><span class="comment">//struct node&#123;</span></span><br><span class="line"><span class="comment">//int x, y, step;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="comment">//node e1, e2;</span></span><br><span class="line">q.push(x);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">point = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> f = q.front();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(dis[f] &gt; ans)</span><br><span class="line">&#123;</span><br><span class="line">ans = dis[f];</span><br><span class="line">point = f;</span><br><span class="line"><span class="comment">//return ans;</span></span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v[f].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">t = v[f][i];</span><br><span class="line"><span class="keyword">if</span>(vis[t.first] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">vis[t.first] = <span class="number">1</span>;</span><br><span class="line">dis[t.first] = t.second + dis[f];</span><br><span class="line">q.push(t.first);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">v[a].push_back(make_pair(b, c));</span><br><span class="line">v[b].push_back(make_pair(a, c));</span><br><span class="line">&#125;</span><br><span class="line">bfs(<span class="number">1</span>);</span><br><span class="line">bfs(point);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="蚂蚁的游戏"><a href="#蚂蚁的游戏" class="headerlink" title="蚂蚁的游戏"></a>蚂蚁的游戏</h2><p>Description:<br>蚂蚁Bob和蚂蚁Alice是青梅竹蚁，Alice喜欢和Bob一起玩游戏，每当Alice想到新的游戏，都会找Bob一起玩</p><p>今天Alice的游戏是这样的：</p><p>n堆石子，两人轮流取。每次只能在1堆中取，不能不取，最先取完石子者胜</p><p>Alice先取石子，Alice和Bob都非常聪明，拿石子的过程中不会出现失误。</p><p><code>输入格式</code><br>第一行有一个整数T，有T组输入数据(T≤50)</p><p>每组第一行有一个数n表示有n堆石子，(1≤n≤20000)</p><p>第二行有n个非零整数x，表示每堆石子的数量(x≤103)</p><p><code>输出格式</code><br>请你判断Alice能否在游戏中获胜，如果不能获胜，输出NO。</p><p>否则，输出YES，并输出第一次取石子的所有方法（具体参见样例和提示）</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">样例</span><br><span class="line">input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">45</span> <span class="number">45</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line">output</span><br><span class="line">NO</span><br><span class="line">YES</span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">0</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line">提示</span><br><span class="line">对于第一组样例，不论Alice怎么取，Bob总能拿到最后一个石子，所以输出为NO</span><br><span class="line"></span><br><span class="line">对于第二组样例，Alice可以第一次取石子有三种取法：</span><br><span class="line"></span><br><span class="line">第<span class="number">3</span>堆取出<span class="number">7</span>个，剩下<span class="number">1</span>个</span><br><span class="line">第<span class="number">4</span>堆全部取出，剩下<span class="number">0</span>个</span><br><span class="line">第<span class="number">5</span>堆取出<span class="number">7</span>个，剩下<span class="number">3</span>个</span><br><span class="line">对于每组输出，总是按照堆的编号顺序输出的</span><br></pre></td></tr></table></figure><p>code:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">待补</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Aug 26 2019 12:13:02 GMT+0800 (GMT+08:00) --&gt;&lt;h1 id=&quot;Day16&quot;&gt;&lt;a href=&quot;#Day16&quot; class=&quot;headerlink&quot; title=&quot;Day16&quot;&gt;&lt;/a&gt;Day16&lt;/h1&gt;&lt;p&gt;今天是一场积分赛，还行~~&lt;br&gt;&lt;a href=&quot;https://hpuoj.com/contest/25/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OJ链接&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
      <category term="集训" scheme="http://yoursite.com/categories/ACM/%E9%9B%86%E8%AE%AD/"/>
    
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="Algorithm" scheme="http://yoursite.com/tags/Algorithm/"/>
    
      <category term="算法集训" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E9%9B%86%E8%AE%AD/"/>
    
  </entry>
  
</feed>
